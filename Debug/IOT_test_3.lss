
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d6  00800200  000056c4  00005758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000056c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000124f  008007d6  008007d6  00005d2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a78  00000000  00000000  00005dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d661  00000000  00000000  00006844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036ad  00000000  00000000  00013ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000063ca  00000000  00000000  00017552  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002338  00000000  00000000  0001d91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000400f  00000000  00000000  0001fc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bb09  00000000  00000000  00023c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab8  00000000  00000000  0002f76c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c2       	rjmp	.+1166   	; 0x490 <__ctors_end>
       2:	00 00       	nop
       4:	66 c2       	rjmp	.+1228   	; 0x4d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c2       	rjmp	.+1224   	; 0x4d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c2       	rjmp	.+1220   	; 0x4d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c2       	rjmp	.+1216   	; 0x4d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c2       	rjmp	.+1212   	; 0x4d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c2       	rjmp	.+1208   	; 0x4d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c2       	rjmp	.+1204   	; 0x4d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c2       	rjmp	.+1200   	; 0x4d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c2       	rjmp	.+1196   	; 0x4d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c2       	rjmp	.+1192   	; 0x4d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c2       	rjmp	.+1188   	; 0x4d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	35 c7       	rjmp	.+3690   	; 0xe9c <__vector_12>
      32:	00 00       	nop
      34:	4e c2       	rjmp	.+1180   	; 0x4d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c2       	rjmp	.+1176   	; 0x4d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c2       	rjmp	.+1172   	; 0x4d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c2       	rjmp	.+1168   	; 0x4d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	46 c2       	rjmp	.+1164   	; 0x4d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c2       	rjmp	.+1160   	; 0x4d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c2       	rjmp	.+1156   	; 0x4d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c2       	rjmp	.+1152   	; 0x4d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	3e c2       	rjmp	.+1148   	; 0x4d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c2       	rjmp	.+1144   	; 0x4d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c2       	rjmp	.+1140   	; 0x4d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c2       	rjmp	.+1136   	; 0x4d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 84 20 	jmp	0x4108	; 0x4108 <__vector_25>
      68:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__vector_26>
      6c:	32 c2       	rjmp	.+1124   	; 0x4d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c2       	rjmp	.+1120   	; 0x4d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c2       	rjmp	.+1116   	; 0x4d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c2       	rjmp	.+1112   	; 0x4d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c2       	rjmp	.+1108   	; 0x4d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c2       	rjmp	.+1104   	; 0x4d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c2       	rjmp	.+1100   	; 0x4d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c2       	rjmp	.+1096   	; 0x4d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c2       	rjmp	.+1092   	; 0x4d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__vector_36>
      94:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__vector_37>
      98:	1c c2       	rjmp	.+1080   	; 0x4d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 04 24 	jmp	0x4808	; 0x4808 <__vector_39>
      a0:	18 c2       	rjmp	.+1072   	; 0x4d2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	16 c2       	rjmp	.+1068   	; 0x4d2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	14 c2       	rjmp	.+1064   	; 0x4d2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	12 c2       	rjmp	.+1060   	; 0x4d2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	10 c2       	rjmp	.+1056   	; 0x4d2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0e c2       	rjmp	.+1052   	; 0x4d2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c c2       	rjmp	.+1048   	; 0x4d2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0a c2       	rjmp	.+1044   	; 0x4d2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	08 c2       	rjmp	.+1040   	; 0x4d2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	06 c2       	rjmp	.+1036   	; 0x4d2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	04 c2       	rjmp	.+1032   	; 0x4d2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b0 21 	jmp	0x4360	; 0x4360 <__vector_51>
      d0:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__vector_52>
      d4:	fe c1       	rjmp	.+1020   	; 0x4d2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 46 22 	jmp	0x448c	; 0x448c <__vector_54>
      dc:	0c 94 98 22 	jmp	0x4530	; 0x4530 <__vector_55>
      e0:	f8 c1       	rjmp	.+1008   	; 0x4d2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 01       	movw	r22, r30
      e6:	bf 01       	movw	r22, r30
      e8:	bf 01       	movw	r22, r30
      ea:	f9 01       	movw	r30, r18
      ec:	01 02       	muls	r16, r17
      ee:	17 02       	muls	r17, r23
      f0:	bf 01       	movw	r22, r30
      f2:	bf 01       	movw	r22, r30
      f4:	f9 01       	movw	r30, r18
      f6:	01 02       	muls	r16, r17
      f8:	26 24       	eor	r2, r6
      fa:	96 24       	eor	r9, r6
      fc:	96 24       	eor	r9, r6
      fe:	96 24       	eor	r9, r6
     100:	96 24       	eor	r9, r6
     102:	96 24       	eor	r9, r6
     104:	96 24       	eor	r9, r6
     106:	96 24       	eor	r9, r6
     108:	26 24       	eor	r2, r6
     10a:	96 24       	eor	r9, r6
     10c:	96 24       	eor	r9, r6
     10e:	96 24       	eor	r9, r6
     110:	96 24       	eor	r9, r6
     112:	96 24       	eor	r9, r6
     114:	96 24       	eor	r9, r6
     116:	96 24       	eor	r9, r6
     118:	28 24       	eor	r2, r8
     11a:	96 24       	eor	r9, r6
     11c:	96 24       	eor	r9, r6
     11e:	96 24       	eor	r9, r6
     120:	96 24       	eor	r9, r6
     122:	96 24       	eor	r9, r6
     124:	96 24       	eor	r9, r6
     126:	96 24       	eor	r9, r6
     128:	96 24       	eor	r9, r6
     12a:	96 24       	eor	r9, r6
     12c:	96 24       	eor	r9, r6
     12e:	96 24       	eor	r9, r6
     130:	96 24       	eor	r9, r6
     132:	96 24       	eor	r9, r6
     134:	96 24       	eor	r9, r6
     136:	96 24       	eor	r9, r6
     138:	28 24       	eor	r2, r8
     13a:	96 24       	eor	r9, r6
     13c:	96 24       	eor	r9, r6
     13e:	96 24       	eor	r9, r6
     140:	96 24       	eor	r9, r6
     142:	96 24       	eor	r9, r6
     144:	96 24       	eor	r9, r6
     146:	96 24       	eor	r9, r6
     148:	96 24       	eor	r9, r6
     14a:	96 24       	eor	r9, r6
     14c:	96 24       	eor	r9, r6
     14e:	96 24       	eor	r9, r6
     150:	96 24       	eor	r9, r6
     152:	96 24       	eor	r9, r6
     154:	96 24       	eor	r9, r6
     156:	96 24       	eor	r9, r6
     158:	92 24       	eor	r9, r2
     15a:	96 24       	eor	r9, r6
     15c:	96 24       	eor	r9, r6
     15e:	96 24       	eor	r9, r6
     160:	96 24       	eor	r9, r6
     162:	96 24       	eor	r9, r6
     164:	96 24       	eor	r9, r6
     166:	96 24       	eor	r9, r6
     168:	5d 24       	eor	r5, r13
     16a:	96 24       	eor	r9, r6
     16c:	96 24       	eor	r9, r6
     16e:	96 24       	eor	r9, r6
     170:	96 24       	eor	r9, r6
     172:	96 24       	eor	r9, r6
     174:	96 24       	eor	r9, r6
     176:	96 24       	eor	r9, r6
     178:	96 24       	eor	r9, r6
     17a:	96 24       	eor	r9, r6
     17c:	96 24       	eor	r9, r6
     17e:	96 24       	eor	r9, r6
     180:	96 24       	eor	r9, r6
     182:	96 24       	eor	r9, r6
     184:	96 24       	eor	r9, r6
     186:	96 24       	eor	r9, r6
     188:	51 24       	eor	r5, r1
     18a:	96 24       	eor	r9, r6
     18c:	96 24       	eor	r9, r6
     18e:	96 24       	eor	r9, r6
     190:	96 24       	eor	r9, r6
     192:	96 24       	eor	r9, r6
     194:	96 24       	eor	r9, r6
     196:	96 24       	eor	r9, r6
     198:	75 24       	eor	r7, r5

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a e1       	ldi	r16, 0x1A	; 26
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e4       	ldi	r31, 0x4A	; 74
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	cd d4       	rcall	.+2458   	; 0xb66 <uxListRemove>
     1cc:	80 91 0d 18 	lds	r24, 0x180D	; 0x80180d <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 0d 18 	sts	0x180D, r24	; 0x80180d <uxCurrentNumberOfTasks>
     1d6:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	1a d4       	rcall	.+2100   	; 0xa1e <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	18 d4       	rcall	.+2096   	; 0xa1e <vPortFree>
     1ee:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	88 d5       	rcall	.+2832   	; 0xd10 <vPortYield>
     200:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 82 18 	lds	r30, 0x1882	; 0x801882 <pxCurrentTimerList>
     232:	f0 91 83 18 	lds	r31, 0x1883	; 0x801883 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0f c1       	rjmp	.+542    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	65 c0       	rjmp	.+202    	; 0x330 <prvTimerTask+0x12a>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     27e:	e0 91 82 18 	lds	r30, 0x1882	; 0x801882 <pxCurrentTimerList>
     282:	f0 91 83 18 	lds	r31, 0x1883	; 0x801883 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	66 d4       	rcall	.+2252   	; 0xb66 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9f c0       	rjmp	.+318    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <xTimerQueue>
     31c:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <xTimerQueue+0x1>
     320:	0e 94 1d 0a 	call	0x143a	; 0x143a <vQueueWaitForMessageRestricted>
     324:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     328:	81 11       	cpse	r24, r1
     32a:	8a c0       	rjmp	.+276    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     32c:	f1 d4       	rcall	.+2530   	; 0xd10 <vPortYield>
     32e:	88 c0       	rjmp	.+272    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     330:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     334:	85 c0       	rjmp	.+266    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 23       	and	r24, r24
     33a:	0c f4       	brge	.+2      	; 0x33e <prvTimerTask+0x138>
     33c:	81 c0       	rjmp	.+258    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     33e:	4e 80       	ldd	r4, Y+6	; 0x06
     340:	5f 80       	ldd	r5, Y+7	; 0x07
     342:	d2 01       	movw	r26, r4
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	8d 91       	ld	r24, X+
     348:	9c 91       	ld	r25, X
     34a:	1d 97       	sbiw	r26, 0x0d	; 13
     34c:	89 2b       	or	r24, r25
     34e:	19 f0       	breq	.+6      	; 0x356 <prvTimerTask+0x150>
     350:	c2 01       	movw	r24, r4
     352:	02 96       	adiw	r24, 0x02	; 2
     354:	08 d4       	rcall	.+2064   	; 0xb66 <uxListRemove>
     356:	ce 01       	movw	r24, r28
     358:	08 96       	adiw	r24, 0x08	; 8
     35a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <prvSampleTimeNow>
     35e:	8b 01       	movw	r16, r22
     360:	9c 01       	movw	r18, r24
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	0e 2e       	mov	r0, r30
     366:	00 0c       	add	r0, r0
     368:	ff 0b       	sbc	r31, r31
     36a:	ea 30       	cpi	r30, 0x0A	; 10
     36c:	f1 05       	cpc	r31, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <prvTimerTask+0x16c>
     370:	67 c0       	rjmp	.+206    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     372:	88 27       	eor	r24, r24
     374:	ee 58       	subi	r30, 0x8E	; 142
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	8f 4f       	sbci	r24, 0xFF	; 255
     37a:	0c 94 9c 26 	jmp	0x4d38	; 0x4d38 <__tablejump2__>
     37e:	f2 01       	movw	r30, r4
     380:	87 89       	ldd	r24, Z+23	; 0x17
     382:	81 60       	ori	r24, 0x01	; 1
     384:	87 8b       	std	Z+23, r24	; 0x17
     386:	ca 80       	ldd	r12, Y+2	; 0x02
     388:	db 80       	ldd	r13, Y+3	; 0x03
     38a:	ec 80       	ldd	r14, Y+4	; 0x04
     38c:	fd 80       	ldd	r15, Y+5	; 0x05
     38e:	46 85       	ldd	r20, Z+14	; 0x0e
     390:	57 85       	ldd	r21, Z+15	; 0x0f
     392:	60 89       	ldd	r22, Z+16	; 0x10
     394:	71 89       	ldd	r23, Z+17	; 0x11
     396:	4c 0d       	add	r20, r12
     398:	5d 1d       	adc	r21, r13
     39a:	6e 1d       	adc	r22, r14
     39c:	7f 1d       	adc	r23, r15
     39e:	c2 01       	movw	r24, r4
     3a0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <prvInsertTimerInActiveList>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <prvTimerTask+0x1a4>
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3aa:	d2 01       	movw	r26, r4
     3ac:	54 96       	adiw	r26, 0x14	; 20
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	55 97       	sbiw	r26, 0x15	; 21
     3b4:	c2 01       	movw	r24, r4
     3b6:	19 95       	eicall
     3b8:	f2 01       	movw	r30, r4
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	82 ff       	sbrs	r24, 2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c0:	4a 81       	ldd	r20, Y+2	; 0x02
     3c2:	5b 81       	ldd	r21, Y+3	; 0x03
     3c4:	6c 81       	ldd	r22, Y+4	; 0x04
     3c6:	7d 81       	ldd	r23, Y+5	; 0x05
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
     3cc:	a0 89       	ldd	r26, Z+16	; 0x10
     3ce:	b1 89       	ldd	r27, Z+17	; 0x11
     3d0:	9a 01       	movw	r18, r20
     3d2:	ab 01       	movw	r20, r22
     3d4:	28 0f       	add	r18, r24
     3d6:	39 1f       	adc	r19, r25
     3d8:	4a 1f       	adc	r20, r26
     3da:	5b 1f       	adc	r21, r27
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
     3e0:	ea 2c       	mov	r14, r10
     3e2:	fb 2c       	mov	r15, r11
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	c2 01       	movw	r24, r4
     3ec:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTimerGenericCommand>
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f2:	d2 01       	movw	r26, r4
     3f4:	57 96       	adiw	r26, 0x17	; 23
     3f6:	8c 91       	ld	r24, X
     3f8:	57 97       	sbiw	r26, 0x17	; 23
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     402:	f2 01       	movw	r30, r4
     404:	87 89       	ldd	r24, Z+23	; 0x17
     406:	81 60       	ori	r24, 0x01	; 1
     408:	87 8b       	std	Z+23, r24	; 0x17
     40a:	4a 81       	ldd	r20, Y+2	; 0x02
     40c:	5b 81       	ldd	r21, Y+3	; 0x03
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	7d 81       	ldd	r23, Y+5	; 0x05
     412:	46 87       	std	Z+14, r20	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	60 8b       	std	Z+16, r22	; 0x10
     418:	71 8b       	std	Z+17, r23	; 0x11
     41a:	40 0f       	add	r20, r16
     41c:	51 1f       	adc	r21, r17
     41e:	62 1f       	adc	r22, r18
     420:	73 1f       	adc	r23, r19
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c2 01       	movw	r24, r4
     428:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <prvInsertTimerInActiveList>
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	f2 01       	movw	r30, r4
     430:	87 89       	ldd	r24, Z+23	; 0x17
     432:	81 fd       	sbrc	r24, 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c2 01       	movw	r24, r4
     438:	f2 d2       	rcall	.+1508   	; 0xa1e <vPortFree>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	87 8b       	std	Z+23, r24	; 0x17
     440:	28 2d       	mov	r18, r8
     442:	39 2d       	mov	r19, r9
     444:	4a 2d       	mov	r20, r10
     446:	5b 2d       	mov	r21, r11
     448:	66 2d       	mov	r22, r6
     44a:	77 2d       	mov	r23, r7
     44c:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <xTimerQueue>
     450:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <xTimerQueue+0x1>
     454:	5b d7       	rcall	.+3766   	; 0x130c <xQueueReceive>
     456:	81 11       	cpse	r24, r1
     458:	6e cf       	rjmp	.-292    	; 0x336 <prvTimerTask+0x130>
     45a:	e9 ce       	rjmp	.-558    	; 0x22e <prvTimerTask+0x28>
     45c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskSuspendAll>
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <prvSampleTimeNow>
     468:	6b 87       	std	Y+11, r22	; 0x0b
     46a:	7c 87       	std	Y+12, r23	; 0x0c
     46c:	8d 87       	std	Y+13, r24	; 0x0d
     46e:	9e 87       	std	Y+14, r25	; 0x0e
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	5d cf       	rjmp	.-326    	; 0x330 <prvTimerTask+0x12a>
     476:	e0 91 80 18 	lds	r30, 0x1880	; 0x801880 <pxOverflowTimerList>
     47a:	f0 91 81 18 	lds	r31, 0x1881	; 0x801881 <pxOverflowTimerList+0x1>
     47e:	80 81       	ld	r24, Z
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	81 11       	cpse	r24, r1
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	28 2c       	mov	r2, r8
     488:	39 2c       	mov	r3, r9
     48a:	4a 2c       	mov	r4, r10
     48c:	5b 2c       	mov	r5, r11
     48e:	3a cf       	rjmp	.-396    	; 0x304 <prvTimerTask+0xfe>

00000490 <__ctors_end>:
     490:	11 24       	eor	r1, r1
     492:	1f be       	out	0x3f, r1	; 63
     494:	cf ef       	ldi	r28, 0xFF	; 255
     496:	d1 e2       	ldi	r29, 0x21	; 33
     498:	de bf       	out	0x3e, r29	; 62
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	0c bf       	out	0x3c, r16	; 60

000004a0 <__do_copy_data>:
     4a0:	17 e0       	ldi	r17, 0x07	; 7
     4a2:	a0 e0       	ldi	r26, 0x00	; 0
     4a4:	b2 e0       	ldi	r27, 0x02	; 2
     4a6:	e4 ec       	ldi	r30, 0xC4	; 196
     4a8:	f6 e5       	ldi	r31, 0x56	; 86
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	0b bf       	out	0x3b, r16	; 59
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__do_copy_data+0x14>
     4b0:	07 90       	elpm	r0, Z+
     4b2:	0d 92       	st	X+, r0
     4b4:	a6 3d       	cpi	r26, 0xD6	; 214
     4b6:	b1 07       	cpc	r27, r17
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__do_copy_data+0x10>

000004ba <__do_clear_bss>:
     4ba:	2a e1       	ldi	r18, 0x1A	; 26
     4bc:	a6 ed       	ldi	r26, 0xD6	; 214
     4be:	b7 e0       	ldi	r27, 0x07	; 7
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
     4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
     4c4:	a5 32       	cpi	r26, 0x25	; 37
     4c6:	b2 07       	cpc	r27, r18
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
     4ca:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <main>
     4ce:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <_exit>

000004d2 <__bad_interrupt>:
     4d2:	96 cd       	rjmp	.-1236   	; 0x0 <__vectors>

000004d4 <callbackFunction>:
		NULL 
	);
}

void callbackFunction(uint16_t ppm){
	CO2level = ppm;	
     4d4:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <CO2level+0x1>
     4d8:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <CO2level>
     4dc:	08 95       	ret

000004de <CO2_handler_task>:
		rc = mh_z19_take_meassuring();
		if (rc != MHZ19_OK)
		{
			printf("%s\n","Arduino measurement taking from sensor went wrong!");
		}
		printf("%s%i\n","Arduino measurement CO2: ", (int)CO2level);
     4de:	01 ea       	ldi	r16, 0xA1	; 161
     4e0:	12 e0       	ldi	r17, 0x02	; 2
     4e2:	cb eb       	ldi	r28, 0xBB	; 187
     4e4:	d2 e0       	ldi	r29, 0x02	; 2


void CO2_handler_task( void *pvParameters )
{
	for (;;) {
		rc = mh_z19_take_meassuring();
     4e6:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <mh_z19_take_meassuring>
     4ea:	80 93 f6 19 	sts	0x19F6, r24	; 0x8019f6 <rc>
		if (rc != MHZ19_OK)
     4ee:	88 23       	and	r24, r24
     4f0:	21 f0       	breq	.+8      	; 0x4fa <CO2_handler_task+0x1c>
		{
			printf("%s\n","Arduino measurement taking from sensor went wrong!");
     4f2:	8e e6       	ldi	r24, 0x6E	; 110
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	0e 94 55 28 	call	0x50aa	; 0x50aa <puts>
		}
		printf("%s%i\n","Arduino measurement CO2: ", (int)CO2level);
     4fa:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <CO2level+0x1>
     4fe:	8f 93       	push	r24
     500:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <CO2level>
     504:	8f 93       	push	r24
     506:	1f 93       	push	r17
     508:	0f 93       	push	r16
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
		vTaskDelay(200);
     512:	68 ec       	ldi	r22, 0xC8	; 200
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <vTaskDelay>
	}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	dd cf       	rjmp	.-70     	; 0x4e6 <CO2_handler_task+0x8>

0000052c <CO2Handler_create>:
	
void callbackFunction(uint16_t ppm);
void CO2_handler_task( void *pvParameters );

void CO2Handler_create()
{
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
	CO2level = (uint16_t)pvPortMalloc(sizeof(uint16_t));
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	ba d1       	rcall	.+884    	; 0x8ac <pvPortMalloc>
     538:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <CO2level+0x1>
     53c:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <CO2level>
	
	mh_z19_create(ser_USART3, callbackFunction);
     540:	6a e6       	ldi	r22, 0x6A	; 106
     542:	72 e0       	ldi	r23, 0x02	; 2
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <mh_z19_create>
	
	xTaskCreate(
     54a:	e1 2c       	mov	r14, r1
     54c:	f1 2c       	mov	r15, r1
     54e:	03 e0       	ldi	r16, 0x03	; 3
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	48 e8       	ldi	r20, 0x88	; 136
     556:	51 e0       	ldi	r21, 0x01	; 1
     558:	61 ec       	ldi	r22, 0xC1	; 193
     55a:	72 e0       	ldi	r23, 0x02	; 2
     55c:	8f e6       	ldi	r24, 0x6F	; 111
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		3,
		NULL 
	);
}
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	08 95       	ret

0000056c <getCO2lvl>:
}


uint16_t getCO2lvl(){ 
	return CO2level;
}
     56c:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <CO2level>
     570:	90 91 f8 19 	lds	r25, 0x19F8	; 0x8019f8 <CO2level+0x1>
     574:	08 95       	ret

00000576 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	00 d0       	rcall	.+0      	; 0x57c <lora_handler_task+0x6>
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
		// extern xCreatedEventGroup;
		//xEventGroupSetBits(xCreatedEventGroup, BIT_2);
	
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	0e 94 45 1b 	call	0x368a	; 0x368a <lora_driver_reset_rn2483>
	vTaskDelay(2);
     588:	62 e0       	ldi	r22, 0x02	; 2
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 d7 10 	call	0x21ae	; 0x21ae <vTaskDelay>
	lora_driver_reset_rn2483(0);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 45 1b 	call	0x368a	; 0x368a <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     59a:	66 e9       	ldi	r22, 0x96	; 150
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     5a6:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <lora_driver_flush_buffers>

static void _lora_setup(void)
{
	
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 53 19 	call	0x32a6	; 0x32a6 <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     5b0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <lora_driver_rn2483_factory_reset>
     5b4:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	8d ec       	ldi	r24, 0xCD	; 205
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     5c8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <lora_driver_configure_to_eu868>
     5cc:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	80 ee       	ldi	r24, 0xE0	; 224
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     5e0:	8c ee       	ldi	r24, 0xEC	; 236
     5e2:	97 e0       	ldi	r25, 0x07	; 7
     5e4:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     5e8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     5ec:	0c ee       	ldi	r16, 0xEC	; 236
     5ee:	17 e0       	ldi	r17, 0x07	; 7
     5f0:	1f 93       	push	r17
     5f2:	0f 93       	push	r16
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	89 ef       	ldi	r24, 0xF9	; 249
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     604:	c8 01       	movw	r24, r16
     606:	0e 94 87 1b 	call	0x370e	; 0x370e <lora_driver_set_device_identifier>
     60a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	1f 93       	push	r17
     614:	0f 93       	push	r16
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     622:	a8 01       	movw	r20, r16
     624:	62 e2       	ldi	r22, 0x22	; 34
     626:	73 e0       	ldi	r23, 0x03	; 3
     628:	83 e4       	ldi	r24, 0x43	; 67
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <lora_driver_set_otaa_identity>
     630:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	1f 93       	push	r17
     63a:	0f 93       	push	r16
     63c:	82 e2       	ldi	r24, 0x22	; 34
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	83 e4       	ldi	r24, 0x43	; 67
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	84 e5       	ldi	r24, 0x54	; 84
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     658:	0e 94 ba 1b 	call	0x3774	; 0x3774 <lora_driver_save_mac>
     65c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	8a e8       	ldi	r24, 0x8A	; 138
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 b4 1c 	call	0x3968	; 0x3968 <lora_driver_set_adaptive_data_rate>
     680:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	89 e9       	ldi	r24, 0x99	; 153
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     694:	84 ef       	ldi	r24, 0xF4	; 244
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 bf 1c 	call	0x397e	; 0x397e <lora_driver_set_receive_delay>
     69c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	8f 93       	push	r24
     6a8:	84 ef       	ldi	r24, 0xF4	; 244
     6aa:	8f 93       	push	r24
     6ac:	8a eb       	ldi	r24, 0xBA	; 186
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	0a e0       	ldi	r16, 0x0A	; 10
     6c4:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     6c6:	0f 2e       	mov	r0, r31
     6c8:	fa ed       	ldi	r31, 0xDA	; 218
     6ca:	ef 2e       	mov	r14, r31
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 c0 1b 	call	0x3780	; 0x3780 <lora_driver_join>
     6d8:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     6da:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	1f 93       	push	r17
     6e4:	0f 93       	push	r16
     6e6:	ff 92       	push	r15
     6e8:	ef 92       	push	r14
     6ea:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>

		if ( rc != LoRa_ACCEPTED)
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	f8 e0       	ldi	r31, 0x08	; 8
     6fc:	df 16       	cp	r13, r31
     6fe:	09 f4       	brne	.+2      	; 0x702 <lora_handler_task+0x18c>
     700:	46 c0       	rjmp	.+140    	; 0x78e <lora_handler_task+0x218>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 bf 19 	call	0x337e	; 0x337e <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     708:	66 e3       	ldi	r22, 0x36	; 54
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 d7 10 	call	0x21ae	; 0x21ae <vTaskDelay>
     714:	01 50       	subi	r16, 0x01	; 1
     716:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     718:	e1 f6       	brne	.-72     	; 0x6d2 <lora_handler_task+0x15c>
     71a:	32 c0       	rjmp	.+100    	; 0x780 <lora_handler_task+0x20a>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     71c:	f9 d2       	rcall	.+1522   	; 0xd10 <vPortYield>
     71e:	fe cf       	rjmp	.-4      	; 0x71c <lora_handler_task+0x1a6>
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     720:	44 e4       	ldi	r20, 0x44	; 68
     722:	57 e0       	ldi	r21, 0x07	; 7
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	ce 01       	movw	r24, r28
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vTaskDelayUntil>

		// Some dummy payload
		uint16_t hum = get_hum_lvl();
     730:	0e 94 10 16 	call	0x2c20	; 0x2c20 <get_hum_lvl>
     734:	b8 2e       	mov	r11, r24
     736:	a9 2e       	mov	r10, r25
		int16_t temp = get_temp_lvl(); 
     738:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <get_temp_lvl>
     73c:	d8 2e       	mov	r13, r24
		uint16_t co2_ppm = getCO2lvl(); 
     73e:	c9 2e       	mov	r12, r25
     740:	15 df       	rcall	.-470    	; 0x56c <getCO2lvl>

		_uplink_payload.bytes[0] = hum >> 8;
     742:	f8 01       	movw	r30, r16
     744:	a2 82       	std	Z+2, r10	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     746:	b3 82       	std	Z+3, r11	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     748:	c4 82       	std	Z+4, r12	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     74a:	d5 82       	std	Z+5, r13	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     74c:	96 83       	std	Z+6, r25	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     74e:	87 83       	std	Z+7, r24	; 0x07
		lora_driver_sent_upload_message(false, &_uplink_payload); 
     750:	b8 01       	movw	r22, r16
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <lora_driver_sent_upload_message>
		led_short_puls(led_ST4);  
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     75e:	b8 01       	movw	r22, r16
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <lora_driver_sent_upload_message>
     766:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <lora_driver_map_return_code_to_text>
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	ff 92       	push	r15
     770:	ef 92       	push	r14
     772:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	d0 cf       	rjmp	.-96     	; 0x720 <lora_handler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 b0 19 	call	0x3360	; 0x3360 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <led_fast_blink>
     78c:	c7 cf       	rjmp	.-114    	; 0x71c <lora_handler_task+0x1a6>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 a1 19 	call	0x3342	; 0x3342 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     794:	e6 ed       	ldi	r30, 0xD6	; 214
     796:	f7 e0       	ldi	r31, 0x07	; 7
     798:	86 e0       	ldi	r24, 0x06	; 6
     79a:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     7a0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <xTaskGetTickCount>
     7a4:	69 83       	std	Y+1, r22	; 0x01
     7a6:	7a 83       	std	Y+2, r23	; 0x02
     7a8:	8b 83       	std	Y+3, r24	; 0x03
     7aa:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = get_hum_lvl();
		int16_t temp = get_temp_lvl(); 
		uint16_t co2_ppm = getCO2lvl(); 

		_uplink_payload.bytes[0] = hum >> 8;
     7ac:	06 ed       	ldi	r16, 0xD6	; 214
     7ae:	17 e0       	ldi	r17, 0x07	; 7
		_uplink_payload.bytes[3] = temp & 0xFF;
		_uplink_payload.bytes[4] = co2_ppm >> 8;
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
		lora_driver_sent_upload_message(false, &_uplink_payload); 
		led_short_puls(led_ST4);  
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     7b0:	0f 2e       	mov	r0, r31
     7b2:	fa ef       	ldi	r31, 0xFA	; 250
     7b4:	ef 2e       	mov	r14, r31
     7b6:	f3 e0       	ldi	r31, 0x03	; 3
     7b8:	ff 2e       	mov	r15, r31
     7ba:	f0 2d       	mov	r31, r0
     7bc:	b1 cf       	rjmp	.-158    	; 0x720 <lora_handler_task+0x1aa>

000007be <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
	xTaskCreate(
     7c4:	e1 2c       	mov	r14, r1
     7c6:	f1 2c       	mov	r15, r1
     7c8:	08 2f       	mov	r16, r24
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	48 e8       	ldi	r20, 0x88	; 136
     7d0:	51 e0       	ldi	r21, 0x01	; 1
     7d2:	6f e0       	ldi	r22, 0x0F	; 15
     7d4:	74 e0       	ldi	r23, 0x04	; 4
     7d6:	8b eb       	ldi	r24, 0xBB	; 187
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     7e6:	e7 e0       	ldi	r30, 0x07	; 7
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	80 81       	ld	r24, Z
     7ec:	8f 60       	ori	r24, 0x0F	; 15
     7ee:	80 83       	st	Z, r24
     7f0:	08 95       	ret

000007f2 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     7f2:	e8 e0       	ldi	r30, 0x08	; 8
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	90 81       	ld	r25, Z
     7f8:	90 7f       	andi	r25, 0xF0	; 240
     7fa:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     7fc:	90 81       	ld	r25, Z
     7fe:	8f 70       	andi	r24, 0x0F	; 15
     800:	98 2b       	or	r25, r24
     802:	90 83       	st	Z, r25
     804:	08 95       	ret

00000806 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     806:	e8 e0       	ldi	r30, 0x08	; 8
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	80 81       	ld	r24, Z
     80c:	80 7f       	andi	r24, 0xF0	; 240
     80e:	80 83       	st	Z, r24
     810:	08 95       	ret

00000812 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     818:	e8 e5       	ldi	r30, 0x58	; 88
     81a:	f8 e0       	ldi	r31, 0x08	; 8
     81c:	01 c0       	rjmp	.+2      	; 0x820 <prvInsertBlockIntoFreeList+0xe>
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	31 81       	ldd	r19, Z+1	; 0x01
     824:	2a 17       	cp	r18, r26
     826:	3b 07       	cpc	r19, r27
     828:	d0 f3       	brcs	.-12     	; 0x81e <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     82a:	82 81       	ldd	r24, Z+2	; 0x02
     82c:	93 81       	ldd	r25, Z+3	; 0x03
     82e:	af 01       	movw	r20, r30
     830:	48 0f       	add	r20, r24
     832:	59 1f       	adc	r21, r25
     834:	a4 17       	cp	r26, r20
     836:	b5 07       	cpc	r27, r21
     838:	49 f4       	brne	.+18     	; 0x84c <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     83a:	12 96       	adiw	r26, 0x02	; 2
     83c:	4d 91       	ld	r20, X+
     83e:	5c 91       	ld	r21, X
     840:	13 97       	sbiw	r26, 0x03	; 3
     842:	84 0f       	add	r24, r20
     844:	95 1f       	adc	r25, r21
     846:	93 83       	std	Z+3, r25	; 0x03
     848:	82 83       	std	Z+2, r24	; 0x02
     84a:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	13 97       	sbiw	r26, 0x03	; 3
     854:	ed 01       	movw	r28, r26
     856:	c8 0f       	add	r28, r24
     858:	d9 1f       	adc	r29, r25
     85a:	2c 17       	cp	r18, r28
     85c:	3d 07       	cpc	r19, r29
     85e:	d9 f4       	brne	.+54     	; 0x896 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     860:	20 91 56 08 	lds	r18, 0x0856	; 0x800856 <pxEnd>
     864:	30 91 57 08 	lds	r19, 0x0857	; 0x800857 <pxEnd+0x1>
     868:	c2 17       	cp	r28, r18
     86a:	d3 07       	cpc	r29, r19
     86c:	81 f0       	breq	.+32     	; 0x88e <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     86e:	2a 81       	ldd	r18, Y+2	; 0x02
     870:	3b 81       	ldd	r19, Y+3	; 0x03
     872:	82 0f       	add	r24, r18
     874:	93 1f       	adc	r25, r19
     876:	13 96       	adiw	r26, 0x03	; 3
     878:	9c 93       	st	X, r25
     87a:	8e 93       	st	-X, r24
     87c:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     87e:	c0 81       	ld	r28, Z
     880:	d1 81       	ldd	r29, Z+1	; 0x01
     882:	88 81       	ld	r24, Y
     884:	99 81       	ldd	r25, Y+1	; 0x01
     886:	11 96       	adiw	r26, 0x01	; 1
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
     88c:	07 c0       	rjmp	.+14     	; 0x89c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	dc 93       	st	X, r29
     892:	ce 93       	st	-X, r28
     894:	03 c0       	rjmp	.+6      	; 0x89c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     896:	11 96       	adiw	r26, 0x01	; 1
     898:	3c 93       	st	X, r19
     89a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     89c:	ae 17       	cp	r26, r30
     89e:	bf 07       	cpc	r27, r31
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     8a2:	b1 83       	std	Z+1, r27	; 0x01
     8a4:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     8be:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     8c2:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <pxEnd>
     8c6:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <pxEnd+0x1>
     8ca:	89 2b       	or	r24, r25
     8cc:	41 f5       	brne	.+80     	; 0x91e <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8ce:	e8 e5       	ldi	r30, 0x58	; 88
     8d0:	f8 e0       	ldi	r31, 0x08	; 8
     8d2:	ac e5       	ldi	r26, 0x5C	; 92
     8d4:	b8 e0       	ldi	r27, 0x08	; 8
     8d6:	b1 83       	std	Z+1, r27	; 0x01
     8d8:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     8da:	13 82       	std	Z+3, r1	; 0x03
     8dc:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     8de:	e8 ef       	ldi	r30, 0xF8	; 248
     8e0:	f7 e1       	ldi	r31, 0x17	; 23
     8e2:	f0 93 57 08 	sts	0x0857, r31	; 0x800857 <pxEnd+0x1>
     8e6:	e0 93 56 08 	sts	0x0856, r30	; 0x800856 <pxEnd>
	pxEnd->xBlockSize = 0;
     8ea:	13 82       	std	Z+3, r1	; 0x03
     8ec:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     8ee:	11 82       	std	Z+1, r1	; 0x01
     8f0:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     8f2:	8c e9       	ldi	r24, 0x9C	; 156
     8f4:	9f e0       	ldi	r25, 0x0F	; 15
     8f6:	13 96       	adiw	r26, 0x03	; 3
     8f8:	9c 93       	st	X, r25
     8fa:	8e 93       	st	-X, r24
     8fc:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     8fe:	ed 93       	st	X+, r30
     900:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     902:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <xMinimumEverFreeBytesRemaining+0x1>
     906:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     90a:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xFreeBytesRemaining+0x1>
     90e:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e8       	ldi	r25, 0x80	; 128
     916:	90 93 51 08 	sts	0x0851, r25	; 0x800851 <xBlockAllocatedBit+0x1>
     91a:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     91e:	e0 90 50 08 	lds	r14, 0x0850	; 0x800850 <xBlockAllocatedBit>
     922:	f0 90 51 08 	lds	r15, 0x0851	; 0x800851 <xBlockAllocatedBit+0x1>
     926:	c7 01       	movw	r24, r14
     928:	8c 23       	and	r24, r28
     92a:	9d 23       	and	r25, r29
     92c:	89 2b       	or	r24, r25
     92e:	09 f0       	breq	.+2      	; 0x932 <pvPortMalloc+0x86>
     930:	66 c0       	rjmp	.+204    	; 0x9fe <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     932:	20 97       	sbiw	r28, 0x00	; 0
     934:	09 f4       	brne	.+2      	; 0x938 <pvPortMalloc+0x8c>
     936:	66 c0       	rjmp	.+204    	; 0xa04 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     938:	ae 01       	movw	r20, r28
     93a:	4c 5f       	subi	r20, 0xFC	; 252
     93c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     93e:	09 f4       	brne	.+2      	; 0x942 <pvPortMalloc+0x96>
     940:	5e c0       	rjmp	.+188    	; 0x9fe <pvPortMalloc+0x152>
     942:	00 91 54 08 	lds	r16, 0x0854	; 0x800854 <xFreeBytesRemaining>
     946:	10 91 55 08 	lds	r17, 0x0855	; 0x800855 <xFreeBytesRemaining+0x1>
     94a:	04 17       	cp	r16, r20
     94c:	15 07       	cpc	r17, r21
     94e:	08 f4       	brcc	.+2      	; 0x952 <pvPortMalloc+0xa6>
     950:	56 c0       	rjmp	.+172    	; 0x9fe <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     952:	c0 91 58 08 	lds	r28, 0x0858	; 0x800858 <xStart>
     956:	d0 91 59 08 	lds	r29, 0x0859	; 0x800859 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     95a:	e8 e5       	ldi	r30, 0x58	; 88
     95c:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     95e:	02 c0       	rjmp	.+4      	; 0x964 <pvPortMalloc+0xb8>
     960:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     962:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     964:	2a 81       	ldd	r18, Y+2	; 0x02
     966:	3b 81       	ldd	r19, Y+3	; 0x03
     968:	24 17       	cp	r18, r20
     96a:	35 07       	cpc	r19, r21
     96c:	28 f4       	brcc	.+10     	; 0x978 <pvPortMalloc+0xcc>
     96e:	28 81       	ld	r18, Y
     970:	39 81       	ldd	r19, Y+1	; 0x01
     972:	21 15       	cp	r18, r1
     974:	31 05       	cpc	r19, r1
     976:	a1 f7       	brne	.-24     	; 0x960 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     978:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <pxEnd>
     97c:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <pxEnd+0x1>
     980:	c8 17       	cp	r28, r24
     982:	d9 07       	cpc	r29, r25
     984:	e1 f1       	breq	.+120    	; 0x9fe <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     986:	c0 80       	ld	r12, Z
     988:	d1 80       	ldd	r13, Z+1	; 0x01
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	c8 0e       	add	r12, r24
     98e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     990:	88 81       	ld	r24, Y
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	91 83       	std	Z+1, r25	; 0x01
     996:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     998:	2a 81       	ldd	r18, Y+2	; 0x02
     99a:	3b 81       	ldd	r19, Y+3	; 0x03
     99c:	24 1b       	sub	r18, r20
     99e:	35 0b       	sbc	r19, r21
     9a0:	29 30       	cpi	r18, 0x09	; 9
     9a2:	31 05       	cpc	r19, r1
     9a4:	48 f0       	brcs	.+18     	; 0x9b8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     9a6:	ce 01       	movw	r24, r28
     9a8:	84 0f       	add	r24, r20
     9aa:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     9ac:	fc 01       	movw	r30, r24
     9ae:	33 83       	std	Z+3, r19	; 0x03
     9b0:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     9b2:	5b 83       	std	Y+3, r21	; 0x03
     9b4:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     9b6:	2d df       	rcall	.-422    	; 0x812 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	9b 81       	ldd	r25, Y+3	; 0x03
     9bc:	08 1b       	sub	r16, r24
     9be:	19 0b       	sbc	r17, r25
     9c0:	10 93 55 08 	sts	0x0855, r17	; 0x800855 <xFreeBytesRemaining+0x1>
     9c4:	00 93 54 08 	sts	0x0854, r16	; 0x800854 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     9c8:	20 91 52 08 	lds	r18, 0x0852	; 0x800852 <xMinimumEverFreeBytesRemaining>
     9cc:	30 91 53 08 	lds	r19, 0x0853	; 0x800853 <xMinimumEverFreeBytesRemaining+0x1>
     9d0:	02 17       	cp	r16, r18
     9d2:	13 07       	cpc	r17, r19
     9d4:	20 f4       	brcc	.+8      	; 0x9de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     9d6:	10 93 53 08 	sts	0x0853, r17	; 0x800853 <xMinimumEverFreeBytesRemaining+0x1>
     9da:	00 93 52 08 	sts	0x0852, r16	; 0x800852 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     9de:	e8 2a       	or	r14, r24
     9e0:	f9 2a       	or	r15, r25
     9e2:	fb 82       	std	Y+3, r15	; 0x03
     9e4:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     9e6:	19 82       	std	Y+1, r1	; 0x01
     9e8:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     9ea:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     9ee:	c1 14       	cp	r12, r1
     9f0:	d1 04       	cpc	r13, r1
     9f2:	59 f4       	brne	.+22     	; 0xa0a <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     9f4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <vApplicationMallocFailedHook>
     9f8:	c1 2c       	mov	r12, r1
     9fa:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     9fc:	06 c0       	rjmp	.+12     	; 0xa0a <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     9fe:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     a02:	f8 cf       	rjmp	.-16     	; 0x9f4 <pvPortMalloc+0x148>
     a04:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     a08:	f5 cf       	rjmp	.-22     	; 0x9f4 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     a0a:	c6 01       	movw	r24, r12
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	08 95       	ret

00000a1e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	51 f1       	breq	.+84     	; 0xa7a <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     a26:	fc 01       	movw	r30, r24
     a28:	34 97       	sbiw	r30, 0x04	; 4
     a2a:	22 81       	ldd	r18, Z+2	; 0x02
     a2c:	33 81       	ldd	r19, Z+3	; 0x03
     a2e:	40 91 50 08 	lds	r20, 0x0850	; 0x800850 <xBlockAllocatedBit>
     a32:	50 91 51 08 	lds	r21, 0x0851	; 0x800851 <xBlockAllocatedBit+0x1>
     a36:	b9 01       	movw	r22, r18
     a38:	64 23       	and	r22, r20
     a3a:	75 23       	and	r23, r21
     a3c:	67 2b       	or	r22, r23
     a3e:	e9 f0       	breq	.+58     	; 0xa7a <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	67 2b       	or	r22, r23
     a46:	c9 f4       	brne	.+50     	; 0xa7a <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     a48:	ef 01       	movw	r28, r30
     a4a:	40 95       	com	r20
     a4c:	50 95       	com	r21
     a4e:	24 23       	and	r18, r20
     a50:	35 23       	and	r19, r21
     a52:	33 83       	std	Z+3, r19	; 0x03
     a54:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     a56:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     a5a:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <xFreeBytesRemaining>
     a5e:	30 91 55 08 	lds	r19, 0x0855	; 0x800855 <xFreeBytesRemaining+0x1>
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	9b 81       	ldd	r25, Y+3	; 0x03
     a66:	82 0f       	add	r24, r18
     a68:	93 1f       	adc	r25, r19
     a6a:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xFreeBytesRemaining+0x1>
     a6e:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     a72:	ce 01       	movw	r24, r28
     a74:	ce de       	rcall	.-612    	; 0x812 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     a76:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a80:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a82:	03 96       	adiw	r24, 0x03	; 3
     a84:	92 83       	std	Z+2, r25	; 0x02
     a86:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a88:	4f ef       	ldi	r20, 0xFF	; 255
     a8a:	5f ef       	ldi	r21, 0xFF	; 255
     a8c:	ba 01       	movw	r22, r20
     a8e:	43 83       	std	Z+3, r20	; 0x03
     a90:	54 83       	std	Z+4, r21	; 0x04
     a92:	65 83       	std	Z+5, r22	; 0x05
     a94:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a96:	90 87       	std	Z+8, r25	; 0x08
     a98:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a9a:	92 87       	std	Z+10, r25	; 0x0a
     a9c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a9e:	10 82       	st	Z, r1
     aa0:	08 95       	ret

00000aa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     aa2:	fc 01       	movw	r30, r24
     aa4:	13 86       	std	Z+11, r1	; 0x0b
     aa6:	12 86       	std	Z+10, r1	; 0x0a
     aa8:	08 95       	ret

00000aaa <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	9c 01       	movw	r18, r24
     ab0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     ab2:	dc 01       	movw	r26, r24
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	cd 91       	ld	r28, X+
     ab8:	dc 91       	ld	r29, X
     aba:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     abc:	d5 83       	std	Z+5, r29	; 0x05
     abe:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ac0:	8e 81       	ldd	r24, Y+6	; 0x06
     ac2:	9f 81       	ldd	r25, Y+7	; 0x07
     ac4:	97 83       	std	Z+7, r25	; 0x07
     ac6:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     ac8:	8e 81       	ldd	r24, Y+6	; 0x06
     aca:	9f 81       	ldd	r25, Y+7	; 0x07
     acc:	dc 01       	movw	r26, r24
     ace:	15 96       	adiw	r26, 0x05	; 5
     ad0:	7c 93       	st	X, r23
     ad2:	6e 93       	st	-X, r22
     ad4:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     ad6:	7f 83       	std	Y+7, r23	; 0x07
     ad8:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     ada:	33 87       	std	Z+11, r19	; 0x0b
     adc:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ade:	f9 01       	movw	r30, r18
     ae0:	80 81       	ld	r24, Z
     ae2:	8f 5f       	subi	r24, 0xFF	; 255
     ae4:	80 83       	st	Z, r24
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     af6:	08 81       	ld	r16, Y
     af8:	19 81       	ldd	r17, Y+1	; 0x01
     afa:	2a 81       	ldd	r18, Y+2	; 0x02
     afc:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     afe:	0f 3f       	cpi	r16, 0xFF	; 255
     b00:	4f ef       	ldi	r20, 0xFF	; 255
     b02:	14 07       	cpc	r17, r20
     b04:	24 07       	cpc	r18, r20
     b06:	34 07       	cpc	r19, r20
     b08:	21 f4       	brne	.+8      	; 0xb12 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b0a:	fc 01       	movw	r30, r24
     b0c:	a1 85       	ldd	r26, Z+9	; 0x09
     b0e:	b2 85       	ldd	r27, Z+10	; 0x0a
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b12:	dc 01       	movw	r26, r24
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <vListInsert+0x2e>
     b18:	df 01       	movw	r26, r30
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	15 97       	sbiw	r26, 0x05	; 5
     b22:	40 81       	ld	r20, Z
     b24:	51 81       	ldd	r21, Z+1	; 0x01
     b26:	62 81       	ldd	r22, Z+2	; 0x02
     b28:	73 81       	ldd	r23, Z+3	; 0x03
     b2a:	04 17       	cp	r16, r20
     b2c:	15 07       	cpc	r17, r21
     b2e:	26 07       	cpc	r18, r22
     b30:	37 07       	cpc	r19, r23
     b32:	90 f7       	brcc	.-28     	; 0xb18 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b34:	14 96       	adiw	r26, 0x04	; 4
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	15 97       	sbiw	r26, 0x05	; 5
     b3c:	fd 83       	std	Y+5, r31	; 0x05
     b3e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b40:	d7 83       	std	Z+7, r29	; 0x07
     b42:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     b44:	bf 83       	std	Y+7, r27	; 0x07
     b46:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     b48:	15 96       	adiw	r26, 0x05	; 5
     b4a:	dc 93       	st	X, r29
     b4c:	ce 93       	st	-X, r28
     b4e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     b50:	9b 87       	std	Y+11, r25	; 0x0b
     b52:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     b54:	fc 01       	movw	r30, r24
     b56:	20 81       	ld	r18, Z
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	20 83       	st	Z, r18
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     b6c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b6e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b70:	c4 81       	ldd	r28, Z+4	; 0x04
     b72:	d5 81       	ldd	r29, Z+5	; 0x05
     b74:	86 81       	ldd	r24, Z+6	; 0x06
     b76:	97 81       	ldd	r25, Z+7	; 0x07
     b78:	9f 83       	std	Y+7, r25	; 0x07
     b7a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b7c:	c6 81       	ldd	r28, Z+6	; 0x06
     b7e:	d7 81       	ldd	r29, Z+7	; 0x07
     b80:	84 81       	ldd	r24, Z+4	; 0x04
     b82:	95 81       	ldd	r25, Z+5	; 0x05
     b84:	9d 83       	std	Y+5, r25	; 0x05
     b86:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	12 97       	sbiw	r26, 0x02	; 2
     b90:	e8 17       	cp	r30, r24
     b92:	f9 07       	cpc	r31, r25
     b94:	31 f4       	brne	.+12     	; 0xba2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b96:	86 81       	ldd	r24, Z+6	; 0x06
     b98:	97 81       	ldd	r25, Z+7	; 0x07
     b9a:	12 96       	adiw	r26, 0x02	; 2
     b9c:	9c 93       	st	X, r25
     b9e:	8e 93       	st	-X, r24
     ba0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ba2:	13 86       	std	Z+11, r1	; 0x0b
     ba4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     ba6:	8c 91       	ld	r24, X
     ba8:	81 50       	subi	r24, 0x01	; 1
     baa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     bac:	8c 91       	ld	r24, X
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     bb4:	31 e1       	ldi	r19, 0x11	; 17
     bb6:	fc 01       	movw	r30, r24
     bb8:	30 83       	st	Z, r19
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	22 e2       	ldi	r18, 0x22	; 34
     bbe:	20 83       	st	Z, r18
     bc0:	31 97       	sbiw	r30, 0x01	; 1
     bc2:	a3 e3       	ldi	r26, 0x33	; 51
     bc4:	a0 83       	st	Z, r26
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	60 83       	st	Z, r22
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	70 83       	st	Z, r23
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	10 82       	st	Z, r1
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	10 82       	st	Z, r1
     bd6:	31 97       	sbiw	r30, 0x01	; 1
     bd8:	60 e8       	ldi	r22, 0x80	; 128
     bda:	60 83       	st	Z, r22
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	10 82       	st	Z, r1
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	10 82       	st	Z, r1
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	10 82       	st	Z, r1
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	63 e0       	ldi	r22, 0x03	; 3
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	64 e0       	ldi	r22, 0x04	; 4
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	65 e0       	ldi	r22, 0x05	; 5
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	66 e0       	ldi	r22, 0x06	; 6
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	67 e0       	ldi	r22, 0x07	; 7
     c0a:	60 83       	st	Z, r22
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	68 e0       	ldi	r22, 0x08	; 8
     c10:	60 83       	st	Z, r22
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	69 e0       	ldi	r22, 0x09	; 9
     c16:	60 83       	st	Z, r22
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	60 e1       	ldi	r22, 0x10	; 16
     c1c:	60 83       	st	Z, r22
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	32 e1       	ldi	r19, 0x12	; 18
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	33 e1       	ldi	r19, 0x13	; 19
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	34 e1       	ldi	r19, 0x14	; 20
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	35 e1       	ldi	r19, 0x15	; 21
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	36 e1       	ldi	r19, 0x16	; 22
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	37 e1       	ldi	r19, 0x17	; 23
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	38 e1       	ldi	r19, 0x18	; 24
     c4a:	30 83       	st	Z, r19
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	39 e1       	ldi	r19, 0x19	; 25
     c50:	30 83       	st	Z, r19
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	30 e2       	ldi	r19, 0x20	; 32
     c56:	30 83       	st	Z, r19
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	31 e2       	ldi	r19, 0x21	; 33
     c5c:	30 83       	st	Z, r19
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	20 83       	st	Z, r18
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	23 e2       	ldi	r18, 0x23	; 35
     c66:	20 83       	st	Z, r18
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	40 83       	st	Z, r20
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	50 83       	st	Z, r21
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	26 e2       	ldi	r18, 0x26	; 38
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	27 e2       	ldi	r18, 0x27	; 39
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	28 e2       	ldi	r18, 0x28	; 40
     c80:	20 83       	st	Z, r18
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	29 e2       	ldi	r18, 0x29	; 41
     c86:	20 83       	st	Z, r18
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	20 e3       	ldi	r18, 0x30	; 48
     c8c:	20 83       	st	Z, r18
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	21 e3       	ldi	r18, 0x31	; 49
     c92:	20 83       	st	Z, r18
     c94:	89 97       	sbiw	r24, 0x29	; 41
     c96:	08 95       	ret

00000c98 <xPortStartScheduler>:
     c98:	a8 95       	wdr
     c9a:	90 ec       	ldi	r25, 0xC0	; 192
     c9c:	88 e1       	ldi	r24, 0x18	; 24
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	a8 95       	wdr
     ca4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     cae:	a0 91 76 18 	lds	r26, 0x1876	; 0x801876 <pxCurrentTCB>
     cb2:	b0 91 77 18 	lds	r27, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
     cb6:	cd 91       	ld	r28, X+
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	dd 91       	ld	r29, X+
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	1f 90       	pop	r1
     cfc:	0f 90       	pop	r0
     cfe:	0c be       	out	0x3c, r0	; 60
     d00:	0f 90       	pop	r0
     d02:	0b be       	out	0x3b, r0	; 59
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	08 95       	ret
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret

00000d10 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	0f 92       	push	r0
     d18:	0b b6       	in	r0, 0x3b	; 59
     d1a:	0f 92       	push	r0
     d1c:	0c b6       	in	r0, 0x3c	; 60
     d1e:	0f 92       	push	r0
     d20:	1f 92       	push	r1
     d22:	11 24       	eor	r1, r1
     d24:	2f 92       	push	r2
     d26:	3f 92       	push	r3
     d28:	4f 92       	push	r4
     d2a:	5f 92       	push	r5
     d2c:	6f 92       	push	r6
     d2e:	7f 92       	push	r7
     d30:	8f 92       	push	r8
     d32:	9f 92       	push	r9
     d34:	af 92       	push	r10
     d36:	bf 92       	push	r11
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	a0 91 76 18 	lds	r26, 0x1876	; 0x801876 <pxCurrentTCB>
     d64:	b0 91 77 18 	lds	r27, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
     d68:	0d b6       	in	r0, 0x3d	; 61
     d6a:	0d 92       	st	X+, r0
     d6c:	0e b6       	in	r0, 0x3e	; 62
     d6e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     d70:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     d74:	a0 91 76 18 	lds	r26, 0x1876	; 0x801876 <pxCurrentTCB>
     d78:	b0 91 77 18 	lds	r27, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
     d7c:	cd 91       	ld	r28, X+
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	dd 91       	ld	r29, X+
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	1f 90       	pop	r1
     dc2:	0f 90       	pop	r0
     dc4:	0c be       	out	0x3c, r0	; 60
     dc6:	0f 90       	pop	r0
     dc8:	0b be       	out	0x3b, r0	; 59
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     dd0:	08 95       	ret

00000dd2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	0f 92       	push	r0
     dda:	0b b6       	in	r0, 0x3b	; 59
     ddc:	0f 92       	push	r0
     dde:	0c b6       	in	r0, 0x3c	; 60
     de0:	0f 92       	push	r0
     de2:	1f 92       	push	r1
     de4:	11 24       	eor	r1, r1
     de6:	2f 92       	push	r2
     de8:	3f 92       	push	r3
     dea:	4f 92       	push	r4
     dec:	5f 92       	push	r5
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	a0 91 76 18 	lds	r26, 0x1876	; 0x801876 <pxCurrentTCB>
     e26:	b0 91 77 18 	lds	r27, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
     e2a:	0d b6       	in	r0, 0x3d	; 61
     e2c:	0d 92       	st	X+, r0
     e2e:	0e b6       	in	r0, 0x3e	; 62
     e30:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     e32:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     e34:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <xTaskIncrementTick>
     e38:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e3a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     e3e:	a0 91 76 18 	lds	r26, 0x1876	; 0x801876 <pxCurrentTCB>
     e42:	b0 91 77 18 	lds	r27, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
     e46:	cd 91       	ld	r28, X+
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	dd 91       	ld	r29, X+
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	ff 91       	pop	r31
     e50:	ef 91       	pop	r30
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	7f 90       	pop	r7
     e80:	6f 90       	pop	r6
     e82:	5f 90       	pop	r5
     e84:	4f 90       	pop	r4
     e86:	3f 90       	pop	r3
     e88:	2f 90       	pop	r2
     e8a:	1f 90       	pop	r1
     e8c:	0f 90       	pop	r0
     e8e:	0c be       	out	0x3c, r0	; 60
     e90:	0f 90       	pop	r0
     e92:	0b be       	out	0x3b, r0	; 59
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e9a:	08 95       	ret

00000e9c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e9c:	9a df       	rcall	.-204    	; 0xdd2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e9e:	18 95       	reti

00000ea0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	0f 92       	push	r0
     ea6:	fc 01       	movw	r30, r24
     ea8:	96 8d       	ldd	r25, Z+30	; 0x1e
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	91 11       	cpse	r25, r1
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <prvCopyDataToQueue>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
     ec0:	04 2f       	mov	r16, r20
     ec2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ec4:	48 a1       	ldd	r20, Y+32	; 0x20
     ec6:	41 11       	cpse	r20, r1
     ec8:	0c c0       	rjmp	.+24     	; 0xee2 <prvCopyDataToQueue+0x2c>
     eca:	88 81       	ld	r24, Y
     ecc:	99 81       	ldd	r25, Y+1	; 0x01
     ece:	89 2b       	or	r24, r25
     ed0:	09 f0       	breq	.+2      	; 0xed4 <prvCopyDataToQueue+0x1e>
     ed2:	42 c0       	rjmp	.+132    	; 0xf58 <prvCopyDataToQueue+0xa2>
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <xTaskPriorityDisinherit>
     edc:	1d 82       	std	Y+5, r1	; 0x05
     ede:	1c 82       	std	Y+4, r1	; 0x04
     ee0:	42 c0       	rjmp	.+132    	; 0xf66 <prvCopyDataToQueue+0xb0>
     ee2:	01 11       	cpse	r16, r1
     ee4:	17 c0       	rjmp	.+46     	; 0xf14 <prvCopyDataToQueue+0x5e>
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	9b 81       	ldd	r25, Y+3	; 0x03
     eec:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <memcpy>
     ef0:	28 a1       	ldd	r18, Y+32	; 0x20
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	82 0f       	add	r24, r18
     ef8:	91 1d       	adc	r25, r1
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	82 17       	cp	r24, r18
     f04:	93 07       	cpc	r25, r19
     f06:	50 f1       	brcs	.+84     	; 0xf5c <prvCopyDataToQueue+0xa6>
     f08:	88 81       	ld	r24, Y
     f0a:	99 81       	ldd	r25, Y+1	; 0x01
     f0c:	9b 83       	std	Y+3, r25	; 0x03
     f0e:	8a 83       	std	Y+2, r24	; 0x02
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	29 c0       	rjmp	.+82     	; 0xf66 <prvCopyDataToQueue+0xb0>
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	9f 81       	ldd	r25, Y+7	; 0x07
     f1a:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <memcpy>
     f1e:	88 a1       	ldd	r24, Y+32	; 0x20
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	91 95       	neg	r25
     f24:	81 95       	neg	r24
     f26:	91 09       	sbc	r25, r1
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	28 0f       	add	r18, r24
     f2e:	39 1f       	adc	r19, r25
     f30:	3f 83       	std	Y+7, r19	; 0x07
     f32:	2e 83       	std	Y+6, r18	; 0x06
     f34:	48 81       	ld	r20, Y
     f36:	59 81       	ldd	r21, Y+1	; 0x01
     f38:	24 17       	cp	r18, r20
     f3a:	35 07       	cpc	r19, r21
     f3c:	30 f4       	brcc	.+12     	; 0xf4a <prvCopyDataToQueue+0x94>
     f3e:	2c 81       	ldd	r18, Y+4	; 0x04
     f40:	3d 81       	ldd	r19, Y+5	; 0x05
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	9f 83       	std	Y+7, r25	; 0x07
     f48:	8e 83       	std	Y+6, r24	; 0x06
     f4a:	02 30       	cpi	r16, 0x02	; 2
     f4c:	49 f4       	brne	.+18     	; 0xf60 <prvCopyDataToQueue+0xaa>
     f4e:	11 23       	and	r17, r17
     f50:	49 f0       	breq	.+18     	; 0xf64 <prvCopyDataToQueue+0xae>
     f52:	11 50       	subi	r17, 0x01	; 1
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <prvCopyDataToQueue+0xb0>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <prvCopyDataToQueue+0xb0>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <prvCopyDataToQueue+0xb0>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <prvCopyDataToQueue+0xb0>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	1f 5f       	subi	r17, 0xFF	; 255
     f68:	1e 8f       	std	Y+30, r17	; 0x1e
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <prvCopyDataFromQueue>:
     f74:	fc 01       	movw	r30, r24
     f76:	40 a1       	ldd	r20, Z+32	; 0x20
     f78:	44 23       	and	r20, r20
     f7a:	a9 f0       	breq	.+42     	; 0xfa6 <prvCopyDataFromQueue+0x32>
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	24 0f       	add	r18, r20
     f84:	35 1f       	adc	r19, r21
     f86:	37 83       	std	Z+7, r19	; 0x07
     f88:	26 83       	std	Z+6, r18	; 0x06
     f8a:	84 81       	ldd	r24, Z+4	; 0x04
     f8c:	95 81       	ldd	r25, Z+5	; 0x05
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	20 f0       	brcs	.+8      	; 0xf9c <prvCopyDataFromQueue+0x28>
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	97 83       	std	Z+7, r25	; 0x07
     f9a:	86 83       	std	Z+6, r24	; 0x06
     f9c:	cb 01       	movw	r24, r22
     f9e:	66 81       	ldd	r22, Z+6	; 0x06
     fa0:	77 81       	ldd	r23, Z+7	; 0x07
     fa2:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <memcpy>
     fa6:	08 95       	ret

00000fa8 <prvUnlockQueue>:
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	8c 01       	movw	r16, r24
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	0f 92       	push	r0
     fba:	fc 01       	movw	r30, r24
     fbc:	c2 a1       	ldd	r28, Z+34	; 0x22
     fbe:	1c 16       	cp	r1, r28
     fc0:	ac f4       	brge	.+42     	; 0xfec <prvUnlockQueue+0x44>
     fc2:	83 89       	ldd	r24, Z+19	; 0x13
     fc4:	81 11       	cpse	r24, r1
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <prvUnlockQueue+0x2c>
     fc8:	11 c0       	rjmp	.+34     	; 0xfec <prvUnlockQueue+0x44>
     fca:	f8 01       	movw	r30, r16
     fcc:	83 89       	ldd	r24, Z+19	; 0x13
     fce:	81 11       	cpse	r24, r1
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <prvUnlockQueue+0x34>
     fd2:	0c c0       	rjmp	.+24     	; 0xfec <prvUnlockQueue+0x44>
     fd4:	78 01       	movw	r14, r16
     fd6:	f3 e1       	ldi	r31, 0x13	; 19
     fd8:	ef 0e       	add	r14, r31
     fda:	f1 1c       	adc	r15, r1
     fdc:	c7 01       	movw	r24, r14
     fde:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskRemoveFromEventList>
     fe2:	81 11       	cpse	r24, r1
     fe4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <vTaskMissedYield>
     fe8:	c1 50       	subi	r28, 0x01	; 1
     fea:	79 f7       	brne	.-34     	; 0xfca <prvUnlockQueue+0x22>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	f8 01       	movw	r30, r16
     ff0:	82 a3       	std	Z+34, r24	; 0x22
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	0f 92       	push	r0
     ffc:	c1 a1       	ldd	r28, Z+33	; 0x21
     ffe:	1c 16       	cp	r1, r28
    1000:	ac f4       	brge	.+42     	; 0x102c <prvUnlockQueue+0x84>
    1002:	80 85       	ldd	r24, Z+8	; 0x08
    1004:	81 11       	cpse	r24, r1
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <prvUnlockQueue+0x6c>
    1008:	11 c0       	rjmp	.+34     	; 0x102c <prvUnlockQueue+0x84>
    100a:	f8 01       	movw	r30, r16
    100c:	80 85       	ldd	r24, Z+8	; 0x08
    100e:	81 11       	cpse	r24, r1
    1010:	05 c0       	rjmp	.+10     	; 0x101c <prvUnlockQueue+0x74>
    1012:	0c c0       	rjmp	.+24     	; 0x102c <prvUnlockQueue+0x84>
    1014:	78 01       	movw	r14, r16
    1016:	f8 e0       	ldi	r31, 0x08	; 8
    1018:	ef 0e       	add	r14, r31
    101a:	f1 1c       	adc	r15, r1
    101c:	c7 01       	movw	r24, r14
    101e:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskRemoveFromEventList>
    1022:	81 11       	cpse	r24, r1
    1024:	0e 94 64 12 	call	0x24c8	; 0x24c8 <vTaskMissedYield>
    1028:	c1 50       	subi	r28, 0x01	; 1
    102a:	79 f7       	brne	.-34     	; 0x100a <prvUnlockQueue+0x62>
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	f8 01       	movw	r30, r16
    1030:	81 a3       	std	Z+33, r24	; 0x21
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	08 95       	ret

00001042 <xQueueGenericReset>:
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	ec 01       	movw	r28, r24
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	0f 92       	push	r0
    104e:	e8 81       	ld	r30, Y
    1050:	f9 81       	ldd	r31, Y+1	; 0x01
    1052:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1054:	28 a1       	ldd	r18, Y+32	; 0x20
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	82 9f       	mul	r24, r18
    105c:	a0 01       	movw	r20, r0
    105e:	83 9f       	mul	r24, r19
    1060:	50 0d       	add	r21, r0
    1062:	92 9f       	mul	r25, r18
    1064:	50 0d       	add	r21, r0
    1066:	11 24       	eor	r1, r1
    1068:	4e 0f       	add	r20, r30
    106a:	5f 1f       	adc	r21, r31
    106c:	5d 83       	std	Y+5, r21	; 0x05
    106e:	4c 83       	std	Y+4, r20	; 0x04
    1070:	1e 8e       	std	Y+30, r1	; 0x1e
    1072:	fb 83       	std	Y+3, r31	; 0x03
    1074:	ea 83       	std	Y+2, r30	; 0x02
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	82 9f       	mul	r24, r18
    107a:	a0 01       	movw	r20, r0
    107c:	83 9f       	mul	r24, r19
    107e:	50 0d       	add	r21, r0
    1080:	92 9f       	mul	r25, r18
    1082:	50 0d       	add	r21, r0
    1084:	11 24       	eor	r1, r1
    1086:	cf 01       	movw	r24, r30
    1088:	84 0f       	add	r24, r20
    108a:	95 1f       	adc	r25, r21
    108c:	9f 83       	std	Y+7, r25	; 0x07
    108e:	8e 83       	std	Y+6, r24	; 0x06
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	89 a3       	std	Y+33, r24	; 0x21
    1094:	8a a3       	std	Y+34, r24	; 0x22
    1096:	61 11       	cpse	r22, r1
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <xQueueGenericReset+0x6e>
    109a:	88 85       	ldd	r24, Y+8	; 0x08
    109c:	88 23       	and	r24, r24
    109e:	71 f0       	breq	.+28     	; 0x10bc <xQueueGenericReset+0x7a>
    10a0:	ce 01       	movw	r24, r28
    10a2:	08 96       	adiw	r24, 0x08	; 8
    10a4:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskRemoveFromEventList>
    10a8:	88 23       	and	r24, r24
    10aa:	41 f0       	breq	.+16     	; 0x10bc <xQueueGenericReset+0x7a>
    10ac:	31 de       	rcall	.-926    	; 0xd10 <vPortYield>
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <xQueueGenericReset+0x7a>
    10b0:	ce 01       	movw	r24, r28
    10b2:	08 96       	adiw	r24, 0x08	; 8
    10b4:	e5 dc       	rcall	.-1590   	; 0xa80 <vListInitialise>
    10b6:	ce 01       	movw	r24, r28
    10b8:	43 96       	adiw	r24, 0x13	; 19
    10ba:	e2 dc       	rcall	.-1596   	; 0xa80 <vListInitialise>
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <xQueueGenericCreate>:
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	08 2f       	mov	r16, r24
    10d4:	16 2f       	mov	r17, r22
    10d6:	f4 2e       	mov	r15, r20
    10d8:	66 23       	and	r22, r22
    10da:	b9 f0       	breq	.+46     	; 0x110a <xQueueGenericCreate+0x42>
    10dc:	86 9f       	mul	r24, r22
    10de:	c0 01       	movw	r24, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	85 96       	adiw	r24, 0x25	; 37
    10e4:	e3 db       	rcall	.-2106   	; 0x8ac <pvPortMalloc>
    10e6:	ec 01       	movw	r28, r24
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	41 f4       	brne	.+16     	; 0x10fc <xQueueGenericCreate+0x34>
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <xQueueGenericCreate+0x4e>
    10ee:	0f 8f       	std	Y+31, r16	; 0x1f
    10f0:	18 a3       	std	Y+32, r17	; 0x20
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	ce 01       	movw	r24, r28
    10f6:	a5 df       	rcall	.-182    	; 0x1042 <xQueueGenericReset>
    10f8:	fc a2       	std	Y+36, r15	; 0x24
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <xQueueGenericCreate+0x4e>
    10fc:	85 96       	adiw	r24, 0x25	; 37
    10fe:	99 83       	std	Y+1, r25	; 0x01
    1100:	88 83       	st	Y, r24
    1102:	f5 cf       	rjmp	.-22     	; 0x10ee <xQueueGenericCreate+0x26>
    1104:	d9 83       	std	Y+1, r29	; 0x01
    1106:	c8 83       	st	Y, r28
    1108:	f2 cf       	rjmp	.-28     	; 0x10ee <xQueueGenericCreate+0x26>
    110a:	85 e2       	ldi	r24, 0x25	; 37
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	ce db       	rcall	.-2148   	; 0x8ac <pvPortMalloc>
    1110:	ec 01       	movw	r28, r24
    1112:	89 2b       	or	r24, r25
    1114:	b9 f7       	brne	.-18     	; 0x1104 <xQueueGenericCreate+0x3c>
    1116:	ce 01       	movw	r24, r28
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	08 95       	ret

00001124 <xQueueGenericSend>:
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	29 97       	sbiw	r28, 0x09	; 9
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	7c 01       	movw	r14, r24
    114c:	5b 01       	movw	r10, r22
    114e:	2e 83       	std	Y+6, r18	; 0x06
    1150:	3f 83       	std	Y+7, r19	; 0x07
    1152:	48 87       	std	Y+8, r20	; 0x08
    1154:	59 87       	std	Y+9, r21	; 0x09
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	99 24       	eor	r9, r9
    115a:	93 94       	inc	r9
    115c:	6c 01       	movw	r12, r24
    115e:	88 e0       	ldi	r24, 0x08	; 8
    1160:	c8 0e       	add	r12, r24
    1162:	d1 1c       	adc	r13, r1
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	0f 92       	push	r0
    116a:	f7 01       	movw	r30, r14
    116c:	96 8d       	ldd	r25, Z+30	; 0x1e
    116e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1170:	98 17       	cp	r25, r24
    1172:	10 f0       	brcs	.+4      	; 0x1178 <xQueueGenericSend+0x54>
    1174:	02 30       	cpi	r16, 0x02	; 2
    1176:	b1 f4       	brne	.+44     	; 0x11a4 <xQueueGenericSend+0x80>
    1178:	40 2f       	mov	r20, r16
    117a:	b5 01       	movw	r22, r10
    117c:	c7 01       	movw	r24, r14
    117e:	9b de       	rcall	.-714    	; 0xeb6 <prvCopyDataToQueue>
    1180:	f7 01       	movw	r30, r14
    1182:	93 89       	ldd	r25, Z+19	; 0x13
    1184:	99 23       	and	r25, r25
    1186:	41 f0       	breq	.+16     	; 0x1198 <xQueueGenericSend+0x74>
    1188:	c7 01       	movw	r24, r14
    118a:	43 96       	adiw	r24, 0x13	; 19
    118c:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskRemoveFromEventList>
    1190:	88 23       	and	r24, r24
    1192:	21 f0       	breq	.+8      	; 0x119c <xQueueGenericSend+0x78>
    1194:	bd dd       	rcall	.-1158   	; 0xd10 <vPortYield>
    1196:	02 c0       	rjmp	.+4      	; 0x119c <xQueueGenericSend+0x78>
    1198:	81 11       	cpse	r24, r1
    119a:	ba dd       	rcall	.-1164   	; 0xd10 <vPortYield>
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	4e c0       	rjmp	.+156    	; 0x1240 <xQueueGenericSend+0x11c>
    11a4:	8e 81       	ldd	r24, Y+6	; 0x06
    11a6:	9f 81       	ldd	r25, Y+7	; 0x07
    11a8:	a8 85       	ldd	r26, Y+8	; 0x08
    11aa:	b9 85       	ldd	r27, Y+9	; 0x09
    11ac:	89 2b       	or	r24, r25
    11ae:	8a 2b       	or	r24, r26
    11b0:	8b 2b       	or	r24, r27
    11b2:	21 f4       	brne	.+8      	; 0x11bc <xQueueGenericSend+0x98>
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	42 c0       	rjmp	.+132    	; 0x1240 <xQueueGenericSend+0x11c>
    11bc:	11 11       	cpse	r17, r1
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <xQueueGenericSend+0xa6>
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	0e 94 fe 11 	call	0x23fc	; 0x23fc <vTaskInternalSetTimeOutState>
    11c8:	19 2d       	mov	r17, r9
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	2c d6       	rcall	.+3160   	; 0x1e28 <vTaskSuspendAll>
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	0f 92       	push	r0
    11d6:	f7 01       	movw	r30, r14
    11d8:	81 a1       	ldd	r24, Z+33	; 0x21
    11da:	8f 3f       	cpi	r24, 0xFF	; 255
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <xQueueGenericSend+0xbc>
    11de:	11 a2       	std	Z+33, r1	; 0x21
    11e0:	f7 01       	movw	r30, r14
    11e2:	82 a1       	ldd	r24, Z+34	; 0x22
    11e4:	8f 3f       	cpi	r24, 0xFF	; 255
    11e6:	09 f4       	brne	.+2      	; 0x11ea <xQueueGenericSend+0xc6>
    11e8:	12 a2       	std	Z+34, r1	; 0x22
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	be 01       	movw	r22, r28
    11f0:	6a 5f       	subi	r22, 0xFA	; 250
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	0e 94 0f 12 	call	0x241e	; 0x241e <xTaskCheckForTimeOut>
    11fc:	81 11       	cpse	r24, r1
    11fe:	1c c0       	rjmp	.+56     	; 0x1238 <xQueueGenericSend+0x114>
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	0f 92       	push	r0
    1206:	f7 01       	movw	r30, r14
    1208:	96 8d       	ldd	r25, Z+30	; 0x1e
    120a:	87 8d       	ldd	r24, Z+31	; 0x1f
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	98 13       	cpse	r25, r24
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <xQueueGenericSend+0x10c>
    1214:	4e 81       	ldd	r20, Y+6	; 0x06
    1216:	5f 81       	ldd	r21, Y+7	; 0x07
    1218:	68 85       	ldd	r22, Y+8	; 0x08
    121a:	79 85       	ldd	r23, Y+9	; 0x09
    121c:	c6 01       	movw	r24, r12
    121e:	0e 94 6f 11 	call	0x22de	; 0x22de <vTaskPlaceOnEventList>
    1222:	c7 01       	movw	r24, r14
    1224:	c1 de       	rcall	.-638    	; 0xfa8 <prvUnlockQueue>
    1226:	e9 d6       	rcall	.+3538   	; 0x1ffa <xTaskResumeAll>
    1228:	81 11       	cpse	r24, r1
    122a:	9c cf       	rjmp	.-200    	; 0x1164 <xQueueGenericSend+0x40>
    122c:	71 dd       	rcall	.-1310   	; 0xd10 <vPortYield>
    122e:	9a cf       	rjmp	.-204    	; 0x1164 <xQueueGenericSend+0x40>
    1230:	c7 01       	movw	r24, r14
    1232:	ba de       	rcall	.-652    	; 0xfa8 <prvUnlockQueue>
    1234:	e2 d6       	rcall	.+3524   	; 0x1ffa <xTaskResumeAll>
    1236:	96 cf       	rjmp	.-212    	; 0x1164 <xQueueGenericSend+0x40>
    1238:	c7 01       	movw	r24, r14
    123a:	b6 de       	rcall	.-660    	; 0xfa8 <prvUnlockQueue>
    123c:	de d6       	rcall	.+3516   	; 0x1ffa <xTaskResumeAll>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	29 96       	adiw	r28, 0x09	; 9
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	bf 90       	pop	r11
    125e:	af 90       	pop	r10
    1260:	9f 90       	pop	r9
    1262:	08 95       	ret

00001264 <xQueueCreateMutex>:
    1264:	0f 93       	push	r16
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	48 2f       	mov	r20, r24
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	2b df       	rcall	.-426    	; 0x10c8 <xQueueGenericCreate>
    1272:	ec 01       	movw	r28, r24
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	61 f0       	breq	.+24     	; 0x1290 <xQueueCreateMutex+0x2c>
    1278:	1d 82       	std	Y+5, r1	; 0x05
    127a:	1c 82       	std	Y+4, r1	; 0x04
    127c:	19 82       	std	Y+1, r1	; 0x01
    127e:	18 82       	st	Y, r1
    1280:	1e 82       	std	Y+6, r1	; 0x06
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	4a df       	rcall	.-364    	; 0x1124 <xQueueGenericSend>
    1290:	ce 01       	movw	r24, r28
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <xQueueGenericSendFromISR>:
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	8a 01       	movw	r16, r20
    12a8:	fc 01       	movw	r30, r24
    12aa:	56 8d       	ldd	r21, Z+30	; 0x1e
    12ac:	37 8d       	ldd	r19, Z+31	; 0x1f
    12ae:	53 17       	cp	r21, r19
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <xQueueGenericSendFromISR+0x1c>
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	e9 f4       	brne	.+58     	; 0x12f0 <xQueueGenericSendFromISR+0x56>
    12b6:	42 2f       	mov	r20, r18
    12b8:	78 01       	movw	r14, r16
    12ba:	ec 01       	movw	r28, r24
    12bc:	1a a1       	ldd	r17, Y+34	; 0x22
    12be:	fb dd       	rcall	.-1034   	; 0xeb6 <prvCopyDataToQueue>
    12c0:	1f 3f       	cpi	r17, 0xFF	; 255
    12c2:	81 f4       	brne	.+32     	; 0x12e4 <xQueueGenericSendFromISR+0x4a>
    12c4:	8b 89       	ldd	r24, Y+19	; 0x13
    12c6:	88 23       	and	r24, r24
    12c8:	a9 f0       	breq	.+42     	; 0x12f4 <xQueueGenericSendFromISR+0x5a>
    12ca:	ce 01       	movw	r24, r28
    12cc:	43 96       	adiw	r24, 0x13	; 19
    12ce:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskRemoveFromEventList>
    12d2:	88 23       	and	r24, r24
    12d4:	89 f0       	breq	.+34     	; 0x12f8 <xQueueGenericSendFromISR+0x5e>
    12d6:	e1 14       	cp	r14, r1
    12d8:	f1 04       	cpc	r15, r1
    12da:	81 f0       	breq	.+32     	; 0x12fc <xQueueGenericSendFromISR+0x62>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	f7 01       	movw	r30, r14
    12e0:	80 83       	st	Z, r24
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <xQueueGenericSendFromISR+0x64>
    12e4:	ff 24       	eor	r15, r15
    12e6:	f3 94       	inc	r15
    12e8:	f1 0e       	add	r15, r17
    12ea:	fa a2       	std	Y+34, r15	; 0x22
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <xQueueGenericSendFromISR+0x64>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <xQueueGenericSendFromISR+0x64>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <xQueueGenericSendFromISR+0x64>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <xQueueGenericSendFromISR+0x64>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	08 95       	ret

0000130c <xQueueReceive>:
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	29 97       	sbiw	r28, 0x09	; 9
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	8c 01       	movw	r16, r24
    1334:	5b 01       	movw	r10, r22
    1336:	2e 83       	std	Y+6, r18	; 0x06
    1338:	3f 83       	std	Y+7, r19	; 0x07
    133a:	48 87       	std	Y+8, r20	; 0x08
    133c:	59 87       	std	Y+9, r21	; 0x09
    133e:	e1 2c       	mov	r14, r1
    1340:	99 24       	eor	r9, r9
    1342:	93 94       	inc	r9
    1344:	6c 01       	movw	r12, r24
    1346:	83 e1       	ldi	r24, 0x13	; 19
    1348:	c8 0e       	add	r12, r24
    134a:	d1 1c       	adc	r13, r1
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	0f 92       	push	r0
    1352:	f8 01       	movw	r30, r16
    1354:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1356:	ff 20       	and	r15, r15
    1358:	91 f0       	breq	.+36     	; 0x137e <xQueueReceive+0x72>
    135a:	b5 01       	movw	r22, r10
    135c:	c8 01       	movw	r24, r16
    135e:	0a de       	rcall	.-1004   	; 0xf74 <prvCopyDataFromQueue>
    1360:	fa 94       	dec	r15
    1362:	f8 01       	movw	r30, r16
    1364:	f6 8e       	std	Z+30, r15	; 0x1e
    1366:	80 85       	ldd	r24, Z+8	; 0x08
    1368:	88 23       	and	r24, r24
    136a:	29 f0       	breq	.+10     	; 0x1376 <xQueueReceive+0x6a>
    136c:	c8 01       	movw	r24, r16
    136e:	08 96       	adiw	r24, 0x08	; 8
    1370:	ed d7       	rcall	.+4058   	; 0x234c <xTaskRemoveFromEventList>
    1372:	81 11       	cpse	r24, r1
    1374:	cd dc       	rcall	.-1638   	; 0xd10 <vPortYield>
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	4c c0       	rjmp	.+152    	; 0x1416 <xQueueReceive+0x10a>
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	a8 85       	ldd	r26, Y+8	; 0x08
    1384:	b9 85       	ldd	r27, Y+9	; 0x09
    1386:	89 2b       	or	r24, r25
    1388:	8a 2b       	or	r24, r26
    138a:	8b 2b       	or	r24, r27
    138c:	21 f4       	brne	.+8      	; 0x1396 <xQueueReceive+0x8a>
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	40 c0       	rjmp	.+128    	; 0x1416 <xQueueReceive+0x10a>
    1396:	e1 10       	cpse	r14, r1
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <xQueueReceive+0x98>
    139a:	ce 01       	movw	r24, r28
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <vTaskInternalSetTimeOutState>
    13a2:	e9 2c       	mov	r14, r9
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	3f d5       	rcall	.+2686   	; 0x1e28 <vTaskSuspendAll>
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	0f 92       	push	r0
    13b0:	f8 01       	movw	r30, r16
    13b2:	81 a1       	ldd	r24, Z+33	; 0x21
    13b4:	8f 3f       	cpi	r24, 0xFF	; 255
    13b6:	09 f4       	brne	.+2      	; 0x13ba <xQueueReceive+0xae>
    13b8:	11 a2       	std	Z+33, r1	; 0x21
    13ba:	f8 01       	movw	r30, r16
    13bc:	82 a1       	ldd	r24, Z+34	; 0x22
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <xQueueReceive+0xb8>
    13c2:	12 a2       	std	Z+34, r1	; 0x22
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	be 01       	movw	r22, r28
    13ca:	6a 5f       	subi	r22, 0xFA	; 250
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	0e 94 0f 12 	call	0x241e	; 0x241e <xTaskCheckForTimeOut>
    13d6:	81 11       	cpse	r24, r1
    13d8:	15 c0       	rjmp	.+42     	; 0x1404 <xQueueReceive+0xf8>
    13da:	c8 01       	movw	r24, r16
    13dc:	61 dd       	rcall	.-1342   	; 0xea0 <prvIsQueueEmpty>
    13de:	88 23       	and	r24, r24
    13e0:	69 f0       	breq	.+26     	; 0x13fc <xQueueReceive+0xf0>
    13e2:	4e 81       	ldd	r20, Y+6	; 0x06
    13e4:	5f 81       	ldd	r21, Y+7	; 0x07
    13e6:	68 85       	ldd	r22, Y+8	; 0x08
    13e8:	79 85       	ldd	r23, Y+9	; 0x09
    13ea:	c6 01       	movw	r24, r12
    13ec:	78 d7       	rcall	.+3824   	; 0x22de <vTaskPlaceOnEventList>
    13ee:	c8 01       	movw	r24, r16
    13f0:	db dd       	rcall	.-1098   	; 0xfa8 <prvUnlockQueue>
    13f2:	03 d6       	rcall	.+3078   	; 0x1ffa <xTaskResumeAll>
    13f4:	81 11       	cpse	r24, r1
    13f6:	aa cf       	rjmp	.-172    	; 0x134c <xQueueReceive+0x40>
    13f8:	8b dc       	rcall	.-1770   	; 0xd10 <vPortYield>
    13fa:	a8 cf       	rjmp	.-176    	; 0x134c <xQueueReceive+0x40>
    13fc:	c8 01       	movw	r24, r16
    13fe:	d4 dd       	rcall	.-1112   	; 0xfa8 <prvUnlockQueue>
    1400:	fc d5       	rcall	.+3064   	; 0x1ffa <xTaskResumeAll>
    1402:	a4 cf       	rjmp	.-184    	; 0x134c <xQueueReceive+0x40>
    1404:	c8 01       	movw	r24, r16
    1406:	d0 dd       	rcall	.-1120   	; 0xfa8 <prvUnlockQueue>
    1408:	f8 d5       	rcall	.+3056   	; 0x1ffa <xTaskResumeAll>
    140a:	c8 01       	movw	r24, r16
    140c:	49 dd       	rcall	.-1390   	; 0xea0 <prvIsQueueEmpty>
    140e:	88 23       	and	r24, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <xQueueReceive+0x108>
    1412:	9c cf       	rjmp	.-200    	; 0x134c <xQueueReceive+0x40>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	29 96       	adiw	r28, 0x09	; 9
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	08 95       	ret

0000143a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	0f 92       	push	r0
    1446:	89 a1       	ldd	r24, Y+33	; 0x21
    1448:	8f 3f       	cpi	r24, 0xFF	; 255
    144a:	09 f4       	brne	.+2      	; 0x144e <vQueueWaitForMessageRestricted+0x14>
    144c:	19 a2       	std	Y+33, r1	; 0x21
    144e:	8a a1       	ldd	r24, Y+34	; 0x22
    1450:	8f 3f       	cpi	r24, 0xFF	; 255
    1452:	09 f4       	brne	.+2      	; 0x1456 <vQueueWaitForMessageRestricted+0x1c>
    1454:	1a a2       	std	Y+34, r1	; 0x22
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    145a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    145c:	81 11       	cpse	r24, r1
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1460:	ce 01       	movw	r24, r28
    1462:	43 96       	adiw	r24, 0x13	; 19
    1464:	53 d7       	rcall	.+3750   	; 0x230c <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1466:	ce 01       	movw	r24, r28
    1468:	9f dd       	rcall	.-1218   	; 0xfa8 <prvUnlockQueue>
    }
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1470:	fc 01       	movw	r30, r24
    1472:	44 81       	ldd	r20, Z+4	; 0x04
    1474:	55 81       	ldd	r21, Z+5	; 0x05
    1476:	22 81       	ldd	r18, Z+2	; 0x02
    1478:	33 81       	ldd	r19, Z+3	; 0x03
    147a:	24 0f       	add	r18, r20
    147c:	35 1f       	adc	r19, r21
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	b9 01       	movw	r22, r18
    1484:	68 1b       	sub	r22, r24
    1486:	79 0b       	sbc	r23, r25
    1488:	cb 01       	movw	r24, r22
    148a:	64 17       	cp	r22, r20
    148c:	75 07       	cpc	r23, r21
    148e:	10 f0       	brcs	.+4      	; 0x1494 <prvBytesInBuffer+0x24>
    1490:	84 1b       	sub	r24, r20
    1492:	95 0b       	sbc	r25, r21
    1494:	08 95       	ret

00001496 <prvWriteBytesToBuffer>:
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	6c 01       	movw	r12, r24
    14ac:	5b 01       	movw	r10, r22
    14ae:	7a 01       	movw	r14, r20
    14b0:	fc 01       	movw	r30, r24
    14b2:	c2 81       	ldd	r28, Z+2	; 0x02
    14b4:	d3 81       	ldd	r29, Z+3	; 0x03
    14b6:	04 81       	ldd	r16, Z+4	; 0x04
    14b8:	15 81       	ldd	r17, Z+5	; 0x05
    14ba:	0c 1b       	sub	r16, r28
    14bc:	1d 0b       	sbc	r17, r29
    14be:	40 17       	cp	r20, r16
    14c0:	51 07       	cpc	r21, r17
    14c2:	08 f4       	brcc	.+2      	; 0x14c6 <prvWriteBytesToBuffer+0x30>
    14c4:	8a 01       	movw	r16, r20
    14c6:	f6 01       	movw	r30, r12
    14c8:	84 85       	ldd	r24, Z+12	; 0x0c
    14ca:	95 85       	ldd	r25, Z+13	; 0x0d
    14cc:	a8 01       	movw	r20, r16
    14ce:	b5 01       	movw	r22, r10
    14d0:	8c 0f       	add	r24, r28
    14d2:	9d 1f       	adc	r25, r29
    14d4:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <memcpy>
    14d8:	0e 15       	cp	r16, r14
    14da:	1f 05       	cpc	r17, r15
    14dc:	58 f4       	brcc	.+22     	; 0x14f4 <prvWriteBytesToBuffer+0x5e>
    14de:	a7 01       	movw	r20, r14
    14e0:	40 1b       	sub	r20, r16
    14e2:	51 0b       	sbc	r21, r17
    14e4:	b5 01       	movw	r22, r10
    14e6:	60 0f       	add	r22, r16
    14e8:	71 1f       	adc	r23, r17
    14ea:	f6 01       	movw	r30, r12
    14ec:	84 85       	ldd	r24, Z+12	; 0x0c
    14ee:	95 85       	ldd	r25, Z+13	; 0x0d
    14f0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <memcpy>
    14f4:	ce 01       	movw	r24, r28
    14f6:	8e 0d       	add	r24, r14
    14f8:	9f 1d       	adc	r25, r15
    14fa:	f6 01       	movw	r30, r12
    14fc:	24 81       	ldd	r18, Z+4	; 0x04
    14fe:	35 81       	ldd	r19, Z+5	; 0x05
    1500:	82 17       	cp	r24, r18
    1502:	93 07       	cpc	r25, r19
    1504:	10 f0       	brcs	.+4      	; 0x150a <prvWriteBytesToBuffer+0x74>
    1506:	82 1b       	sub	r24, r18
    1508:	93 0b       	sbc	r25, r19
    150a:	f6 01       	movw	r30, r12
    150c:	93 83       	std	Z+3, r25	; 0x03
    150e:	82 83       	std	Z+2, r24	; 0x02
    1510:	c7 01       	movw	r24, r14
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	bf 90       	pop	r11
    1524:	af 90       	pop	r10
    1526:	08 95       	ret

00001528 <prvWriteMessageToBuffer>:
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	1f 92       	push	r1
    153a:	1f 92       	push	r1
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	5a 83       	std	Y+2, r21	; 0x02
    1542:	49 83       	std	Y+1, r20	; 0x01
    1544:	21 15       	cp	r18, r1
    1546:	31 05       	cpc	r19, r1
    1548:	c9 f0       	breq	.+50     	; 0x157c <prvWriteMessageToBuffer+0x54>
    154a:	6b 01       	movw	r12, r22
    154c:	7c 01       	movw	r14, r24
    154e:	fc 01       	movw	r30, r24
    1550:	86 85       	ldd	r24, Z+14	; 0x0e
    1552:	80 fd       	sbrc	r24, 0
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <prvWriteMessageToBuffer+0x3e>
    1556:	ca 01       	movw	r24, r20
    1558:	24 17       	cp	r18, r20
    155a:	35 07       	cpc	r19, r21
    155c:	08 f4       	brcc	.+2      	; 0x1560 <prvWriteMessageToBuffer+0x38>
    155e:	c9 01       	movw	r24, r18
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	11 c0       	rjmp	.+34     	; 0x1588 <prvWriteMessageToBuffer+0x60>
    1566:	20 17       	cp	r18, r16
    1568:	31 07       	cpc	r19, r17
    156a:	58 f0       	brcs	.+22     	; 0x1582 <prvWriteMessageToBuffer+0x5a>
    156c:	42 e0       	ldi	r20, 0x02	; 2
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	be 01       	movw	r22, r28
    1572:	6f 5f       	subi	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	c7 01       	movw	r24, r14
    1578:	8e df       	rcall	.-228    	; 0x1496 <prvWriteBytesToBuffer>
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <prvWriteMessageToBuffer+0x60>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <prvWriteMessageToBuffer+0x6a>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <prvWriteMessageToBuffer+0x6a>
    1588:	49 81       	ldd	r20, Y+1	; 0x01
    158a:	5a 81       	ldd	r21, Y+2	; 0x02
    158c:	b6 01       	movw	r22, r12
    158e:	c7 01       	movw	r24, r14
    1590:	82 df       	rcall	.-252    	; 0x1496 <prvWriteBytesToBuffer>
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	08 95       	ret

000015a8 <prvReadBytesFromBuffer>:
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	7c 01       	movw	r14, r24
    15be:	5b 01       	movw	r10, r22
    15c0:	e9 01       	movw	r28, r18
    15c2:	42 17       	cp	r20, r18
    15c4:	53 07       	cpc	r21, r19
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <prvReadBytesFromBuffer+0x22>
    15c8:	ea 01       	movw	r28, r20
    15ca:	20 97       	sbiw	r28, 0x00	; 0
    15cc:	79 f1       	breq	.+94     	; 0x162c <prvReadBytesFromBuffer+0x84>
    15ce:	f7 01       	movw	r30, r14
    15d0:	00 81       	ld	r16, Z
    15d2:	11 81       	ldd	r17, Z+1	; 0x01
    15d4:	c4 80       	ldd	r12, Z+4	; 0x04
    15d6:	d5 80       	ldd	r13, Z+5	; 0x05
    15d8:	c0 1a       	sub	r12, r16
    15da:	d1 0a       	sbc	r13, r17
    15dc:	cc 15       	cp	r28, r12
    15de:	dd 05       	cpc	r29, r13
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <prvReadBytesFromBuffer+0x3c>
    15e2:	6e 01       	movw	r12, r28
    15e4:	f7 01       	movw	r30, r14
    15e6:	64 85       	ldd	r22, Z+12	; 0x0c
    15e8:	75 85       	ldd	r23, Z+13	; 0x0d
    15ea:	60 0f       	add	r22, r16
    15ec:	71 1f       	adc	r23, r17
    15ee:	a6 01       	movw	r20, r12
    15f0:	c5 01       	movw	r24, r10
    15f2:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <memcpy>
    15f6:	cc 16       	cp	r12, r28
    15f8:	dd 06       	cpc	r13, r29
    15fa:	58 f4       	brcc	.+22     	; 0x1612 <prvReadBytesFromBuffer+0x6a>
    15fc:	ae 01       	movw	r20, r28
    15fe:	4c 19       	sub	r20, r12
    1600:	5d 09       	sbc	r21, r13
    1602:	f7 01       	movw	r30, r14
    1604:	64 85       	ldd	r22, Z+12	; 0x0c
    1606:	75 85       	ldd	r23, Z+13	; 0x0d
    1608:	c5 01       	movw	r24, r10
    160a:	8c 0d       	add	r24, r12
    160c:	9d 1d       	adc	r25, r13
    160e:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <memcpy>
    1612:	0c 0f       	add	r16, r28
    1614:	1d 1f       	adc	r17, r29
    1616:	f7 01       	movw	r30, r14
    1618:	84 81       	ldd	r24, Z+4	; 0x04
    161a:	95 81       	ldd	r25, Z+5	; 0x05
    161c:	08 17       	cp	r16, r24
    161e:	19 07       	cpc	r17, r25
    1620:	10 f0       	brcs	.+4      	; 0x1626 <prvReadBytesFromBuffer+0x7e>
    1622:	08 1b       	sub	r16, r24
    1624:	19 0b       	sbc	r17, r25
    1626:	f7 01       	movw	r30, r14
    1628:	11 83       	std	Z+1, r17	; 0x01
    162a:	00 83       	st	Z, r16
    162c:	ce 01       	movw	r24, r28
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	08 95       	ret

00001644 <xStreamBufferGenericCreate>:
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	eb 01       	movw	r28, r22
    1650:	11 e0       	ldi	r17, 0x01	; 1
    1652:	41 30       	cpi	r20, 0x01	; 1
    1654:	09 f0       	breq	.+2      	; 0x1658 <xStreamBufferGenericCreate+0x14>
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	20 97       	sbiw	r28, 0x00	; 0
    165a:	11 f4       	brne	.+4      	; 0x1660 <xStreamBufferGenericCreate+0x1c>
    165c:	c1 e0       	ldi	r28, 0x01	; 1
    165e:	d0 e0       	ldi	r29, 0x00	; 0
    1660:	7c 01       	movw	r14, r24
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	e2 1a       	sub	r14, r18
    1666:	f2 0a       	sbc	r15, r18
    1668:	41 96       	adiw	r24, 0x11	; 17
    166a:	20 d9       	rcall	.-3520   	; 0x8ac <pvPortMalloc>
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	81 f0       	breq	.+32     	; 0x1690 <xStreamBufferGenericCreate+0x4c>
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	fc 01       	movw	r30, r24
    1674:	11 92       	st	Z+, r1
    1676:	2a 95       	dec	r18
    1678:	e9 f7       	brne	.-6      	; 0x1674 <xStreamBufferGenericCreate+0x30>
    167a:	9c 01       	movw	r18, r24
    167c:	20 5f       	subi	r18, 0xF0	; 240
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	fc 01       	movw	r30, r24
    1682:	35 87       	std	Z+13, r19	; 0x0d
    1684:	24 87       	std	Z+12, r18	; 0x0c
    1686:	f5 82       	std	Z+5, r15	; 0x05
    1688:	e4 82       	std	Z+4, r14	; 0x04
    168a:	d7 83       	std	Z+7, r29	; 0x07
    168c:	c6 83       	std	Z+6, r28	; 0x06
    168e:	16 87       	std	Z+14, r17	; 0x0e
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	08 95       	ret

0000169c <xStreamBufferReset>:
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	fc 01       	movw	r30, r24
    16a2:	27 85       	ldd	r18, Z+15	; 0x0f
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
    16aa:	80 85       	ldd	r24, Z+8	; 0x08
    16ac:	91 85       	ldd	r25, Z+9	; 0x09
    16ae:	89 2b       	or	r24, r25
    16b0:	d1 f4       	brne	.+52     	; 0x16e6 <xStreamBufferReset+0x4a>
    16b2:	82 85       	ldd	r24, Z+10	; 0x0a
    16b4:	93 85       	ldd	r25, Z+11	; 0x0b
    16b6:	89 2b       	or	r24, r25
    16b8:	c1 f4       	brne	.+48     	; 0x16ea <xStreamBufferReset+0x4e>
    16ba:	86 85       	ldd	r24, Z+14	; 0x0e
    16bc:	46 81       	ldd	r20, Z+6	; 0x06
    16be:	57 81       	ldd	r21, Z+7	; 0x07
    16c0:	64 81       	ldd	r22, Z+4	; 0x04
    16c2:	75 81       	ldd	r23, Z+5	; 0x05
    16c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    16c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    16c8:	90 e1       	ldi	r25, 0x10	; 16
    16ca:	ef 01       	movw	r28, r30
    16cc:	19 92       	st	Y+, r1
    16ce:	9a 95       	dec	r25
    16d0:	e9 f7       	brne	.-6      	; 0x16cc <xStreamBufferReset+0x30>
    16d2:	b5 87       	std	Z+13, r27	; 0x0d
    16d4:	a4 87       	std	Z+12, r26	; 0x0c
    16d6:	75 83       	std	Z+5, r23	; 0x05
    16d8:	64 83       	std	Z+4, r22	; 0x04
    16da:	57 83       	std	Z+7, r21	; 0x07
    16dc:	46 83       	std	Z+6, r20	; 0x06
    16de:	86 87       	std	Z+14, r24	; 0x0e
    16e0:	27 87       	std	Z+15, r18	; 0x0f
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <xStreamBufferReset+0x50>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <xStreamBufferReset+0x50>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <xStreamBufferSpacesAvailable>:
    16f6:	fc 01       	movw	r30, r24
    16f8:	24 81       	ldd	r18, Z+4	; 0x04
    16fa:	35 81       	ldd	r19, Z+5	; 0x05
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	42 81       	ldd	r20, Z+2	; 0x02
    1702:	53 81       	ldd	r21, Z+3	; 0x03
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	84 1b       	sub	r24, r20
    170c:	95 0b       	sbc	r25, r21
    170e:	82 17       	cp	r24, r18
    1710:	93 07       	cpc	r25, r19
    1712:	10 f0       	brcs	.+4      	; 0x1718 <xStreamBufferSpacesAvailable+0x22>
    1714:	82 1b       	sub	r24, r18
    1716:	93 0b       	sbc	r25, r19
    1718:	08 95       	ret

0000171a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    171a:	2f 92       	push	r2
    171c:	3f 92       	push	r3
    171e:	4f 92       	push	r4
    1720:	5f 92       	push	r5
    1722:	6f 92       	push	r6
    1724:	7f 92       	push	r7
    1726:	8f 92       	push	r8
    1728:	9f 92       	push	r9
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	29 97       	sbiw	r28, 0x09	; 9
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	5c 01       	movw	r10, r24
    1750:	1b 01       	movw	r2, r22
    1752:	2a 01       	movw	r4, r20
    1754:	0e 83       	std	Y+6, r16	; 0x06
    1756:	1f 83       	std	Y+7, r17	; 0x07
    1758:	28 87       	std	Y+8, r18	; 0x08
    175a:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    175c:	fc 01       	movw	r30, r24
    175e:	86 85       	ldd	r24, Z+14	; 0x0e
    1760:	80 ff       	sbrs	r24, 0
    1762:	05 c0       	rjmp	.+10     	; 0x176e <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1764:	3a 01       	movw	r6, r20
    1766:	f2 e0       	ldi	r31, 0x02	; 2
    1768:	6f 0e       	add	r6, r31
    176a:	71 1c       	adc	r7, r1
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    176e:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	9f 81       	ldd	r25, Y+7	; 0x07
    1774:	a8 85       	ldd	r26, Y+8	; 0x08
    1776:	b9 85       	ldd	r27, Y+9	; 0x09
    1778:	89 2b       	or	r24, r25
    177a:	8a 2b       	or	r24, r26
    177c:	8b 2b       	or	r24, r27
    177e:	09 f4       	brne	.+2      	; 0x1782 <xStreamBufferSend+0x68>
    1780:	34 c0       	rjmp	.+104    	; 0x17ea <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	24 d6       	rcall	.+3144   	; 0x23d0 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    178e:	c5 01       	movw	r24, r10
    1790:	b2 df       	rcall	.-156    	; 0x16f6 <xStreamBufferSpacesAvailable>
    1792:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1794:	86 15       	cp	r24, r6
    1796:	97 05       	cpc	r25, r7
    1798:	18 f5       	brcc	.+70     	; 0x17e0 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 46 14 	call	0x288c	; 0x288c <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    17a2:	96 d6       	rcall	.+3372   	; 0x24d0 <xTaskGetCurrentTaskHandle>
    17a4:	f5 01       	movw	r30, r10
    17a6:	93 87       	std	Z+11, r25	; 0x0b
    17a8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    17ae:	ce 80       	ldd	r12, Y+6	; 0x06
    17b0:	df 80       	ldd	r13, Y+7	; 0x07
    17b2:	e8 84       	ldd	r14, Y+8	; 0x08
    17b4:	f9 84       	ldd	r15, Y+9	; 0x09
    17b6:	00 e0       	ldi	r16, 0x00	; 0
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	cb 01       	movw	r24, r22
    17c6:	d7 d6       	rcall	.+3502   	; 0x2576 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    17c8:	f5 01       	movw	r30, r10
    17ca:	13 86       	std	Z+11, r1	; 0x0b
    17cc:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    17ce:	be 01       	movw	r22, r28
    17d0:	6a 5f       	subi	r22, 0xFA	; 250
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	22 d6       	rcall	.+3140   	; 0x241e <xTaskCheckForTimeOut>
    17da:	88 23       	and	r24, r24
    17dc:	a9 f2       	breq	.-86     	; 0x1788 <xStreamBufferSend+0x6e>
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    17e0:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	81 14       	cp	r8, r1
    17e6:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17e8:	19 f4       	brne	.+6      	; 0x17f0 <xStreamBufferSend+0xd6>
    17ea:	c5 01       	movw	r24, r10
    17ec:	84 df       	rcall	.-248    	; 0x16f6 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    17ee:	4c 01       	movw	r8, r24
    17f0:	83 01       	movw	r16, r6
    17f2:	94 01       	movw	r18, r8
    17f4:	a2 01       	movw	r20, r4
    17f6:	b1 01       	movw	r22, r2
    17f8:	c5 01       	movw	r24, r10
    17fa:	96 de       	rcall	.-724    	; 0x1528 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    17fc:	7c 01       	movw	r14, r24
    17fe:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1800:	d9 f0       	breq	.+54     	; 0x1838 <xStreamBufferSend+0x11e>
    1802:	c5 01       	movw	r24, r10
    1804:	35 de       	rcall	.-918    	; 0x1470 <prvBytesInBuffer>
    1806:	f5 01       	movw	r30, r10
    1808:	26 81       	ldd	r18, Z+6	; 0x06
    180a:	37 81       	ldd	r19, Z+7	; 0x07
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1810:	98 f0       	brcs	.+38     	; 0x1838 <xStreamBufferSend+0x11e>
    1812:	0a d3       	rcall	.+1556   	; 0x1e28 <vTaskSuspendAll>
    1814:	f5 01       	movw	r30, r10
    1816:	80 85       	ldd	r24, Z+8	; 0x08
    1818:	91 85       	ldd	r25, Z+9	; 0x09
    181a:	89 2b       	or	r24, r25
    181c:	61 f0       	breq	.+24     	; 0x1836 <xStreamBufferSend+0x11c>
    181e:	80 85       	ldd	r24, Z+8	; 0x08
    1820:	91 85       	ldd	r25, Z+9	; 0x09
    1822:	00 e0       	ldi	r16, 0x00	; 0
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	ba 01       	movw	r22, r20
    182e:	2d d7       	rcall	.+3674   	; 0x268a <xTaskGenericNotify>
    1830:	f5 01       	movw	r30, r10
    1832:	11 86       	std	Z+9, r1	; 0x09
    1834:	10 86       	std	Z+8, r1	; 0x08
    1836:	e1 d3       	rcall	.+1986   	; 0x1ffa <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1838:	c7 01       	movw	r24, r14
    183a:	29 96       	adiw	r28, 0x09	; 9
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	3f 90       	pop	r3
    1868:	2f 90       	pop	r2
    186a:	08 95       	ret

0000186c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	5b 01       	movw	r10, r22
    1884:	6a 01       	movw	r12, r20
    1886:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1888:	8e 85       	ldd	r24, Y+14	; 0x0e
    188a:	80 ff       	sbrs	r24, 0
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    188e:	8a 01       	movw	r16, r20
    1890:	0e 5f       	subi	r16, 0xFE	; 254
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1896:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1898:	ce 01       	movw	r24, r28
    189a:	2d df       	rcall	.-422    	; 0x16f6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    189c:	9c 01       	movw	r18, r24
    189e:	a6 01       	movw	r20, r12
    18a0:	b5 01       	movw	r22, r10
    18a2:	ce 01       	movw	r24, r28
    18a4:	41 de       	rcall	.-894    	; 0x1528 <prvWriteMessageToBuffer>
    18a6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    18a8:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    18aa:	b1 f0       	breq	.+44     	; 0x18d8 <xStreamBufferSendFromISR+0x6c>
    18ac:	ce 01       	movw	r24, r28
    18ae:	e0 dd       	rcall	.-1088   	; 0x1470 <prvBytesInBuffer>
    18b0:	2e 81       	ldd	r18, Y+6	; 0x06
    18b2:	3f 81       	ldd	r19, Y+7	; 0x07
    18b4:	82 17       	cp	r24, r18
    18b6:	93 07       	cpc	r25, r19
    18b8:	78 f0       	brcs	.+30     	; 0x18d8 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    18ba:	88 85       	ldd	r24, Y+8	; 0x08
    18bc:	99 85       	ldd	r25, Y+9	; 0x09
    18be:	89 2b       	or	r24, r25
    18c0:	59 f0       	breq	.+22     	; 0x18d8 <xStreamBufferSendFromISR+0x6c>
    18c2:	88 85       	ldd	r24, Y+8	; 0x08
    18c4:	99 85       	ldd	r25, Y+9	; 0x09
    18c6:	00 e0       	ldi	r16, 0x00	; 0
    18c8:	10 e0       	ldi	r17, 0x00	; 0
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	ba 01       	movw	r22, r20
    18d2:	53 d7       	rcall	.+3750   	; 0x277a <xTaskGenericNotifyFromISR>
    18d4:	19 86       	std	Y+9, r1	; 0x09
    18d6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    18d8:	c6 01       	movw	r24, r12
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	bf 90       	pop	r11
    18ec:	af 90       	pop	r10
    18ee:	08 95       	ret

000018f0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18f0:	4f 92       	push	r4
    18f2:	5f 92       	push	r5
    18f4:	6f 92       	push	r6
    18f6:	7f 92       	push	r7
    18f8:	8f 92       	push	r8
    18fa:	9f 92       	push	r9
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	1f 92       	push	r1
    1912:	1f 92       	push	r1
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	5c 01       	movw	r10, r24
    191a:	2b 01       	movw	r4, r22
    191c:	3a 01       	movw	r6, r20
    191e:	68 01       	movw	r12, r16
    1920:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1922:	fc 01       	movw	r30, r24
    1924:	86 85       	ldd	r24, Z+14	; 0x0e
    1926:	80 fd       	sbrc	r24, 0
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    192a:	81 2c       	mov	r8, r1
    192c:	91 2c       	mov	r9, r1
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1930:	68 94       	set
    1932:	88 24       	eor	r8, r8
    1934:	81 f8       	bld	r8, 1
    1936:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1938:	c1 14       	cp	r12, r1
    193a:	d1 04       	cpc	r13, r1
    193c:	e1 04       	cpc	r14, r1
    193e:	f1 04       	cpc	r15, r1
    1940:	29 f1       	breq	.+74     	; 0x198c <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1948:	c5 01       	movw	r24, r10
    194a:	92 dd       	rcall	.-1244   	; 0x1470 <prvBytesInBuffer>
    194c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    194e:	88 16       	cp	r8, r24
    1950:	99 06       	cpc	r9, r25
    1952:	38 f0       	brcs	.+14     	; 0x1962 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1958:	99 d7       	rcall	.+3890   	; 0x288c <xTaskNotifyStateClear>
    195a:	ba d5       	rcall	.+2932   	; 0x24d0 <xTaskGetCurrentTaskHandle>
    195c:	f5 01       	movw	r30, r10
    195e:	91 87       	std	Z+9, r25	; 0x09
    1960:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1966:	80 16       	cp	r8, r16
    1968:	91 06       	cpc	r9, r17
    196a:	b0 f0       	brcs	.+44     	; 0x1998 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    196c:	00 e0       	ldi	r16, 0x00	; 0
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	cb 01       	movw	r24, r22
    197c:	fc d5       	rcall	.+3064   	; 0x2576 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    197e:	f5 01       	movw	r30, r10
    1980:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1982:	10 86       	std	Z+8, r1	; 0x08
    1984:	c5 01       	movw	r24, r10
    1986:	74 dd       	rcall	.-1304   	; 0x1470 <prvBytesInBuffer>
    1988:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <xStreamBufferReceive+0xa2>
    198c:	c5 01       	movw	r24, r10
    198e:	70 dd       	rcall	.-1312   	; 0x1470 <prvBytesInBuffer>
    1990:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1992:	80 16       	cp	r8, r16
    1994:	91 06       	cpc	r9, r17
    1996:	b8 f5       	brcc	.+110    	; 0x1a06 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1998:	81 14       	cp	r8, r1
    199a:	91 04       	cpc	r9, r1
    199c:	c1 f0       	breq	.+48     	; 0x19ce <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    199e:	f5 01       	movw	r30, r10
    19a0:	e0 80       	ld	r14, Z
    19a2:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    19a4:	98 01       	movw	r18, r16
    19a6:	a4 01       	movw	r20, r8
    19a8:	be 01       	movw	r22, r28
    19aa:	6f 5f       	subi	r22, 0xFF	; 255
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	c5 01       	movw	r24, r10
    19b0:	fb dd       	rcall	.-1034   	; 0x15a8 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    19b6:	08 19       	sub	r16, r8
    19b8:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    19ba:	68 16       	cp	r6, r24
    19bc:	79 06       	cpc	r7, r25
    19be:	30 f4       	brcc	.+12     	; 0x19cc <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    19c0:	f5 01       	movw	r30, r10
    19c2:	f1 82       	std	Z+1, r15	; 0x01
    19c4:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    19c6:	61 2c       	mov	r6, r1
    19c8:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    19ca:	01 c0       	rjmp	.+2      	; 0x19ce <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    19cc:	3c 01       	movw	r6, r24
    19ce:	98 01       	movw	r18, r16
    19d0:	a3 01       	movw	r20, r6
    19d2:	b2 01       	movw	r22, r4
    19d4:	c5 01       	movw	r24, r10
    19d6:	e8 dd       	rcall	.-1072   	; 0x15a8 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    19d8:	7c 01       	movw	r14, r24
    19da:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    19dc:	b1 f0       	breq	.+44     	; 0x1a0a <xStreamBufferReceive+0x11a>
    19de:	24 d2       	rcall	.+1096   	; 0x1e28 <vTaskSuspendAll>
    19e0:	f5 01       	movw	r30, r10
    19e2:	82 85       	ldd	r24, Z+10	; 0x0a
    19e4:	93 85       	ldd	r25, Z+11	; 0x0b
    19e6:	89 2b       	or	r24, r25
    19e8:	61 f0       	breq	.+24     	; 0x1a02 <xStreamBufferReceive+0x112>
    19ea:	82 85       	ldd	r24, Z+10	; 0x0a
    19ec:	93 85       	ldd	r25, Z+11	; 0x0b
    19ee:	00 e0       	ldi	r16, 0x00	; 0
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	ba 01       	movw	r22, r20
    19fa:	47 d6       	rcall	.+3214   	; 0x268a <xTaskGenericNotify>
    19fc:	f5 01       	movw	r30, r10
    19fe:	13 86       	std	Z+11, r1	; 0x0b
    1a00:	12 86       	std	Z+10, r1	; 0x0a
    1a02:	fb d2       	rcall	.+1526   	; 0x1ffa <xTaskResumeAll>
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a06:	e1 2c       	mov	r14, r1
    1a08:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a0a:	c7 01       	movw	r24, r14
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	bf 90       	pop	r11
    1a22:	af 90       	pop	r10
    1a24:	9f 90       	pop	r9
    1a26:	8f 90       	pop	r8
    1a28:	7f 90       	pop	r7
    1a2a:	6f 90       	pop	r6
    1a2c:	5f 90       	pop	r5
    1a2e:	4f 90       	pop	r4
    1a30:	08 95       	ret

00001a32 <prvResetNextTaskUnblockTime>:
    1a32:	e0 91 32 18 	lds	r30, 0x1832	; 0x801832 <pxDelayedTaskList>
    1a36:	f0 91 33 18 	lds	r31, 0x1833	; 0x801833 <pxDelayedTaskList+0x1>
    1a3a:	80 81       	ld	r24, Z
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	0c c0       	rjmp	.+24     	; 0x1a58 <prvResetNextTaskUnblockTime+0x26>
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
    1a44:	dc 01       	movw	r26, r24
    1a46:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <xNextTaskUnblockTime>
    1a4a:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <xNextTaskUnblockTime+0x1>
    1a4e:	a0 93 01 18 	sts	0x1801, r26	; 0x801801 <xNextTaskUnblockTime+0x2>
    1a52:	b0 93 02 18 	sts	0x1802, r27	; 0x801802 <xNextTaskUnblockTime+0x3>
    1a56:	08 95       	ret
    1a58:	e0 91 32 18 	lds	r30, 0x1832	; 0x801832 <pxDelayedTaskList>
    1a5c:	f0 91 33 18 	lds	r31, 0x1833	; 0x801833 <pxDelayedTaskList+0x1>
    1a60:	07 80       	ldd	r0, Z+7	; 0x07
    1a62:	f0 85       	ldd	r31, Z+8	; 0x08
    1a64:	e0 2d       	mov	r30, r0
    1a66:	00 84       	ldd	r0, Z+8	; 0x08
    1a68:	f1 85       	ldd	r31, Z+9	; 0x09
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	a4 81       	ldd	r26, Z+4	; 0x04
    1a72:	b5 81       	ldd	r27, Z+5	; 0x05
    1a74:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <xNextTaskUnblockTime>
    1a78:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <xNextTaskUnblockTime+0x1>
    1a7c:	a0 93 01 18 	sts	0x1801, r26	; 0x801801 <xNextTaskUnblockTime+0x2>
    1a80:	b0 93 02 18 	sts	0x1802, r27	; 0x801802 <xNextTaskUnblockTime+0x3>
    1a84:	08 95       	ret

00001a86 <prvAddCurrentTaskToDelayedList>:
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	cf 93       	push	r28
    1a98:	6b 01       	movw	r12, r22
    1a9a:	7c 01       	movw	r14, r24
    1a9c:	c4 2f       	mov	r28, r20
    1a9e:	80 90 09 18 	lds	r8, 0x1809	; 0x801809 <xTickCount>
    1aa2:	90 90 0a 18 	lds	r9, 0x180A	; 0x80180a <xTickCount+0x1>
    1aa6:	a0 90 0b 18 	lds	r10, 0x180B	; 0x80180b <xTickCount+0x2>
    1aaa:	b0 90 0c 18 	lds	r11, 0x180C	; 0x80180c <xTickCount+0x3>
    1aae:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <pxCurrentTCB>
    1ab2:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1ab6:	02 96       	adiw	r24, 0x02	; 2
    1ab8:	56 d8       	rcall	.-3924   	; 0xb66 <uxListRemove>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	c8 16       	cp	r12, r24
    1abe:	d8 06       	cpc	r13, r24
    1ac0:	e8 06       	cpc	r14, r24
    1ac2:	f8 06       	cpc	r15, r24
    1ac4:	69 f4       	brne	.+26     	; 0x1ae0 <prvAddCurrentTaskToDelayedList+0x5a>
    1ac6:	cc 23       	and	r28, r28
    1ac8:	59 f0       	breq	.+22     	; 0x1ae0 <prvAddCurrentTaskToDelayedList+0x5a>
    1aca:	60 91 76 18 	lds	r22, 0x1876	; 0x801876 <pxCurrentTCB>
    1ace:	70 91 77 18 	lds	r23, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1ad2:	6e 5f       	subi	r22, 0xFE	; 254
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	8e e0       	ldi	r24, 0x0E	; 14
    1ad8:	98 e1       	ldi	r25, 0x18	; 24
    1ada:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <prvAddCurrentTaskToDelayedList+0xd8>
    1ae0:	c8 0c       	add	r12, r8
    1ae2:	d9 1c       	adc	r13, r9
    1ae4:	ea 1c       	adc	r14, r10
    1ae6:	fb 1c       	adc	r15, r11
    1ae8:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    1aec:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1af0:	c2 82       	std	Z+2, r12	; 0x02
    1af2:	d3 82       	std	Z+3, r13	; 0x03
    1af4:	e4 82       	std	Z+4, r14	; 0x04
    1af6:	f5 82       	std	Z+5, r15	; 0x05
    1af8:	c8 14       	cp	r12, r8
    1afa:	d9 04       	cpc	r13, r9
    1afc:	ea 04       	cpc	r14, r10
    1afe:	fb 04       	cpc	r15, r11
    1b00:	68 f4       	brcc	.+26     	; 0x1b1c <prvAddCurrentTaskToDelayedList+0x96>
    1b02:	60 91 76 18 	lds	r22, 0x1876	; 0x801876 <pxCurrentTCB>
    1b06:	70 91 77 18 	lds	r23, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1b0a:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <pxOverflowDelayedTaskList>
    1b0e:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <pxOverflowDelayedTaskList+0x1>
    1b12:	6e 5f       	subi	r22, 0xFE	; 254
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	0e 94 76 05 	call	0xaec	; 0xaec <vListInsert>
    1b1a:	21 c0       	rjmp	.+66     	; 0x1b5e <prvAddCurrentTaskToDelayedList+0xd8>
    1b1c:	60 91 76 18 	lds	r22, 0x1876	; 0x801876 <pxCurrentTCB>
    1b20:	70 91 77 18 	lds	r23, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1b24:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <pxDelayedTaskList>
    1b28:	90 91 33 18 	lds	r25, 0x1833	; 0x801833 <pxDelayedTaskList+0x1>
    1b2c:	6e 5f       	subi	r22, 0xFE	; 254
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	0e 94 76 05 	call	0xaec	; 0xaec <vListInsert>
    1b34:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <xNextTaskUnblockTime>
    1b38:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <xNextTaskUnblockTime+0x1>
    1b3c:	a0 91 01 18 	lds	r26, 0x1801	; 0x801801 <xNextTaskUnblockTime+0x2>
    1b40:	b0 91 02 18 	lds	r27, 0x1802	; 0x801802 <xNextTaskUnblockTime+0x3>
    1b44:	c8 16       	cp	r12, r24
    1b46:	d9 06       	cpc	r13, r25
    1b48:	ea 06       	cpc	r14, r26
    1b4a:	fb 06       	cpc	r15, r27
    1b4c:	40 f4       	brcc	.+16     	; 0x1b5e <prvAddCurrentTaskToDelayedList+0xd8>
    1b4e:	c0 92 ff 17 	sts	0x17FF, r12	; 0x8017ff <xNextTaskUnblockTime>
    1b52:	d0 92 00 18 	sts	0x1800, r13	; 0x801800 <xNextTaskUnblockTime+0x1>
    1b56:	e0 92 01 18 	sts	0x1801, r14	; 0x801801 <xNextTaskUnblockTime+0x2>
    1b5a:	f0 92 02 18 	sts	0x1802, r15	; 0x801802 <xNextTaskUnblockTime+0x3>
    1b5e:	cf 91       	pop	r28
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	bf 90       	pop	r11
    1b6a:	af 90       	pop	r10
    1b6c:	9f 90       	pop	r9
    1b6e:	8f 90       	pop	r8
    1b70:	08 95       	ret

00001b72 <xTaskCreate>:
    1b72:	4f 92       	push	r4
    1b74:	5f 92       	push	r5
    1b76:	6f 92       	push	r6
    1b78:	7f 92       	push	r7
    1b7a:	8f 92       	push	r8
    1b7c:	9f 92       	push	r9
    1b7e:	af 92       	push	r10
    1b80:	bf 92       	push	r11
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	4c 01       	movw	r8, r24
    1b92:	6b 01       	movw	r12, r22
    1b94:	5a 01       	movw	r10, r20
    1b96:	29 01       	movw	r4, r18
    1b98:	ca 01       	movw	r24, r20
    1b9a:	0e 94 56 04 	call	0x8ac	; 0x8ac <pvPortMalloc>
    1b9e:	3c 01       	movw	r6, r24
    1ba0:	89 2b       	or	r24, r25
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <xTaskCreate+0x34>
    1ba4:	f4 c0       	rjmp	.+488    	; 0x1d8e <xTaskCreate+0x21c>
    1ba6:	80 e3       	ldi	r24, 0x30	; 48
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 56 04 	call	0x8ac	; 0x8ac <pvPortMalloc>
    1bae:	ec 01       	movw	r28, r24
    1bb0:	89 2b       	or	r24, r25
    1bb2:	99 f0       	breq	.+38     	; 0x1bda <xTaskCreate+0x68>
    1bb4:	7c 8e       	std	Y+28, r7	; 0x1c
    1bb6:	6b 8e       	std	Y+27, r6	; 0x1b
    1bb8:	a5 01       	movw	r20, r10
    1bba:	65 ea       	ldi	r22, 0xA5	; 165
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	c3 01       	movw	r24, r6
    1bc0:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <memset>
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	a2 1a       	sub	r10, r18
    1bc8:	b1 08       	sbc	r11, r1
    1bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bce:	a8 0e       	add	r10, r24
    1bd0:	b9 1e       	adc	r11, r25
    1bd2:	c1 14       	cp	r12, r1
    1bd4:	d1 04       	cpc	r13, r1
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <xTaskCreate+0x70>
    1bd8:	20 c0       	rjmp	.+64     	; 0x1c1a <xTaskCreate+0xa8>
    1bda:	c3 01       	movw	r24, r6
    1bdc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vPortFree>
    1be0:	d6 c0       	rjmp	.+428    	; 0x1d8e <xTaskCreate+0x21c>
    1be2:	d6 01       	movw	r26, r12
    1be4:	8c 91       	ld	r24, X
    1be6:	8d 8f       	std	Y+29, r24	; 0x1d
    1be8:	8c 91       	ld	r24, X
    1bea:	88 23       	and	r24, r24
    1bec:	a1 f0       	breq	.+40     	; 0x1c16 <xTaskCreate+0xa4>
    1bee:	ae 01       	movw	r20, r28
    1bf0:	42 5e       	subi	r20, 0xE2	; 226
    1bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf4:	f6 01       	movw	r30, r12
    1bf6:	31 96       	adiw	r30, 0x01	; 1
    1bf8:	b8 e0       	ldi	r27, 0x08	; 8
    1bfa:	cb 0e       	add	r12, r27
    1bfc:	d1 1c       	adc	r13, r1
    1bfe:	cf 01       	movw	r24, r30
    1c00:	21 91       	ld	r18, Z+
    1c02:	da 01       	movw	r26, r20
    1c04:	2d 93       	st	X+, r18
    1c06:	ad 01       	movw	r20, r26
    1c08:	dc 01       	movw	r26, r24
    1c0a:	8c 91       	ld	r24, X
    1c0c:	88 23       	and	r24, r24
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <xTaskCreate+0xa4>
    1c10:	ec 15       	cp	r30, r12
    1c12:	fd 05       	cpc	r31, r13
    1c14:	a1 f7       	brne	.-24     	; 0x1bfe <xTaskCreate+0x8c>
    1c16:	1c a2       	std	Y+36, r1	; 0x24
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <xTaskCreate+0xaa>
    1c1a:	1d 8e       	std	Y+29, r1	; 0x1d
    1c1c:	04 30       	cpi	r16, 0x04	; 4
    1c1e:	08 f0       	brcs	.+2      	; 0x1c22 <xTaskCreate+0xb0>
    1c20:	03 e0       	ldi	r16, 0x03	; 3
    1c22:	0a 8f       	std	Y+26, r16	; 0x1a
    1c24:	0f a3       	std	Y+39, r16	; 0x27
    1c26:	18 a6       	std	Y+40, r1	; 0x28
    1c28:	6e 01       	movw	r12, r28
    1c2a:	b2 e0       	ldi	r27, 0x02	; 2
    1c2c:	cb 0e       	add	r12, r27
    1c2e:	d1 1c       	adc	r13, r1
    1c30:	c6 01       	movw	r24, r12
    1c32:	0e 94 51 05 	call	0xaa2	; 0xaa2 <vListInitialiseItem>
    1c36:	ce 01       	movw	r24, r28
    1c38:	0e 96       	adiw	r24, 0x0e	; 14
    1c3a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <vListInitialiseItem>
    1c3e:	db 87       	std	Y+11, r29	; 0x0b
    1c40:	ca 87       	std	Y+10, r28	; 0x0a
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	80 1b       	sub	r24, r16
    1c4c:	91 09       	sbc	r25, r1
    1c4e:	a1 09       	sbc	r26, r1
    1c50:	b1 09       	sbc	r27, r1
    1c52:	8e 87       	std	Y+14, r24	; 0x0e
    1c54:	9f 87       	std	Y+15, r25	; 0x0f
    1c56:	a8 8b       	std	Y+16, r26	; 0x10
    1c58:	b9 8b       	std	Y+17, r27	; 0x11
    1c5a:	df 8b       	std	Y+23, r29	; 0x17
    1c5c:	ce 8b       	std	Y+22, r28	; 0x16
    1c5e:	1a a6       	std	Y+42, r1	; 0x2a
    1c60:	19 a6       	std	Y+41, r1	; 0x29
    1c62:	1b a6       	std	Y+43, r1	; 0x2b
    1c64:	1c a6       	std	Y+44, r1	; 0x2c
    1c66:	1d a6       	std	Y+45, r1	; 0x2d
    1c68:	1e a6       	std	Y+46, r1	; 0x2e
    1c6a:	1f a6       	std	Y+47, r1	; 0x2f
    1c6c:	a2 01       	movw	r20, r4
    1c6e:	b4 01       	movw	r22, r8
    1c70:	c5 01       	movw	r24, r10
    1c72:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pxPortInitialiseStack>
    1c76:	99 83       	std	Y+1, r25	; 0x01
    1c78:	88 83       	st	Y, r24
    1c7a:	e1 14       	cp	r14, r1
    1c7c:	f1 04       	cpc	r15, r1
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <xTaskCreate+0x114>
    1c80:	f7 01       	movw	r30, r14
    1c82:	d1 83       	std	Z+1, r29	; 0x01
    1c84:	c0 83       	st	Z, r28
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	0f 92       	push	r0
    1c8c:	80 91 0d 18 	lds	r24, 0x180D	; 0x80180d <uxCurrentNumberOfTasks>
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	80 93 0d 18 	sts	0x180D, r24	; 0x80180d <uxCurrentNumberOfTasks>
    1c96:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <pxCurrentTCB>
    1c9a:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	d1 f5       	brne	.+116    	; 0x1d16 <xTaskCreate+0x1a4>
    1ca2:	d0 93 77 18 	sts	0x1877, r29	; 0x801877 <pxCurrentTCB+0x1>
    1ca6:	c0 93 76 18 	sts	0x1876, r28	; 0x801876 <pxCurrentTCB>
    1caa:	80 91 0d 18 	lds	r24, 0x180D	; 0x80180d <uxCurrentNumberOfTasks>
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <xTaskCreate+0x142>
    1cb2:	41 c0       	rjmp	.+130    	; 0x1d36 <xTaskCreate+0x1c4>
    1cb4:	8a e4       	ldi	r24, 0x4A	; 74
    1cb6:	98 e1       	ldi	r25, 0x18	; 24
    1cb8:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cbc:	85 e5       	ldi	r24, 0x55	; 85
    1cbe:	98 e1       	ldi	r25, 0x18	; 24
    1cc0:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cc4:	80 e6       	ldi	r24, 0x60	; 96
    1cc6:	98 e1       	ldi	r25, 0x18	; 24
    1cc8:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1ccc:	8b e6       	ldi	r24, 0x6B	; 107
    1cce:	98 e1       	ldi	r25, 0x18	; 24
    1cd0:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cd4:	8f e3       	ldi	r24, 0x3F	; 63
    1cd6:	98 e1       	ldi	r25, 0x18	; 24
    1cd8:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cdc:	84 e3       	ldi	r24, 0x34	; 52
    1cde:	98 e1       	ldi	r25, 0x18	; 24
    1ce0:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1ce4:	85 e2       	ldi	r24, 0x25	; 37
    1ce6:	98 e1       	ldi	r25, 0x18	; 24
    1ce8:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cec:	8a e1       	ldi	r24, 0x1A	; 26
    1cee:	98 e1       	ldi	r25, 0x18	; 24
    1cf0:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cf4:	8e e0       	ldi	r24, 0x0E	; 14
    1cf6:	98 e1       	ldi	r25, 0x18	; 24
    1cf8:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    1cfc:	8f e3       	ldi	r24, 0x3F	; 63
    1cfe:	98 e1       	ldi	r25, 0x18	; 24
    1d00:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <pxDelayedTaskList+0x1>
    1d04:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <pxDelayedTaskList>
    1d08:	84 e3       	ldi	r24, 0x34	; 52
    1d0a:	98 e1       	ldi	r25, 0x18	; 24
    1d0c:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <pxOverflowDelayedTaskList+0x1>
    1d10:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <pxOverflowDelayedTaskList>
    1d14:	10 c0       	rjmp	.+32     	; 0x1d36 <xTaskCreate+0x1c4>
    1d16:	80 91 07 18 	lds	r24, 0x1807	; 0x801807 <xSchedulerRunning>
    1d1a:	81 11       	cpse	r24, r1
    1d1c:	0c c0       	rjmp	.+24     	; 0x1d36 <xTaskCreate+0x1c4>
    1d1e:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    1d22:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1d26:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d2a:	89 17       	cp	r24, r25
    1d2c:	20 f0       	brcs	.+8      	; 0x1d36 <xTaskCreate+0x1c4>
    1d2e:	d0 93 77 18 	sts	0x1877, r29	; 0x801877 <pxCurrentTCB+0x1>
    1d32:	c0 93 76 18 	sts	0x1876, r28	; 0x801876 <pxCurrentTCB>
    1d36:	80 91 03 18 	lds	r24, 0x1803	; 0x801803 <uxTaskNumber>
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	80 93 03 18 	sts	0x1803, r24	; 0x801803 <uxTaskNumber>
    1d40:	8d a3       	std	Y+37, r24	; 0x25
    1d42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d44:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    1d48:	98 17       	cp	r25, r24
    1d4a:	10 f4       	brcc	.+4      	; 0x1d50 <xTaskCreate+0x1de>
    1d4c:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    1d50:	fb e0       	ldi	r31, 0x0B	; 11
    1d52:	8f 9f       	mul	r24, r31
    1d54:	c0 01       	movw	r24, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	b6 01       	movw	r22, r12
    1d5a:	86 5b       	subi	r24, 0xB6	; 182
    1d5c:	97 4e       	sbci	r25, 0xE7	; 231
    1d5e:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	80 91 07 18 	lds	r24, 0x1807	; 0x801807 <xSchedulerRunning>
    1d6a:	88 23       	and	r24, r24
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <xTaskCreate+0x214>
    1d6e:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    1d72:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1d76:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d7a:	98 17       	cp	r25, r24
    1d7c:	30 f4       	brcc	.+12     	; 0x1d8a <xTaskCreate+0x218>
    1d7e:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	05 c0       	rjmp	.+10     	; 0x1d90 <xTaskCreate+0x21e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <xTaskCreate+0x21e>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <xTaskCreate+0x21e>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	bf 90       	pop	r11
    1da0:	af 90       	pop	r10
    1da2:	9f 90       	pop	r9
    1da4:	8f 90       	pop	r8
    1da6:	7f 90       	pop	r7
    1da8:	6f 90       	pop	r6
    1daa:	5f 90       	pop	r5
    1dac:	4f 90       	pop	r4
    1dae:	08 95       	ret

00001db0 <vTaskStartScheduler>:
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	0f 2e       	mov	r0, r31
    1db8:	fd ef       	ldi	r31, 0xFD	; 253
    1dba:	ef 2e       	mov	r14, r31
    1dbc:	f7 e1       	ldi	r31, 0x17	; 23
    1dbe:	ff 2e       	mov	r15, r31
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	00 e0       	ldi	r16, 0x00	; 0
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 ec       	ldi	r20, 0xC0	; 192
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	66 e1       	ldi	r22, 0x16	; 22
    1dce:	74 e0       	ldi	r23, 0x04	; 4
    1dd0:	8d ec       	ldi	r24, 0xCD	; 205
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	ce de       	rcall	.-612    	; 0x1b72 <xTaskCreate>
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	19 f5       	brne	.+70     	; 0x1e20 <vTaskStartScheduler+0x70>
    1dda:	de d5       	rcall	.+3004   	; 0x2998 <xTimerCreateTimerTask>
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	01 f5       	brne	.+64     	; 0x1e20 <vTaskStartScheduler+0x70>
    1de0:	f8 94       	cli
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	9f ef       	ldi	r25, 0xFF	; 255
    1de6:	dc 01       	movw	r26, r24
    1de8:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <xNextTaskUnblockTime>
    1dec:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <xNextTaskUnblockTime+0x1>
    1df0:	a0 93 01 18 	sts	0x1801, r26	; 0x801801 <xNextTaskUnblockTime+0x2>
    1df4:	b0 93 02 18 	sts	0x1802, r27	; 0x801802 <xNextTaskUnblockTime+0x3>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 07 18 	sts	0x1807, r24	; 0x801807 <xSchedulerRunning>
    1dfe:	10 92 09 18 	sts	0x1809, r1	; 0x801809 <xTickCount>
    1e02:	10 92 0a 18 	sts	0x180A, r1	; 0x80180a <xTickCount+0x1>
    1e06:	10 92 0b 18 	sts	0x180B, r1	; 0x80180b <xTickCount+0x2>
    1e0a:	10 92 0c 18 	sts	0x180C, r1	; 0x80180c <xTickCount+0x3>
    1e0e:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    1e12:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1e16:	81 a5       	ldd	r24, Z+41	; 0x29
    1e18:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <task_switch_in>
    1e1c:	0e 94 4c 06 	call	0xc98	; 0xc98 <xPortStartScheduler>
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	08 95       	ret

00001e28 <vTaskSuspendAll>:
    1e28:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	80 93 fc 17 	sts	0x17FC, r24	; 0x8017fc <uxSchedulerSuspended>
    1e32:	08 95       	ret

00001e34 <xTaskGetTickCount>:
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	0f 92       	push	r0
    1e3a:	60 91 09 18 	lds	r22, 0x1809	; 0x801809 <xTickCount>
    1e3e:	70 91 0a 18 	lds	r23, 0x180A	; 0x80180a <xTickCount+0x1>
    1e42:	80 91 0b 18 	lds	r24, 0x180B	; 0x80180b <xTickCount+0x2>
    1e46:	90 91 0c 18 	lds	r25, 0x180C	; 0x80180c <xTickCount+0x3>
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	08 95       	ret

00001e50 <xTaskIncrementTick>:
    1e50:	9f 92       	push	r9
    1e52:	af 92       	push	r10
    1e54:	bf 92       	push	r11
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	ad c0       	rjmp	.+346    	; 0x1fc8 <xTaskIncrementTick+0x178>
    1e6e:	c0 90 09 18 	lds	r12, 0x1809	; 0x801809 <xTickCount>
    1e72:	d0 90 0a 18 	lds	r13, 0x180A	; 0x80180a <xTickCount+0x1>
    1e76:	e0 90 0b 18 	lds	r14, 0x180B	; 0x80180b <xTickCount+0x2>
    1e7a:	f0 90 0c 18 	lds	r15, 0x180C	; 0x80180c <xTickCount+0x3>
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	c8 1a       	sub	r12, r24
    1e82:	d8 0a       	sbc	r13, r24
    1e84:	e8 0a       	sbc	r14, r24
    1e86:	f8 0a       	sbc	r15, r24
    1e88:	c0 92 09 18 	sts	0x1809, r12	; 0x801809 <xTickCount>
    1e8c:	d0 92 0a 18 	sts	0x180A, r13	; 0x80180a <xTickCount+0x1>
    1e90:	e0 92 0b 18 	sts	0x180B, r14	; 0x80180b <xTickCount+0x2>
    1e94:	f0 92 0c 18 	sts	0x180C, r15	; 0x80180c <xTickCount+0x3>
    1e98:	c1 14       	cp	r12, r1
    1e9a:	d1 04       	cpc	r13, r1
    1e9c:	e1 04       	cpc	r14, r1
    1e9e:	f1 04       	cpc	r15, r1
    1ea0:	b1 f4       	brne	.+44     	; 0x1ece <xTaskIncrementTick+0x7e>
    1ea2:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <pxDelayedTaskList>
    1ea6:	90 91 33 18 	lds	r25, 0x1833	; 0x801833 <pxDelayedTaskList+0x1>
    1eaa:	20 91 30 18 	lds	r18, 0x1830	; 0x801830 <pxOverflowDelayedTaskList>
    1eae:	30 91 31 18 	lds	r19, 0x1831	; 0x801831 <pxOverflowDelayedTaskList+0x1>
    1eb2:	30 93 33 18 	sts	0x1833, r19	; 0x801833 <pxDelayedTaskList+0x1>
    1eb6:	20 93 32 18 	sts	0x1832, r18	; 0x801832 <pxDelayedTaskList>
    1eba:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <pxOverflowDelayedTaskList+0x1>
    1ebe:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <pxOverflowDelayedTaskList>
    1ec2:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <xNumOfOverflows>
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	80 93 04 18 	sts	0x1804, r24	; 0x801804 <xNumOfOverflows>
    1ecc:	b2 dd       	rcall	.-1180   	; 0x1a32 <prvResetNextTaskUnblockTime>
    1ece:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <xNextTaskUnblockTime>
    1ed2:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <xNextTaskUnblockTime+0x1>
    1ed6:	a0 91 01 18 	lds	r26, 0x1801	; 0x801801 <xNextTaskUnblockTime+0x2>
    1eda:	b0 91 02 18 	lds	r27, 0x1802	; 0x801802 <xNextTaskUnblockTime+0x3>
    1ede:	c8 16       	cp	r12, r24
    1ee0:	d9 06       	cpc	r13, r25
    1ee2:	ea 06       	cpc	r14, r26
    1ee4:	fb 06       	cpc	r15, r27
    1ee6:	10 f4       	brcc	.+4      	; 0x1eec <xTaskIncrementTick+0x9c>
    1ee8:	b1 2c       	mov	r11, r1
    1eea:	5d c0       	rjmp	.+186    	; 0x1fa6 <xTaskIncrementTick+0x156>
    1eec:	b1 2c       	mov	r11, r1
    1eee:	0f 2e       	mov	r0, r31
    1ef0:	fb e0       	ldi	r31, 0x0B	; 11
    1ef2:	af 2e       	mov	r10, r31
    1ef4:	f0 2d       	mov	r31, r0
    1ef6:	99 24       	eor	r9, r9
    1ef8:	93 94       	inc	r9
    1efa:	e0 91 32 18 	lds	r30, 0x1832	; 0x801832 <pxDelayedTaskList>
    1efe:	f0 91 33 18 	lds	r31, 0x1833	; 0x801833 <pxDelayedTaskList+0x1>
    1f02:	80 81       	ld	r24, Z
    1f04:	81 11       	cpse	r24, r1
    1f06:	0c c0       	rjmp	.+24     	; 0x1f20 <xTaskIncrementTick+0xd0>
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	9f ef       	ldi	r25, 0xFF	; 255
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <xNextTaskUnblockTime>
    1f12:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <xNextTaskUnblockTime+0x1>
    1f16:	a0 93 01 18 	sts	0x1801, r26	; 0x801801 <xNextTaskUnblockTime+0x2>
    1f1a:	b0 93 02 18 	sts	0x1802, r27	; 0x801802 <xNextTaskUnblockTime+0x3>
    1f1e:	43 c0       	rjmp	.+134    	; 0x1fa6 <xTaskIncrementTick+0x156>
    1f20:	e0 91 32 18 	lds	r30, 0x1832	; 0x801832 <pxDelayedTaskList>
    1f24:	f0 91 33 18 	lds	r31, 0x1833	; 0x801833 <pxDelayedTaskList+0x1>
    1f28:	07 80       	ldd	r0, Z+7	; 0x07
    1f2a:	f0 85       	ldd	r31, Z+8	; 0x08
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	c0 85       	ldd	r28, Z+8	; 0x08
    1f30:	d1 85       	ldd	r29, Z+9	; 0x09
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	ac 81       	ldd	r26, Y+4	; 0x04
    1f38:	bd 81       	ldd	r27, Y+5	; 0x05
    1f3a:	c8 16       	cp	r12, r24
    1f3c:	d9 06       	cpc	r13, r25
    1f3e:	ea 06       	cpc	r14, r26
    1f40:	fb 06       	cpc	r15, r27
    1f42:	48 f4       	brcc	.+18     	; 0x1f56 <xTaskIncrementTick+0x106>
    1f44:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <xNextTaskUnblockTime>
    1f48:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <xNextTaskUnblockTime+0x1>
    1f4c:	a0 93 01 18 	sts	0x1801, r26	; 0x801801 <xNextTaskUnblockTime+0x2>
    1f50:	b0 93 02 18 	sts	0x1802, r27	; 0x801802 <xNextTaskUnblockTime+0x3>
    1f54:	28 c0       	rjmp	.+80     	; 0x1fa6 <xTaskIncrementTick+0x156>
    1f56:	8e 01       	movw	r16, r28
    1f58:	0e 5f       	subi	r16, 0xFE	; 254
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    1f62:	88 8d       	ldd	r24, Y+24	; 0x18
    1f64:	99 8d       	ldd	r25, Y+25	; 0x19
    1f66:	89 2b       	or	r24, r25
    1f68:	21 f0       	breq	.+8      	; 0x1f72 <xTaskIncrementTick+0x122>
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	0e 96       	adiw	r24, 0x0e	; 14
    1f6e:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    1f72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f74:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    1f78:	98 17       	cp	r25, r24
    1f7a:	10 f4       	brcc	.+4      	; 0x1f80 <xTaskIncrementTick+0x130>
    1f7c:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    1f80:	a8 9e       	mul	r10, r24
    1f82:	c0 01       	movw	r24, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	b8 01       	movw	r22, r16
    1f88:	86 5b       	subi	r24, 0xB6	; 182
    1f8a:	97 4e       	sbci	r25, 0xE7	; 231
    1f8c:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    1f90:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    1f94:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1f98:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f9c:	98 17       	cp	r25, r24
    1f9e:	08 f4       	brcc	.+2      	; 0x1fa2 <xTaskIncrementTick+0x152>
    1fa0:	ac cf       	rjmp	.-168    	; 0x1efa <xTaskIncrementTick+0xaa>
    1fa2:	b9 2c       	mov	r11, r9
    1fa4:	aa cf       	rjmp	.-172    	; 0x1efa <xTaskIncrementTick+0xaa>
    1fa6:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    1faa:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    1fae:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1fb0:	8b e0       	ldi	r24, 0x0B	; 11
    1fb2:	e8 9f       	mul	r30, r24
    1fb4:	f0 01       	movw	r30, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	e6 5b       	subi	r30, 0xB6	; 182
    1fba:	f7 4e       	sbci	r31, 0xE7	; 231
    1fbc:	80 81       	ld	r24, Z
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	48 f0       	brcs	.+18     	; 0x1fd4 <xTaskIncrementTick+0x184>
    1fc2:	bb 24       	eor	r11, r11
    1fc4:	b3 94       	inc	r11
    1fc6:	06 c0       	rjmp	.+12     	; 0x1fd4 <xTaskIncrementTick+0x184>
    1fc8:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <uxPendedTicks>
    1fcc:	8f 5f       	subi	r24, 0xFF	; 255
    1fce:	80 93 06 18 	sts	0x1806, r24	; 0x801806 <uxPendedTicks>
    1fd2:	b1 2c       	mov	r11, r1
    1fd4:	80 91 05 18 	lds	r24, 0x1805	; 0x801805 <xYieldPending>
    1fd8:	88 23       	and	r24, r24
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <xTaskIncrementTick+0x190>
    1fdc:	bb 24       	eor	r11, r11
    1fde:	b3 94       	inc	r11
    1fe0:	8b 2d       	mov	r24, r11
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	08 95       	ret

00001ffa <xTaskResumeAll>:
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	0f 92       	push	r0
    2010:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    2014:	81 50       	subi	r24, 0x01	; 1
    2016:	80 93 fc 17 	sts	0x17FC, r24	; 0x8017fc <uxSchedulerSuspended>
    201a:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    201e:	81 11       	cpse	r24, r1
    2020:	5a c0       	rjmp	.+180    	; 0x20d6 <xTaskResumeAll+0xdc>
    2022:	80 91 0d 18 	lds	r24, 0x180D	; 0x80180d <uxCurrentNumberOfTasks>
    2026:	81 11       	cpse	r24, r1
    2028:	2c c0       	rjmp	.+88     	; 0x2082 <xTaskResumeAll+0x88>
    202a:	58 c0       	rjmp	.+176    	; 0x20dc <xTaskResumeAll+0xe2>
    202c:	d7 01       	movw	r26, r14
    202e:	17 96       	adiw	r26, 0x07	; 7
    2030:	ed 91       	ld	r30, X+
    2032:	fc 91       	ld	r31, X
    2034:	18 97       	sbiw	r26, 0x08	; 8
    2036:	c0 85       	ldd	r28, Z+8	; 0x08
    2038:	d1 85       	ldd	r29, Z+9	; 0x09
    203a:	ce 01       	movw	r24, r28
    203c:	0e 96       	adiw	r24, 0x0e	; 14
    203e:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    2042:	8e 01       	movw	r16, r28
    2044:	0e 5f       	subi	r16, 0xFE	; 254
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	c8 01       	movw	r24, r16
    204a:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    204e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2050:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    2054:	98 17       	cp	r25, r24
    2056:	10 f4       	brcc	.+4      	; 0x205c <xTaskResumeAll+0x62>
    2058:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    205c:	d8 9e       	mul	r13, r24
    205e:	c0 01       	movw	r24, r0
    2060:	11 24       	eor	r1, r1
    2062:	b8 01       	movw	r22, r16
    2064:	86 5b       	subi	r24, 0xB6	; 182
    2066:	97 4e       	sbci	r25, 0xE7	; 231
    2068:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    206c:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    2070:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2074:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2076:	82 8d       	ldd	r24, Z+26	; 0x1a
    2078:	98 17       	cp	r25, r24
    207a:	88 f0       	brcs	.+34     	; 0x209e <xTaskResumeAll+0xa4>
    207c:	c0 92 05 18 	sts	0x1805, r12	; 0x801805 <xYieldPending>
    2080:	0e c0       	rjmp	.+28     	; 0x209e <xTaskResumeAll+0xa4>
    2082:	c0 e0       	ldi	r28, 0x00	; 0
    2084:	d0 e0       	ldi	r29, 0x00	; 0
    2086:	0f 2e       	mov	r0, r31
    2088:	f5 e2       	ldi	r31, 0x25	; 37
    208a:	ef 2e       	mov	r14, r31
    208c:	f8 e1       	ldi	r31, 0x18	; 24
    208e:	ff 2e       	mov	r15, r31
    2090:	f0 2d       	mov	r31, r0
    2092:	0f 2e       	mov	r0, r31
    2094:	fb e0       	ldi	r31, 0x0B	; 11
    2096:	df 2e       	mov	r13, r31
    2098:	f0 2d       	mov	r31, r0
    209a:	cc 24       	eor	r12, r12
    209c:	c3 94       	inc	r12
    209e:	f7 01       	movw	r30, r14
    20a0:	80 81       	ld	r24, Z
    20a2:	81 11       	cpse	r24, r1
    20a4:	c3 cf       	rjmp	.-122    	; 0x202c <xTaskResumeAll+0x32>
    20a6:	cd 2b       	or	r28, r29
    20a8:	09 f0       	breq	.+2      	; 0x20ac <xTaskResumeAll+0xb2>
    20aa:	c3 dc       	rcall	.-1658   	; 0x1a32 <prvResetNextTaskUnblockTime>
    20ac:	c0 91 06 18 	lds	r28, 0x1806	; 0x801806 <uxPendedTicks>
    20b0:	cc 23       	and	r28, r28
    20b2:	49 f0       	breq	.+18     	; 0x20c6 <xTaskResumeAll+0xcc>
    20b4:	d1 e0       	ldi	r29, 0x01	; 1
    20b6:	cc de       	rcall	.-616    	; 0x1e50 <xTaskIncrementTick>
    20b8:	81 11       	cpse	r24, r1
    20ba:	d0 93 05 18 	sts	0x1805, r29	; 0x801805 <xYieldPending>
    20be:	c1 50       	subi	r28, 0x01	; 1
    20c0:	d1 f7       	brne	.-12     	; 0x20b6 <xTaskResumeAll+0xbc>
    20c2:	10 92 06 18 	sts	0x1806, r1	; 0x801806 <uxPendedTicks>
    20c6:	80 91 05 18 	lds	r24, 0x1805	; 0x801805 <xYieldPending>
    20ca:	88 23       	and	r24, r24
    20cc:	31 f0       	breq	.+12     	; 0x20da <xTaskResumeAll+0xe0>
    20ce:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <xTaskResumeAll+0xe2>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <xTaskResumeAll+0xe2>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	0f 90       	pop	r0
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	08 95       	ret

000020f2 <vTaskDelayUntil>:
    20f2:	cf 92       	push	r12
    20f4:	df 92       	push	r13
    20f6:	ef 92       	push	r14
    20f8:	ff 92       	push	r15
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	ec 01       	movw	r28, r24
    2104:	6a 01       	movw	r12, r20
    2106:	7b 01       	movw	r14, r22
    2108:	8f de       	rcall	.-738    	; 0x1e28 <vTaskSuspendAll>
    210a:	00 91 09 18 	lds	r16, 0x1809	; 0x801809 <xTickCount>
    210e:	10 91 0a 18 	lds	r17, 0x180A	; 0x80180a <xTickCount+0x1>
    2112:	20 91 0b 18 	lds	r18, 0x180B	; 0x80180b <xTickCount+0x2>
    2116:	30 91 0c 18 	lds	r19, 0x180C	; 0x80180c <xTickCount+0x3>
    211a:	88 81       	ld	r24, Y
    211c:	99 81       	ldd	r25, Y+1	; 0x01
    211e:	aa 81       	ldd	r26, Y+2	; 0x02
    2120:	bb 81       	ldd	r27, Y+3	; 0x03
    2122:	ac 01       	movw	r20, r24
    2124:	bd 01       	movw	r22, r26
    2126:	4c 0d       	add	r20, r12
    2128:	5d 1d       	adc	r21, r13
    212a:	6e 1d       	adc	r22, r14
    212c:	7f 1d       	adc	r23, r15
    212e:	08 17       	cp	r16, r24
    2130:	19 07       	cpc	r17, r25
    2132:	2a 07       	cpc	r18, r26
    2134:	3b 07       	cpc	r19, r27
    2136:	78 f4       	brcc	.+30     	; 0x2156 <vTaskDelayUntil+0x64>
    2138:	48 17       	cp	r20, r24
    213a:	59 07       	cpc	r21, r25
    213c:	6a 07       	cpc	r22, r26
    213e:	7b 07       	cpc	r23, r27
    2140:	40 f5       	brcc	.+80     	; 0x2192 <vTaskDelayUntil+0xa0>
    2142:	48 83       	st	Y, r20
    2144:	59 83       	std	Y+1, r21	; 0x01
    2146:	6a 83       	std	Y+2, r22	; 0x02
    2148:	7b 83       	std	Y+3, r23	; 0x03
    214a:	04 17       	cp	r16, r20
    214c:	15 07       	cpc	r17, r21
    214e:	26 07       	cpc	r18, r22
    2150:	37 07       	cpc	r19, r23
    2152:	a0 f4       	brcc	.+40     	; 0x217c <vTaskDelayUntil+0x8a>
    2154:	0b c0       	rjmp	.+22     	; 0x216c <vTaskDelayUntil+0x7a>
    2156:	48 17       	cp	r20, r24
    2158:	59 07       	cpc	r21, r25
    215a:	6a 07       	cpc	r22, r26
    215c:	7b 07       	cpc	r23, r27
    215e:	a0 f0       	brcs	.+40     	; 0x2188 <vTaskDelayUntil+0x96>
    2160:	04 17       	cp	r16, r20
    2162:	15 07       	cpc	r17, r21
    2164:	26 07       	cpc	r18, r22
    2166:	37 07       	cpc	r19, r23
    2168:	78 f0       	brcs	.+30     	; 0x2188 <vTaskDelayUntil+0x96>
    216a:	13 c0       	rjmp	.+38     	; 0x2192 <vTaskDelayUntil+0xa0>
    216c:	cb 01       	movw	r24, r22
    216e:	ba 01       	movw	r22, r20
    2170:	60 1b       	sub	r22, r16
    2172:	71 0b       	sbc	r23, r17
    2174:	82 0b       	sbc	r24, r18
    2176:	93 0b       	sbc	r25, r19
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	85 dc       	rcall	.-1782   	; 0x1a86 <prvAddCurrentTaskToDelayedList>
    217c:	3e df       	rcall	.-388    	; 0x1ffa <xTaskResumeAll>
    217e:	81 11       	cpse	r24, r1
    2180:	0d c0       	rjmp	.+26     	; 0x219c <vTaskDelayUntil+0xaa>
    2182:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    2186:	0a c0       	rjmp	.+20     	; 0x219c <vTaskDelayUntil+0xaa>
    2188:	48 83       	st	Y, r20
    218a:	59 83       	std	Y+1, r21	; 0x01
    218c:	6a 83       	std	Y+2, r22	; 0x02
    218e:	7b 83       	std	Y+3, r23	; 0x03
    2190:	ed cf       	rjmp	.-38     	; 0x216c <vTaskDelayUntil+0x7a>
    2192:	48 83       	st	Y, r20
    2194:	59 83       	std	Y+1, r21	; 0x01
    2196:	6a 83       	std	Y+2, r22	; 0x02
    2198:	7b 83       	std	Y+3, r23	; 0x03
    219a:	f0 cf       	rjmp	.-32     	; 0x217c <vTaskDelayUntil+0x8a>
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	df 90       	pop	r13
    21aa:	cf 90       	pop	r12
    21ac:	08 95       	ret

000021ae <vTaskDelay>:
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	6b 01       	movw	r12, r22
    21b8:	7c 01       	movw	r14, r24
    21ba:	67 2b       	or	r22, r23
    21bc:	68 2b       	or	r22, r24
    21be:	69 2b       	or	r22, r25
    21c0:	41 f0       	breq	.+16     	; 0x21d2 <vTaskDelay+0x24>
    21c2:	32 de       	rcall	.-924    	; 0x1e28 <vTaskSuspendAll>
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	c7 01       	movw	r24, r14
    21c8:	b6 01       	movw	r22, r12
    21ca:	5d dc       	rcall	.-1862   	; 0x1a86 <prvAddCurrentTaskToDelayedList>
    21cc:	16 df       	rcall	.-468    	; 0x1ffa <xTaskResumeAll>
    21ce:	81 11       	cpse	r24, r1
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <vTaskDelay+0x28>
    21d2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	08 95       	ret

000021e0 <vTaskSwitchContext>:
    21e0:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    21e4:	88 23       	and	r24, r24
    21e6:	21 f0       	breq	.+8      	; 0x21f0 <vTaskSwitchContext+0x10>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <xYieldPending>
    21ee:	08 95       	ret
    21f0:	10 92 05 18 	sts	0x1805, r1	; 0x801805 <xYieldPending>
    21f4:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    21f8:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    21fc:	81 a5       	ldd	r24, Z+41	; 0x29
    21fe:	0e 94 03 04 	call	0x806	; 0x806 <task_switch_out>
    2202:	a0 91 76 18 	lds	r26, 0x1876	; 0x801876 <pxCurrentTCB>
    2206:	b0 91 77 18 	lds	r27, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    220a:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    220e:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2212:	2d 91       	ld	r18, X+
    2214:	3c 91       	ld	r19, X
    2216:	83 8d       	ldd	r24, Z+27	; 0x1b
    2218:	94 8d       	ldd	r25, Z+28	; 0x1c
    221a:	82 17       	cp	r24, r18
    221c:	93 07       	cpc	r25, r19
    221e:	58 f0       	brcs	.+22     	; 0x2236 <__stack+0x37>
    2220:	60 91 76 18 	lds	r22, 0x1876	; 0x801876 <pxCurrentTCB>
    2224:	70 91 77 18 	lds	r23, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2228:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <pxCurrentTCB>
    222c:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2230:	63 5e       	subi	r22, 0xE3	; 227
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	d3 d4       	rcall	.+2470   	; 0x2bdc <vApplicationStackOverflowHook>
    2236:	80 91 08 18 	lds	r24, 0x1808	; 0x801808 <uxTopReadyPriority>
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	9b e0       	ldi	r25, 0x0B	; 11
    2240:	89 9f       	mul	r24, r25
    2242:	f0 01       	movw	r30, r0
    2244:	11 24       	eor	r1, r1
    2246:	e6 5b       	subi	r30, 0xB6	; 182
    2248:	f7 4e       	sbci	r31, 0xE7	; 231
    224a:	90 81       	ld	r25, Z
    224c:	91 11       	cpse	r25, r1
    224e:	0e c0       	rjmp	.+28     	; 0x226c <__stack+0x6d>
    2250:	4b e0       	ldi	r20, 0x0B	; 11
    2252:	81 50       	subi	r24, 0x01	; 1
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	42 9f       	mul	r20, r18
    225a:	f0 01       	movw	r30, r0
    225c:	43 9f       	mul	r20, r19
    225e:	f0 0d       	add	r31, r0
    2260:	11 24       	eor	r1, r1
    2262:	e6 5b       	subi	r30, 0xB6	; 182
    2264:	f7 4e       	sbci	r31, 0xE7	; 231
    2266:	90 81       	ld	r25, Z
    2268:	99 23       	and	r25, r25
    226a:	99 f3       	breq	.-26     	; 0x2252 <__stack+0x53>
    226c:	9b e0       	ldi	r25, 0x0B	; 11
    226e:	92 9f       	mul	r25, r18
    2270:	a0 01       	movw	r20, r0
    2272:	93 9f       	mul	r25, r19
    2274:	50 0d       	add	r21, r0
    2276:	11 24       	eor	r1, r1
    2278:	da 01       	movw	r26, r20
    227a:	a6 5b       	subi	r26, 0xB6	; 182
    227c:	b7 4e       	sbci	r27, 0xE7	; 231
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	ed 91       	ld	r30, X+
    2282:	fc 91       	ld	r31, X
    2284:	12 97       	sbiw	r26, 0x02	; 2
    2286:	04 80       	ldd	r0, Z+4	; 0x04
    2288:	f5 81       	ldd	r31, Z+5	; 0x05
    228a:	e0 2d       	mov	r30, r0
    228c:	12 96       	adiw	r26, 0x02	; 2
    228e:	fc 93       	st	X, r31
    2290:	ee 93       	st	-X, r30
    2292:	11 97       	sbiw	r26, 0x01	; 1
    2294:	43 5b       	subi	r20, 0xB3	; 179
    2296:	57 4e       	sbci	r21, 0xE7	; 231
    2298:	e4 17       	cp	r30, r20
    229a:	f5 07       	cpc	r31, r21
    229c:	29 f4       	brne	.+10     	; 0x22a8 <__stack+0xa9>
    229e:	44 81       	ldd	r20, Z+4	; 0x04
    22a0:	55 81       	ldd	r21, Z+5	; 0x05
    22a2:	fd 01       	movw	r30, r26
    22a4:	52 83       	std	Z+2, r21	; 0x02
    22a6:	41 83       	std	Z+1, r20	; 0x01
    22a8:	9b e0       	ldi	r25, 0x0B	; 11
    22aa:	92 9f       	mul	r25, r18
    22ac:	f0 01       	movw	r30, r0
    22ae:	93 9f       	mul	r25, r19
    22b0:	f0 0d       	add	r31, r0
    22b2:	11 24       	eor	r1, r1
    22b4:	e6 5b       	subi	r30, 0xB6	; 182
    22b6:	f7 4e       	sbci	r31, 0xE7	; 231
    22b8:	01 80       	ldd	r0, Z+1	; 0x01
    22ba:	f2 81       	ldd	r31, Z+2	; 0x02
    22bc:	e0 2d       	mov	r30, r0
    22be:	20 85       	ldd	r18, Z+8	; 0x08
    22c0:	31 85       	ldd	r19, Z+9	; 0x09
    22c2:	30 93 77 18 	sts	0x1877, r19	; 0x801877 <pxCurrentTCB+0x1>
    22c6:	20 93 76 18 	sts	0x1876, r18	; 0x801876 <pxCurrentTCB>
    22ca:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    22ce:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    22d2:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    22d6:	81 a5       	ldd	r24, Z+41	; 0x29
    22d8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <task_switch_in>
    22dc:	08 95       	ret

000022de <vTaskPlaceOnEventList>:
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	6a 01       	movw	r12, r20
    22e8:	7b 01       	movw	r14, r22
    22ea:	60 91 76 18 	lds	r22, 0x1876	; 0x801876 <pxCurrentTCB>
    22ee:	70 91 77 18 	lds	r23, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    22f2:	62 5f       	subi	r22, 0xF2	; 242
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	0e 94 76 05 	call	0xaec	; 0xaec <vListInsert>
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	c7 01       	movw	r24, r14
    22fe:	b6 01       	movw	r22, r12
    2300:	c2 db       	rcall	.-2172   	; 0x1a86 <prvAddCurrentTaskToDelayedList>
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	08 95       	ret

0000230c <vTaskPlaceOnEventListRestricted>:
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	cf 93       	push	r28
    2316:	6a 01       	movw	r12, r20
    2318:	7b 01       	movw	r14, r22
    231a:	c2 2f       	mov	r28, r18
    231c:	60 91 76 18 	lds	r22, 0x1876	; 0x801876 <pxCurrentTCB>
    2320:	70 91 77 18 	lds	r23, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2324:	62 5f       	subi	r22, 0xF2	; 242
    2326:	7f 4f       	sbci	r23, 0xFF	; 255
    2328:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    232c:	cc 23       	and	r28, r28
    232e:	21 f0       	breq	.+8      	; 0x2338 <vTaskPlaceOnEventListRestricted+0x2c>
    2330:	cc 24       	eor	r12, r12
    2332:	ca 94       	dec	r12
    2334:	dc 2c       	mov	r13, r12
    2336:	76 01       	movw	r14, r12
    2338:	4c 2f       	mov	r20, r28
    233a:	c7 01       	movw	r24, r14
    233c:	b6 01       	movw	r22, r12
    233e:	a3 db       	rcall	.-2234   	; 0x1a86 <prvAddCurrentTaskToDelayedList>
    2340:	cf 91       	pop	r28
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	df 90       	pop	r13
    2348:	cf 90       	pop	r12
    234a:	08 95       	ret

0000234c <xTaskRemoveFromEventList>:
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	dc 01       	movw	r26, r24
    2356:	17 96       	adiw	r26, 0x07	; 7
    2358:	ed 91       	ld	r30, X+
    235a:	fc 91       	ld	r31, X
    235c:	18 97       	sbiw	r26, 0x08	; 8
    235e:	c0 85       	ldd	r28, Z+8	; 0x08
    2360:	d1 85       	ldd	r29, Z+9	; 0x09
    2362:	8e 01       	movw	r16, r28
    2364:	02 5f       	subi	r16, 0xF2	; 242
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	c8 01       	movw	r24, r16
    236a:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    236e:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    2372:	81 11       	cpse	r24, r1
    2374:	16 c0       	rjmp	.+44     	; 0x23a2 <xTaskRemoveFromEventList+0x56>
    2376:	0c 50       	subi	r16, 0x0C	; 12
    2378:	11 09       	sbc	r17, r1
    237a:	c8 01       	movw	r24, r16
    237c:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    2380:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2382:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    2386:	98 17       	cp	r25, r24
    2388:	10 f4       	brcc	.+4      	; 0x238e <xTaskRemoveFromEventList+0x42>
    238a:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    238e:	bb e0       	ldi	r27, 0x0B	; 11
    2390:	8b 9f       	mul	r24, r27
    2392:	c0 01       	movw	r24, r0
    2394:	11 24       	eor	r1, r1
    2396:	b8 01       	movw	r22, r16
    2398:	86 5b       	subi	r24, 0xB6	; 182
    239a:	97 4e       	sbci	r25, 0xE7	; 231
    239c:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <xTaskRemoveFromEventList+0x60>
    23a2:	b8 01       	movw	r22, r16
    23a4:	85 e2       	ldi	r24, 0x25	; 37
    23a6:	98 e1       	ldi	r25, 0x18	; 24
    23a8:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    23ac:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    23b0:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    23b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    23b8:	89 17       	cp	r24, r25
    23ba:	20 f4       	brcc	.+8      	; 0x23c4 <xTaskRemoveFromEventList+0x78>
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <xYieldPending>
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <xTaskRemoveFromEventList+0x7a>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	08 95       	ret

000023d0 <vTaskSetTimeOutState>:
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	0f 92       	push	r0
    23d6:	20 91 04 18 	lds	r18, 0x1804	; 0x801804 <xNumOfOverflows>
    23da:	fc 01       	movw	r30, r24
    23dc:	20 83       	st	Z, r18
    23de:	40 91 09 18 	lds	r20, 0x1809	; 0x801809 <xTickCount>
    23e2:	50 91 0a 18 	lds	r21, 0x180A	; 0x80180a <xTickCount+0x1>
    23e6:	60 91 0b 18 	lds	r22, 0x180B	; 0x80180b <xTickCount+0x2>
    23ea:	70 91 0c 18 	lds	r23, 0x180C	; 0x80180c <xTickCount+0x3>
    23ee:	41 83       	std	Z+1, r20	; 0x01
    23f0:	52 83       	std	Z+2, r21	; 0x02
    23f2:	63 83       	std	Z+3, r22	; 0x03
    23f4:	74 83       	std	Z+4, r23	; 0x04
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	08 95       	ret

000023fc <vTaskInternalSetTimeOutState>:
    23fc:	20 91 04 18 	lds	r18, 0x1804	; 0x801804 <xNumOfOverflows>
    2400:	fc 01       	movw	r30, r24
    2402:	20 83       	st	Z, r18
    2404:	40 91 09 18 	lds	r20, 0x1809	; 0x801809 <xTickCount>
    2408:	50 91 0a 18 	lds	r21, 0x180A	; 0x80180a <xTickCount+0x1>
    240c:	60 91 0b 18 	lds	r22, 0x180B	; 0x80180b <xTickCount+0x2>
    2410:	70 91 0c 18 	lds	r23, 0x180C	; 0x80180c <xTickCount+0x3>
    2414:	41 83       	std	Z+1, r20	; 0x01
    2416:	52 83       	std	Z+2, r21	; 0x02
    2418:	63 83       	std	Z+3, r22	; 0x03
    241a:	74 83       	std	Z+4, r23	; 0x04
    241c:	08 95       	ret

0000241e <xTaskCheckForTimeOut>:
    241e:	cf 92       	push	r12
    2420:	df 92       	push	r13
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	fb 01       	movw	r30, r22
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	0f 92       	push	r0
    2436:	40 91 09 18 	lds	r20, 0x1809	; 0x801809 <xTickCount>
    243a:	50 91 0a 18 	lds	r21, 0x180A	; 0x80180a <xTickCount+0x1>
    243e:	60 91 0b 18 	lds	r22, 0x180B	; 0x80180b <xTickCount+0x2>
    2442:	70 91 0c 18 	lds	r23, 0x180C	; 0x80180c <xTickCount+0x3>
    2446:	00 81       	ld	r16, Z
    2448:	11 81       	ldd	r17, Z+1	; 0x01
    244a:	22 81       	ldd	r18, Z+2	; 0x02
    244c:	33 81       	ldd	r19, Z+3	; 0x03
    244e:	0f 3f       	cpi	r16, 0xFF	; 255
    2450:	af ef       	ldi	r26, 0xFF	; 255
    2452:	1a 07       	cpc	r17, r26
    2454:	2a 07       	cpc	r18, r26
    2456:	3a 07       	cpc	r19, r26
    2458:	49 f1       	breq	.+82     	; 0x24ac <xTaskCheckForTimeOut+0x8e>
    245a:	ec 01       	movw	r28, r24
    245c:	c9 80       	ldd	r12, Y+1	; 0x01
    245e:	da 80       	ldd	r13, Y+2	; 0x02
    2460:	eb 80       	ldd	r14, Y+3	; 0x03
    2462:	fc 80       	ldd	r15, Y+4	; 0x04
    2464:	a0 91 04 18 	lds	r26, 0x1804	; 0x801804 <xNumOfOverflows>
    2468:	b8 81       	ld	r27, Y
    246a:	ba 17       	cp	r27, r26
    246c:	29 f0       	breq	.+10     	; 0x2478 <xTaskCheckForTimeOut+0x5a>
    246e:	4c 15       	cp	r20, r12
    2470:	5d 05       	cpc	r21, r13
    2472:	6e 05       	cpc	r22, r14
    2474:	7f 05       	cpc	r23, r15
    2476:	e0 f4       	brcc	.+56     	; 0x24b0 <xTaskCheckForTimeOut+0x92>
    2478:	4c 19       	sub	r20, r12
    247a:	5d 09       	sbc	r21, r13
    247c:	6e 09       	sbc	r22, r14
    247e:	7f 09       	sbc	r23, r15
    2480:	40 17       	cp	r20, r16
    2482:	51 07       	cpc	r21, r17
    2484:	62 07       	cpc	r22, r18
    2486:	73 07       	cpc	r23, r19
    2488:	58 f4       	brcc	.+22     	; 0x24a0 <xTaskCheckForTimeOut+0x82>
    248a:	04 1b       	sub	r16, r20
    248c:	15 0b       	sbc	r17, r21
    248e:	26 0b       	sbc	r18, r22
    2490:	37 0b       	sbc	r19, r23
    2492:	00 83       	st	Z, r16
    2494:	11 83       	std	Z+1, r17	; 0x01
    2496:	22 83       	std	Z+2, r18	; 0x02
    2498:	33 83       	std	Z+3, r19	; 0x03
    249a:	b0 df       	rcall	.-160    	; 0x23fc <vTaskInternalSetTimeOutState>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <xTaskCheckForTimeOut+0x94>
    24a0:	10 82       	st	Z, r1
    24a2:	11 82       	std	Z+1, r1	; 0x01
    24a4:	12 82       	std	Z+2, r1	; 0x02
    24a6:	13 82       	std	Z+3, r1	; 0x03
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <xTaskCheckForTimeOut+0x94>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <xTaskCheckForTimeOut+0x94>
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	08 95       	ret

000024c8 <vTaskMissedYield>:
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <xYieldPending>
    24ce:	08 95       	ret

000024d0 <xTaskGetCurrentTaskHandle>:
    24d0:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <pxCurrentTCB>
    24d4:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    24d8:	08 95       	ret

000024da <xTaskGetSchedulerState>:
    24da:	80 91 07 18 	lds	r24, 0x1807	; 0x801807 <xSchedulerRunning>
    24de:	88 23       	and	r24, r24
    24e0:	31 f0       	breq	.+12     	; 0x24ee <xTaskGetSchedulerState+0x14>
    24e2:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    24e6:	88 23       	and	r24, r24
    24e8:	21 f0       	breq	.+8      	; 0x24f2 <xTaskGetSchedulerState+0x18>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	08 95       	ret
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	08 95       	ret
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	08 95       	ret

000024f6 <xTaskPriorityDisinherit>:
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	fc 01       	movw	r30, r24
    2500:	89 2b       	or	r24, r25
    2502:	79 f1       	breq	.+94     	; 0x2562 <xTaskPriorityDisinherit+0x6c>
    2504:	80 a5       	ldd	r24, Z+40	; 0x28
    2506:	81 50       	subi	r24, 0x01	; 1
    2508:	80 a7       	std	Z+40, r24	; 0x28
    250a:	22 8d       	ldd	r18, Z+26	; 0x1a
    250c:	97 a1       	ldd	r25, Z+39	; 0x27
    250e:	29 17       	cp	r18, r25
    2510:	51 f1       	breq	.+84     	; 0x2566 <xTaskPriorityDisinherit+0x70>
    2512:	81 11       	cpse	r24, r1
    2514:	2a c0       	rjmp	.+84     	; 0x256a <xTaskPriorityDisinherit+0x74>
    2516:	ef 01       	movw	r28, r30
    2518:	8f 01       	movw	r16, r30
    251a:	0e 5f       	subi	r16, 0xFE	; 254
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	c8 01       	movw	r24, r16
    2520:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    2524:	8f a1       	ldd	r24, Y+39	; 0x27
    2526:	8a 8f       	std	Y+26, r24	; 0x1a
    2528:	44 e0       	ldi	r20, 0x04	; 4
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	70 e0       	ldi	r23, 0x00	; 0
    2530:	48 1b       	sub	r20, r24
    2532:	51 09       	sbc	r21, r1
    2534:	61 09       	sbc	r22, r1
    2536:	71 09       	sbc	r23, r1
    2538:	4e 87       	std	Y+14, r20	; 0x0e
    253a:	5f 87       	std	Y+15, r21	; 0x0f
    253c:	68 8b       	std	Y+16, r22	; 0x10
    253e:	79 8b       	std	Y+17, r23	; 0x11
    2540:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    2544:	98 17       	cp	r25, r24
    2546:	10 f4       	brcc	.+4      	; 0x254c <xTaskPriorityDisinherit+0x56>
    2548:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    254c:	2b e0       	ldi	r18, 0x0B	; 11
    254e:	82 9f       	mul	r24, r18
    2550:	c0 01       	movw	r24, r0
    2552:	11 24       	eor	r1, r1
    2554:	b8 01       	movw	r22, r16
    2556:	86 5b       	subi	r24, 0xB6	; 182
    2558:	97 4e       	sbci	r25, 0xE7	; 231
    255a:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	05 c0       	rjmp	.+10     	; 0x256c <xTaskPriorityDisinherit+0x76>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	03 c0       	rjmp	.+6      	; 0x256c <xTaskPriorityDisinherit+0x76>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	01 c0       	rjmp	.+2      	; 0x256c <xTaskPriorityDisinherit+0x76>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	1f 91       	pop	r17
    2572:	0f 91       	pop	r16
    2574:	08 95       	ret

00002576 <xTaskNotifyWait>:
    2576:	4f 92       	push	r4
    2578:	5f 92       	push	r5
    257a:	6f 92       	push	r6
    257c:	7f 92       	push	r7
    257e:	8f 92       	push	r8
    2580:	9f 92       	push	r9
    2582:	af 92       	push	r10
    2584:	bf 92       	push	r11
    2586:	cf 92       	push	r12
    2588:	df 92       	push	r13
    258a:	ef 92       	push	r14
    258c:	ff 92       	push	r15
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	49 01       	movw	r8, r18
    2594:	5a 01       	movw	r10, r20
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	0f 92       	push	r0
    259c:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    25a0:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    25a4:	27 a5       	ldd	r18, Z+47	; 0x2f
    25a6:	22 30       	cpi	r18, 0x02	; 2
    25a8:	39 f1       	breq	.+78     	; 0x25f8 <xTaskNotifyWait+0x82>
    25aa:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    25ae:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    25b2:	43 a4       	ldd	r4, Z+43	; 0x2b
    25b4:	54 a4       	ldd	r5, Z+44	; 0x2c
    25b6:	65 a4       	ldd	r6, Z+45	; 0x2d
    25b8:	76 a4       	ldd	r7, Z+46	; 0x2e
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	80 95       	com	r24
    25c0:	90 95       	com	r25
    25c2:	a0 95       	com	r26
    25c4:	b0 95       	com	r27
    25c6:	84 21       	and	r24, r4
    25c8:	95 21       	and	r25, r5
    25ca:	a6 21       	and	r26, r6
    25cc:	b7 21       	and	r27, r7
    25ce:	83 a7       	std	Z+43, r24	; 0x2b
    25d0:	94 a7       	std	Z+44, r25	; 0x2c
    25d2:	a5 a7       	std	Z+45, r26	; 0x2d
    25d4:	b6 a7       	std	Z+46, r27	; 0x2e
    25d6:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    25da:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	87 a7       	std	Z+47, r24	; 0x2f
    25e2:	c1 14       	cp	r12, r1
    25e4:	d1 04       	cpc	r13, r1
    25e6:	e1 04       	cpc	r14, r1
    25e8:	f1 04       	cpc	r15, r1
    25ea:	31 f0       	breq	.+12     	; 0x25f8 <xTaskNotifyWait+0x82>
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	c7 01       	movw	r24, r14
    25f0:	b6 01       	movw	r22, r12
    25f2:	49 da       	rcall	.-2926   	; 0x1a86 <prvAddCurrentTaskToDelayedList>
    25f4:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	0f 92       	push	r0
    2602:	01 15       	cp	r16, r1
    2604:	11 05       	cpc	r17, r1
    2606:	69 f0       	breq	.+26     	; 0x2622 <xTaskNotifyWait+0xac>
    2608:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    260c:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2610:	83 a5       	ldd	r24, Z+43	; 0x2b
    2612:	94 a5       	ldd	r25, Z+44	; 0x2c
    2614:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2616:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2618:	f8 01       	movw	r30, r16
    261a:	80 83       	st	Z, r24
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	a2 83       	std	Z+2, r26	; 0x02
    2620:	b3 83       	std	Z+3, r27	; 0x03
    2622:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    2626:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    262a:	87 a5       	ldd	r24, Z+47	; 0x2f
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	b1 f4       	brne	.+44     	; 0x265c <xTaskNotifyWait+0xe6>
    2630:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    2634:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2638:	83 a5       	ldd	r24, Z+43	; 0x2b
    263a:	94 a5       	ldd	r25, Z+44	; 0x2c
    263c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    263e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2640:	80 94       	com	r8
    2642:	90 94       	com	r9
    2644:	a0 94       	com	r10
    2646:	b0 94       	com	r11
    2648:	88 22       	and	r8, r24
    264a:	99 22       	and	r9, r25
    264c:	aa 22       	and	r10, r26
    264e:	bb 22       	and	r11, r27
    2650:	83 a6       	std	Z+43, r8	; 0x2b
    2652:	94 a6       	std	Z+44, r9	; 0x2c
    2654:	a5 a6       	std	Z+45, r10	; 0x2d
    2656:	b6 a6       	std	Z+46, r11	; 0x2e
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	01 c0       	rjmp	.+2      	; 0x265e <xTaskNotifyWait+0xe8>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    2662:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2666:	17 a6       	std	Z+47, r1	; 0x2f
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	7f 90       	pop	r7
    2682:	6f 90       	pop	r6
    2684:	5f 90       	pop	r5
    2686:	4f 90       	pop	r4
    2688:	08 95       	ret

0000268a <xTaskGenericNotify>:
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	fc 01       	movw	r30, r24
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	0f 92       	push	r0
    269a:	01 15       	cp	r16, r1
    269c:	11 05       	cpc	r17, r1
    269e:	49 f0       	breq	.+18     	; 0x26b2 <xTaskGenericNotify+0x28>
    26a0:	83 a5       	ldd	r24, Z+43	; 0x2b
    26a2:	94 a5       	ldd	r25, Z+44	; 0x2c
    26a4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    26a6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    26a8:	e8 01       	movw	r28, r16
    26aa:	88 83       	st	Y, r24
    26ac:	99 83       	std	Y+1, r25	; 0x01
    26ae:	aa 83       	std	Y+2, r26	; 0x02
    26b0:	bb 83       	std	Y+3, r27	; 0x03
    26b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	97 a7       	std	Z+47, r25	; 0x2f
    26b8:	22 30       	cpi	r18, 0x02	; 2
    26ba:	b1 f0       	breq	.+44     	; 0x26e8 <xTaskGenericNotify+0x5e>
    26bc:	18 f4       	brcc	.+6      	; 0x26c4 <xTaskGenericNotify+0x3a>
    26be:	21 30       	cpi	r18, 0x01	; 1
    26c0:	31 f0       	breq	.+12     	; 0x26ce <xTaskGenericNotify+0x44>
    26c2:	2a c0       	rjmp	.+84     	; 0x2718 <xTaskGenericNotify+0x8e>
    26c4:	23 30       	cpi	r18, 0x03	; 3
    26c6:	e9 f0       	breq	.+58     	; 0x2702 <xTaskGenericNotify+0x78>
    26c8:	24 30       	cpi	r18, 0x04	; 4
    26ca:	01 f1       	breq	.+64     	; 0x270c <xTaskGenericNotify+0x82>
    26cc:	25 c0       	rjmp	.+74     	; 0x2718 <xTaskGenericNotify+0x8e>
    26ce:	03 a5       	ldd	r16, Z+43	; 0x2b
    26d0:	14 a5       	ldd	r17, Z+44	; 0x2c
    26d2:	25 a5       	ldd	r18, Z+45	; 0x2d
    26d4:	36 a5       	ldd	r19, Z+46	; 0x2e
    26d6:	40 2b       	or	r20, r16
    26d8:	51 2b       	or	r21, r17
    26da:	62 2b       	or	r22, r18
    26dc:	73 2b       	or	r23, r19
    26de:	43 a7       	std	Z+43, r20	; 0x2b
    26e0:	54 a7       	std	Z+44, r21	; 0x2c
    26e2:	65 a7       	std	Z+45, r22	; 0x2d
    26e4:	76 a7       	std	Z+46, r23	; 0x2e
    26e6:	18 c0       	rjmp	.+48     	; 0x2718 <xTaskGenericNotify+0x8e>
    26e8:	43 a5       	ldd	r20, Z+43	; 0x2b
    26ea:	54 a5       	ldd	r21, Z+44	; 0x2c
    26ec:	65 a5       	ldd	r22, Z+45	; 0x2d
    26ee:	76 a5       	ldd	r23, Z+46	; 0x2e
    26f0:	4f 5f       	subi	r20, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255
    26f4:	6f 4f       	sbci	r22, 0xFF	; 255
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	43 a7       	std	Z+43, r20	; 0x2b
    26fa:	54 a7       	std	Z+44, r21	; 0x2c
    26fc:	65 a7       	std	Z+45, r22	; 0x2d
    26fe:	76 a7       	std	Z+46, r23	; 0x2e
    2700:	0b c0       	rjmp	.+22     	; 0x2718 <xTaskGenericNotify+0x8e>
    2702:	43 a7       	std	Z+43, r20	; 0x2b
    2704:	54 a7       	std	Z+44, r21	; 0x2c
    2706:	65 a7       	std	Z+45, r22	; 0x2d
    2708:	76 a7       	std	Z+46, r23	; 0x2e
    270a:	06 c0       	rjmp	.+12     	; 0x2718 <xTaskGenericNotify+0x8e>
    270c:	82 30       	cpi	r24, 0x02	; 2
    270e:	49 f1       	breq	.+82     	; 0x2762 <xTaskGenericNotify+0xd8>
    2710:	43 a7       	std	Z+43, r20	; 0x2b
    2712:	54 a7       	std	Z+44, r21	; 0x2c
    2714:	65 a7       	std	Z+45, r22	; 0x2d
    2716:	76 a7       	std	Z+46, r23	; 0x2e
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	29 f5       	brne	.+74     	; 0x2766 <xTaskGenericNotify+0xdc>
    271c:	ef 01       	movw	r28, r30
    271e:	8f 01       	movw	r16, r30
    2720:	0e 5f       	subi	r16, 0xFE	; 254
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	c8 01       	movw	r24, r16
    2726:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    272a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    272c:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    2730:	98 17       	cp	r25, r24
    2732:	10 f4       	brcc	.+4      	; 0x2738 <xTaskGenericNotify+0xae>
    2734:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    2738:	2b e0       	ldi	r18, 0x0B	; 11
    273a:	82 9f       	mul	r24, r18
    273c:	c0 01       	movw	r24, r0
    273e:	11 24       	eor	r1, r1
    2740:	b8 01       	movw	r22, r16
    2742:	86 5b       	subi	r24, 0xB6	; 182
    2744:	97 4e       	sbci	r25, 0xE7	; 231
    2746:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    274a:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    274e:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2752:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2754:	82 8d       	ldd	r24, Z+26	; 0x1a
    2756:	89 17       	cp	r24, r25
    2758:	40 f4       	brcc	.+16     	; 0x276a <xTaskGenericNotify+0xe0>
    275a:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	05 c0       	rjmp	.+10     	; 0x276c <xTaskGenericNotify+0xe2>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	03 c0       	rjmp	.+6      	; 0x276c <xTaskGenericNotify+0xe2>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	01 c0       	rjmp	.+2      	; 0x276c <xTaskGenericNotify+0xe2>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0f 90       	pop	r0
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <xTaskGenericNotifyFromISR>:
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	fc 01       	movw	r30, r24
    2788:	01 15       	cp	r16, r1
    278a:	11 05       	cpc	r17, r1
    278c:	49 f0       	breq	.+18     	; 0x27a0 <xTaskGenericNotifyFromISR+0x26>
    278e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2790:	94 a5       	ldd	r25, Z+44	; 0x2c
    2792:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2794:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2796:	e8 01       	movw	r28, r16
    2798:	88 83       	st	Y, r24
    279a:	99 83       	std	Y+1, r25	; 0x01
    279c:	aa 83       	std	Y+2, r26	; 0x02
    279e:	bb 83       	std	Y+3, r27	; 0x03
    27a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    27a2:	92 e0       	ldi	r25, 0x02	; 2
    27a4:	97 a7       	std	Z+47, r25	; 0x2f
    27a6:	22 30       	cpi	r18, 0x02	; 2
    27a8:	b1 f0       	breq	.+44     	; 0x27d6 <xTaskGenericNotifyFromISR+0x5c>
    27aa:	18 f4       	brcc	.+6      	; 0x27b2 <xTaskGenericNotifyFromISR+0x38>
    27ac:	21 30       	cpi	r18, 0x01	; 1
    27ae:	31 f0       	breq	.+12     	; 0x27bc <xTaskGenericNotifyFromISR+0x42>
    27b0:	2a c0       	rjmp	.+84     	; 0x2806 <xTaskGenericNotifyFromISR+0x8c>
    27b2:	23 30       	cpi	r18, 0x03	; 3
    27b4:	e9 f0       	breq	.+58     	; 0x27f0 <xTaskGenericNotifyFromISR+0x76>
    27b6:	24 30       	cpi	r18, 0x04	; 4
    27b8:	01 f1       	breq	.+64     	; 0x27fa <xTaskGenericNotifyFromISR+0x80>
    27ba:	25 c0       	rjmp	.+74     	; 0x2806 <xTaskGenericNotifyFromISR+0x8c>
    27bc:	03 a5       	ldd	r16, Z+43	; 0x2b
    27be:	14 a5       	ldd	r17, Z+44	; 0x2c
    27c0:	25 a5       	ldd	r18, Z+45	; 0x2d
    27c2:	36 a5       	ldd	r19, Z+46	; 0x2e
    27c4:	40 2b       	or	r20, r16
    27c6:	51 2b       	or	r21, r17
    27c8:	62 2b       	or	r22, r18
    27ca:	73 2b       	or	r23, r19
    27cc:	43 a7       	std	Z+43, r20	; 0x2b
    27ce:	54 a7       	std	Z+44, r21	; 0x2c
    27d0:	65 a7       	std	Z+45, r22	; 0x2d
    27d2:	76 a7       	std	Z+46, r23	; 0x2e
    27d4:	18 c0       	rjmp	.+48     	; 0x2806 <xTaskGenericNotifyFromISR+0x8c>
    27d6:	43 a5       	ldd	r20, Z+43	; 0x2b
    27d8:	54 a5       	ldd	r21, Z+44	; 0x2c
    27da:	65 a5       	ldd	r22, Z+45	; 0x2d
    27dc:	76 a5       	ldd	r23, Z+46	; 0x2e
    27de:	4f 5f       	subi	r20, 0xFF	; 255
    27e0:	5f 4f       	sbci	r21, 0xFF	; 255
    27e2:	6f 4f       	sbci	r22, 0xFF	; 255
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	43 a7       	std	Z+43, r20	; 0x2b
    27e8:	54 a7       	std	Z+44, r21	; 0x2c
    27ea:	65 a7       	std	Z+45, r22	; 0x2d
    27ec:	76 a7       	std	Z+46, r23	; 0x2e
    27ee:	0b c0       	rjmp	.+22     	; 0x2806 <xTaskGenericNotifyFromISR+0x8c>
    27f0:	43 a7       	std	Z+43, r20	; 0x2b
    27f2:	54 a7       	std	Z+44, r21	; 0x2c
    27f4:	65 a7       	std	Z+45, r22	; 0x2d
    27f6:	76 a7       	std	Z+46, r23	; 0x2e
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <xTaskGenericNotifyFromISR+0x8c>
    27fa:	82 30       	cpi	r24, 0x02	; 2
    27fc:	d9 f1       	breq	.+118    	; 0x2874 <xTaskGenericNotifyFromISR+0xfa>
    27fe:	43 a7       	std	Z+43, r20	; 0x2b
    2800:	54 a7       	std	Z+44, r21	; 0x2c
    2802:	65 a7       	std	Z+45, r22	; 0x2d
    2804:	76 a7       	std	Z+46, r23	; 0x2e
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	b9 f5       	brne	.+110    	; 0x2878 <xTaskGenericNotifyFromISR+0xfe>
    280a:	ef 01       	movw	r28, r30
    280c:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <uxSchedulerSuspended>
    2810:	81 11       	cpse	r24, r1
    2812:	17 c0       	rjmp	.+46     	; 0x2842 <xTaskGenericNotifyFromISR+0xc8>
    2814:	8f 01       	movw	r16, r30
    2816:	0e 5f       	subi	r16, 0xFE	; 254
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	c8 01       	movw	r24, r16
    281c:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
    2820:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2822:	90 91 08 18 	lds	r25, 0x1808	; 0x801808 <uxTopReadyPriority>
    2826:	98 17       	cp	r25, r24
    2828:	10 f4       	brcc	.+4      	; 0x282e <xTaskGenericNotifyFromISR+0xb4>
    282a:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <uxTopReadyPriority>
    282e:	eb e0       	ldi	r30, 0x0B	; 11
    2830:	8e 9f       	mul	r24, r30
    2832:	c0 01       	movw	r24, r0
    2834:	11 24       	eor	r1, r1
    2836:	b8 01       	movw	r22, r16
    2838:	86 5b       	subi	r24, 0xB6	; 182
    283a:	97 4e       	sbci	r25, 0xE7	; 231
    283c:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <xTaskGenericNotifyFromISR+0xd6>
    2842:	bf 01       	movw	r22, r30
    2844:	62 5f       	subi	r22, 0xF2	; 242
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	85 e2       	ldi	r24, 0x25	; 37
    284a:	98 e1       	ldi	r25, 0x18	; 24
    284c:	0e 94 55 05 	call	0xaaa	; 0xaaa <vListInsertEnd>
    2850:	e0 91 76 18 	lds	r30, 0x1876	; 0x801876 <pxCurrentTCB>
    2854:	f0 91 77 18 	lds	r31, 0x1877	; 0x801877 <pxCurrentTCB+0x1>
    2858:	9a 8d       	ldd	r25, Y+26	; 0x1a
    285a:	82 8d       	ldd	r24, Z+26	; 0x1a
    285c:	89 17       	cp	r24, r25
    285e:	70 f4       	brcc	.+28     	; 0x287c <xTaskGenericNotifyFromISR+0x102>
    2860:	e1 14       	cp	r14, r1
    2862:	f1 04       	cpc	r15, r1
    2864:	19 f0       	breq	.+6      	; 0x286c <xTaskGenericNotifyFromISR+0xf2>
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	e7 01       	movw	r28, r14
    286a:	88 83       	st	Y, r24
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <xYieldPending>
    2872:	05 c0       	rjmp	.+10     	; 0x287e <xTaskGenericNotifyFromISR+0x104>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	03 c0       	rjmp	.+6      	; 0x287e <xTaskGenericNotifyFromISR+0x104>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	01 c0       	rjmp	.+2      	; 0x287e <xTaskGenericNotifyFromISR+0x104>
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	08 95       	ret

0000288c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	21 f4       	brne	.+8      	; 0x2898 <xTaskNotifyStateClear+0xc>
    2890:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <pxCurrentTCB>
    2894:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    289e:	fc 01       	movw	r30, r24
    28a0:	27 a5       	ldd	r18, Z+47	; 0x2f
    28a2:	22 30       	cpi	r18, 0x02	; 2
    28a4:	19 f4       	brne	.+6      	; 0x28ac <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    28a6:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    28ac:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    28ae:	0f 90       	pop	r0
    28b0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    28b2:	08 95       	ret

000028b4 <prvInsertTimerInActiveList>:
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	fc 01       	movw	r30, r24
    28c2:	42 83       	std	Z+2, r20	; 0x02
    28c4:	53 83       	std	Z+3, r21	; 0x03
    28c6:	64 83       	std	Z+4, r22	; 0x04
    28c8:	75 83       	std	Z+5, r23	; 0x05
    28ca:	93 87       	std	Z+11, r25	; 0x0b
    28cc:	82 87       	std	Z+10, r24	; 0x0a
    28ce:	04 17       	cp	r16, r20
    28d0:	15 07       	cpc	r17, r21
    28d2:	26 07       	cpc	r18, r22
    28d4:	37 07       	cpc	r19, r23
    28d6:	c0 f0       	brcs	.+48     	; 0x2908 <prvInsertTimerInActiveList+0x54>
    28d8:	0c 19       	sub	r16, r12
    28da:	1d 09       	sbc	r17, r13
    28dc:	2e 09       	sbc	r18, r14
    28de:	3f 09       	sbc	r19, r15
    28e0:	86 85       	ldd	r24, Z+14	; 0x0e
    28e2:	97 85       	ldd	r25, Z+15	; 0x0f
    28e4:	a0 89       	ldd	r26, Z+16	; 0x10
    28e6:	b1 89       	ldd	r27, Z+17	; 0x11
    28e8:	08 17       	cp	r16, r24
    28ea:	19 07       	cpc	r17, r25
    28ec:	2a 07       	cpc	r18, r26
    28ee:	3b 07       	cpc	r19, r27
    28f0:	00 f5       	brcc	.+64     	; 0x2932 <prvInsertTimerInActiveList+0x7e>
    28f2:	bf 01       	movw	r22, r30
    28f4:	6e 5f       	subi	r22, 0xFE	; 254
    28f6:	7f 4f       	sbci	r23, 0xFF	; 255
    28f8:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <pxOverflowTimerList>
    28fc:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <pxOverflowTimerList+0x1>
    2900:	0e 94 76 05 	call	0xaec	; 0xaec <vListInsert>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	18 c0       	rjmp	.+48     	; 0x2938 <prvInsertTimerInActiveList+0x84>
    2908:	0c 15       	cp	r16, r12
    290a:	1d 05       	cpc	r17, r13
    290c:	2e 05       	cpc	r18, r14
    290e:	3f 05       	cpc	r19, r15
    2910:	28 f4       	brcc	.+10     	; 0x291c <prvInsertTimerInActiveList+0x68>
    2912:	4c 15       	cp	r20, r12
    2914:	5d 05       	cpc	r21, r13
    2916:	6e 05       	cpc	r22, r14
    2918:	7f 05       	cpc	r23, r15
    291a:	68 f4       	brcc	.+26     	; 0x2936 <prvInsertTimerInActiveList+0x82>
    291c:	bf 01       	movw	r22, r30
    291e:	6e 5f       	subi	r22, 0xFE	; 254
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <pxCurrentTimerList>
    2926:	90 91 83 18 	lds	r25, 0x1883	; 0x801883 <pxCurrentTimerList+0x1>
    292a:	0e 94 76 05 	call	0xaec	; 0xaec <vListInsert>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	03 c0       	rjmp	.+6      	; 0x2938 <prvInsertTimerInActiveList+0x84>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	01 c0       	rjmp	.+2      	; 0x2938 <prvInsertTimerInActiveList+0x84>
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
    2944:	08 95       	ret

00002946 <prvCheckForValidListAndQueue>:
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	0f 92       	push	r0
    294c:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <xTimerQueue>
    2950:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <xTimerQueue+0x1>
    2954:	89 2b       	or	r24, r25
    2956:	e9 f4       	brne	.+58     	; 0x2992 <prvCheckForValidListAndQueue+0x4c>
    2958:	8f e8       	ldi	r24, 0x8F	; 143
    295a:	98 e1       	ldi	r25, 0x18	; 24
    295c:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    2960:	84 e8       	ldi	r24, 0x84	; 132
    2962:	98 e1       	ldi	r25, 0x18	; 24
    2964:	0e 94 40 05 	call	0xa80	; 0xa80 <vListInitialise>
    2968:	8f e8       	ldi	r24, 0x8F	; 143
    296a:	98 e1       	ldi	r25, 0x18	; 24
    296c:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <pxCurrentTimerList+0x1>
    2970:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <pxCurrentTimerList>
    2974:	84 e8       	ldi	r24, 0x84	; 132
    2976:	98 e1       	ldi	r25, 0x18	; 24
    2978:	90 93 81 18 	sts	0x1881, r25	; 0x801881 <pxOverflowTimerList+0x1>
    297c:	80 93 80 18 	sts	0x1880, r24	; 0x801880 <pxOverflowTimerList>
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	67 e0       	ldi	r22, 0x07	; 7
    2984:	8a e0       	ldi	r24, 0x0A	; 10
    2986:	0e 94 64 08 	call	0x10c8	; 0x10c8 <xQueueGenericCreate>
    298a:	90 93 7f 18 	sts	0x187F, r25	; 0x80187f <xTimerQueue+0x1>
    298e:	80 93 7e 18 	sts	0x187E, r24	; 0x80187e <xTimerQueue>
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	08 95       	ret

00002998 <xTimerCreateTimerTask>:
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	d3 df       	rcall	.-90     	; 0x2946 <prvCheckForValidListAndQueue>
    29a0:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <xTimerQueue>
    29a4:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <xTimerQueue+0x1>
    29a8:	89 2b       	or	r24, r25
    29aa:	89 f0       	breq	.+34     	; 0x29ce <xTimerCreateTimerTask+0x36>
    29ac:	0f 2e       	mov	r0, r31
    29ae:	fc e7       	ldi	r31, 0x7C	; 124
    29b0:	ef 2e       	mov	r14, r31
    29b2:	f8 e1       	ldi	r31, 0x18	; 24
    29b4:	ff 2e       	mov	r15, r31
    29b6:	f0 2d       	mov	r31, r0
    29b8:	03 e0       	ldi	r16, 0x03	; 3
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	45 e5       	ldi	r20, 0x55	; 85
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	6b e1       	ldi	r22, 0x1B	; 27
    29c4:	74 e0       	ldi	r23, 0x04	; 4
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	d3 d8       	rcall	.-3674   	; 0x1b72 <xTaskCreate>
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <xTimerCreateTimerTask+0x38>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	0f 91       	pop	r16
    29d2:	ff 90       	pop	r15
    29d4:	ef 90       	pop	r14
    29d6:	08 95       	ret

000029d8 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    29d8:	8f 92       	push	r8
    29da:	9f 92       	push	r9
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	27 97       	sbiw	r28, 0x07	; 7
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2a00:	e0 91 7e 18 	lds	r30, 0x187E	; 0x80187e <xTimerQueue>
    2a04:	f0 91 7f 18 	lds	r31, 0x187F	; 0x80187f <xTimerQueue+0x1>
    2a08:	30 97       	sbiw	r30, 0x00	; 0
    2a0a:	81 f1       	breq	.+96     	; 0x2a6c <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2a0c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a0e:	2a 83       	std	Y+2, r18	; 0x02
    2a10:	3b 83       	std	Y+3, r19	; 0x03
    2a12:	4c 83       	std	Y+4, r20	; 0x04
    2a14:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a16:	9f 83       	std	Y+7, r25	; 0x07
    2a18:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a1a:	66 30       	cpi	r22, 0x06	; 6
    2a1c:	f4 f4       	brge	.+60     	; 0x2a5a <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a1e:	5d dd       	rcall	.-1350   	; 0x24da <xTaskGetSchedulerState>
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	69 f4       	brne	.+26     	; 0x2a3e <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a24:	00 e0       	ldi	r16, 0x00	; 0
    2a26:	a7 01       	movw	r20, r14
    2a28:	96 01       	movw	r18, r12
    2a2a:	be 01       	movw	r22, r28
    2a2c:	6f 5f       	subi	r22, 0xFF	; 255
    2a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a30:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <xTimerQueue>
    2a34:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <xTimerQueue+0x1>
    2a38:	0e 94 92 08 	call	0x1124	; 0x1124 <xQueueGenericSend>
    2a3c:	18 c0       	rjmp	.+48     	; 0x2a6e <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a3e:	00 e0       	ldi	r16, 0x00	; 0
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	a9 01       	movw	r20, r18
    2a46:	be 01       	movw	r22, r28
    2a48:	6f 5f       	subi	r22, 0xFF	; 255
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	80 91 7e 18 	lds	r24, 0x187E	; 0x80187e <xTimerQueue>
    2a50:	90 91 7f 18 	lds	r25, 0x187F	; 0x80187f <xTimerQueue+0x1>
    2a54:	0e 94 92 08 	call	0x1124	; 0x1124 <xQueueGenericSend>
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	a8 01       	movw	r20, r16
    2a5e:	be 01       	movw	r22, r28
    2a60:	6f 5f       	subi	r22, 0xFF	; 255
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	cf 01       	movw	r24, r30
    2a66:	0e 94 4d 09 	call	0x129a	; 0x129a <xQueueGenericSendFromISR>
    2a6a:	01 c0       	rjmp	.+2      	; 0x2a6e <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2a6e:	27 96       	adiw	r28, 0x07	; 7
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	ef 90       	pop	r14
    2a86:	df 90       	pop	r13
    2a88:	cf 90       	pop	r12
    2a8a:	bf 90       	pop	r11
    2a8c:	af 90       	pop	r10
    2a8e:	9f 90       	pop	r9
    2a90:	8f 90       	pop	r8
    2a92:	08 95       	ret

00002a94 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2a94:	2f 92       	push	r2
    2a96:	3f 92       	push	r3
    2a98:	4f 92       	push	r4
    2a9a:	5f 92       	push	r5
    2a9c:	6f 92       	push	r6
    2a9e:	7f 92       	push	r7
    2aa0:	8f 92       	push	r8
    2aa2:	9f 92       	push	r9
    2aa4:	af 92       	push	r10
    2aa6:	bf 92       	push	r11
    2aa8:	cf 92       	push	r12
    2aaa:	df 92       	push	r13
    2aac:	ef 92       	push	r14
    2aae:	ff 92       	push	r15
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2aba:	bc d9       	rcall	.-3208   	; 0x1e34 <xTaskGetTickCount>
    2abc:	2b 01       	movw	r4, r22
    2abe:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    2ac0:	80 91 78 18 	lds	r24, 0x1878	; 0x801878 <xLastTime.2432>
    2ac4:	90 91 79 18 	lds	r25, 0x1879	; 0x801879 <xLastTime.2432+0x1>
    2ac8:	a0 91 7a 18 	lds	r26, 0x187A	; 0x80187a <xLastTime.2432+0x2>
    2acc:	b0 91 7b 18 	lds	r27, 0x187B	; 0x80187b <xLastTime.2432+0x3>
    2ad0:	48 16       	cp	r4, r24
    2ad2:	59 06       	cpc	r5, r25
    2ad4:	6a 06       	cpc	r6, r26
    2ad6:	7b 06       	cpc	r7, r27
    2ad8:	08 f0       	brcs	.+2      	; 0x2adc <prvSampleTimeNow+0x48>
    2ada:	53 c0       	rjmp	.+166    	; 0x2b82 <prvSampleTimeNow+0xee>
    2adc:	3b c0       	rjmp	.+118    	; 0x2b54 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ade:	07 80       	ldd	r0, Z+7	; 0x07
    2ae0:	f0 85       	ldd	r31, Z+8	; 0x08
    2ae2:	e0 2d       	mov	r30, r0
    2ae4:	80 80       	ld	r8, Z
    2ae6:	91 80       	ldd	r9, Z+1	; 0x01
    2ae8:	a2 80       	ldd	r10, Z+2	; 0x02
    2aea:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2aec:	c0 85       	ldd	r28, Z+8	; 0x08
    2aee:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2af0:	8e 01       	movw	r16, r28
    2af2:	0e 5f       	subi	r16, 0xFE	; 254
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	c8 01       	movw	r24, r16
    2af8:	0e 94 b3 05 	call	0xb66	; 0xb66 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2afc:	ec 89       	ldd	r30, Y+20	; 0x14
    2afe:	fd 89       	ldd	r31, Y+21	; 0x15
    2b00:	ce 01       	movw	r24, r28
    2b02:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b04:	8f 89       	ldd	r24, Y+23	; 0x17
    2b06:	82 ff       	sbrs	r24, 2
    2b08:	25 c0       	rjmp	.+74     	; 0x2b54 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b0e:	a8 89       	ldd	r26, Y+16	; 0x10
    2b10:	b9 89       	ldd	r27, Y+17	; 0x11
    2b12:	88 0d       	add	r24, r8
    2b14:	99 1d       	adc	r25, r9
    2b16:	aa 1d       	adc	r26, r10
    2b18:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2b1a:	88 16       	cp	r8, r24
    2b1c:	99 06       	cpc	r9, r25
    2b1e:	aa 06       	cpc	r10, r26
    2b20:	bb 06       	cpc	r11, r27
    2b22:	70 f4       	brcc	.+28     	; 0x2b40 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b24:	8a 83       	std	Y+2, r24	; 0x02
    2b26:	9b 83       	std	Y+3, r25	; 0x03
    2b28:	ac 83       	std	Y+4, r26	; 0x04
    2b2a:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b2c:	db 87       	std	Y+11, r29	; 0x0b
    2b2e:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b30:	b8 01       	movw	r22, r16
    2b32:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <pxCurrentTimerList>
    2b36:	90 91 83 18 	lds	r25, 0x1883	; 0x801883 <pxCurrentTimerList+0x1>
    2b3a:	0e 94 76 05 	call	0xaec	; 0xaec <vListInsert>
    2b3e:	0a c0       	rjmp	.+20     	; 0x2b54 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b40:	c1 2c       	mov	r12, r1
    2b42:	d1 2c       	mov	r13, r1
    2b44:	76 01       	movw	r14, r12
    2b46:	00 e0       	ldi	r16, 0x00	; 0
    2b48:	10 e0       	ldi	r17, 0x00	; 0
    2b4a:	a5 01       	movw	r20, r10
    2b4c:	94 01       	movw	r18, r8
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	ce 01       	movw	r24, r28
    2b52:	42 df       	rcall	.-380    	; 0x29d8 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b54:	e0 91 82 18 	lds	r30, 0x1882	; 0x801882 <pxCurrentTimerList>
    2b58:	f0 91 83 18 	lds	r31, 0x1883	; 0x801883 <pxCurrentTimerList+0x1>
    2b5c:	80 81       	ld	r24, Z
    2b5e:	81 11       	cpse	r24, r1
    2b60:	be cf       	rjmp	.-132    	; 0x2ade <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2b62:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <pxOverflowTimerList>
    2b66:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <pxOverflowTimerList+0x1>
    2b6a:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <pxCurrentTimerList+0x1>
    2b6e:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2b72:	f0 93 81 18 	sts	0x1881, r31	; 0x801881 <pxOverflowTimerList+0x1>
    2b76:	e0 93 80 18 	sts	0x1880, r30	; 0x801880 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	f1 01       	movw	r30, r2
    2b7e:	80 83       	st	Z, r24
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2b82:	f1 01       	movw	r30, r2
    2b84:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2b86:	40 92 78 18 	sts	0x1878, r4	; 0x801878 <xLastTime.2432>
    2b8a:	50 92 79 18 	sts	0x1879, r5	; 0x801879 <xLastTime.2432+0x1>
    2b8e:	60 92 7a 18 	sts	0x187A, r6	; 0x80187a <xLastTime.2432+0x2>
    2b92:	70 92 7b 18 	sts	0x187B, r7	; 0x80187b <xLastTime.2432+0x3>

    return xTimeNow;
}
    2b96:	c3 01       	movw	r24, r6
    2b98:	b2 01       	movw	r22, r4
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	ff 90       	pop	r15
    2ba4:	ef 90       	pop	r14
    2ba6:	df 90       	pop	r13
    2ba8:	cf 90       	pop	r12
    2baa:	bf 90       	pop	r11
    2bac:	af 90       	pop	r10
    2bae:	9f 90       	pop	r9
    2bb0:	8f 90       	pop	r8
    2bb2:	7f 90       	pop	r7
    2bb4:	6f 90       	pop	r6
    2bb6:	5f 90       	pop	r5
    2bb8:	4f 90       	pop	r4
    2bba:	3f 90       	pop	r3
    2bbc:	2f 90       	pop	r2
    2bbe:	08 95       	ret

00002bc0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2bc0:	08 95       	ret

00002bc2 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2bc2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2bc4:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2bc6:	2f ef       	ldi	r18, 0xFF	; 255
    2bc8:	80 e7       	ldi	r24, 0x70	; 112
    2bca:	92 e0       	ldi	r25, 0x02	; 2
    2bcc:	21 50       	subi	r18, 0x01	; 1
    2bce:	80 40       	sbci	r24, 0x00	; 0
    2bd0:	90 40       	sbci	r25, 0x00	; 0
    2bd2:	e1 f7       	brne	.-8      	; 0x2bcc <vApplicationMallocFailedHook+0xa>
    2bd4:	00 c0       	rjmp	.+0      	; 0x2bd6 <vApplicationMallocFailedHook+0x14>
    2bd6:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2bd8:	1f 9a       	sbi	0x03, 7	; 3
    2bda:	f5 cf       	rjmp	.-22     	; 0x2bc6 <vApplicationMallocFailedHook+0x4>

00002bdc <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2bdc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2bde:	2f 9a       	sbi	0x05, 7	; 5
    2be0:	2f ef       	ldi	r18, 0xFF	; 255
    2be2:	87 ea       	ldi	r24, 0xA7	; 167
    2be4:	91 e6       	ldi	r25, 0x61	; 97
    2be6:	21 50       	subi	r18, 0x01	; 1
    2be8:	80 40       	sbci	r24, 0x00	; 0
    2bea:	90 40       	sbci	r25, 0x00	; 0
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <vApplicationStackOverflowHook+0xa>
    2bee:	00 c0       	rjmp	.+0      	; 0x2bf0 <vApplicationStackOverflowHook+0x14>
    2bf0:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2bf2:	1f 9a       	sbi	0x03, 7	; 3
    2bf4:	f5 cf       	rjmp	.-22     	; 0x2be0 <vApplicationStackOverflowHook+0x4>

00002bf6 <Hum_Temp_Handler_create>:

	
void hum_temp_task(void *pvParameters);

void Hum_Temp_Handler_create()
{
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
	hih8120Create(); 
    2bfc:	c1 d1       	rcall	.+898    	; 0x2f80 <hih8120Create>
	
	xTaskCreate(
    2bfe:	e1 2c       	mov	r14, r1
    2c00:	f1 2c       	mov	r15, r1
    2c02:	03 e0       	ldi	r16, 0x03	; 3
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	48 e8       	ldi	r20, 0x88	; 136
    2c0a:	51 e0       	ldi	r21, 0x01	; 1
    2c0c:	63 e2       	ldi	r22, 0x23	; 35
    2c0e:	74 e0       	ldi	r23, 0x04	; 4
    2c10:	8a e8       	ldi	r24, 0x8A	; 138
    2c12:	96 e1       	ldi	r25, 0x16	; 22
    2c14:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,  // This stack size can be checked & adjusted by reading the Stack Highwater
		NULL,
		3,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		NULL
	 );
}
    2c18:	0f 91       	pop	r16
    2c1a:	ff 90       	pop	r15
    2c1c:	ef 90       	pop	r14
    2c1e:	08 95       	ret

00002c20 <get_hum_lvl>:

uint16_t get_hum_lvl()
{
	while(true) // wait till the sensor is ready
	{
		ret = hih8120IsReady();
    2c20:	c7 d1       	rcall	.+910    	; 0x2fb0 <hih8120IsReady>
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	30 93 02 1a 	sts	0x1A02, r19	; 0x801a02 <ret+0x1>
    2c2a:	20 93 01 1a 	sts	0x1A01, r18	; 0x801a01 <ret>
		if (ret) break;
    2c2e:	81 11       	cpse	r24, r1
    2c30:	06 c0       	rjmp	.+12     	; 0x2c3e <get_hum_lvl+0x1e>
		vTaskDelay(100);
    2c32:	64 e6       	ldi	r22, 0x64	; 100
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	b9 da       	rcall	.-2702   	; 0x21ae <vTaskDelay>
	}
    2c3c:	f1 cf       	rjmp	.-30     	; 0x2c20 <get_hum_lvl>
	
	humidity = hih8120GetHumidity();
    2c3e:	e1 d1       	rcall	.+962    	; 0x3002 <hih8120GetHumidity>
    2c40:	60 93 fd 19 	sts	0x19FD, r22	; 0x8019fd <humidity>
    2c44:	70 93 fe 19 	sts	0x19FE, r23	; 0x8019fe <humidity+0x1>
    2c48:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <humidity+0x2>
    2c4c:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <humidity+0x3>
    2c50:	2f e2       	ldi	r18, 0x2F	; 47
	
	printf("%s%i%s\n", "Arduino humidity level: ", (int)humidity, "%");
    2c52:	34 e0       	ldi	r19, 0x04	; 4
    2c54:	3f 93       	push	r19
    2c56:	2f 93       	push	r18
    2c58:	da d0       	rcall	.+436    	; 0x2e0e <__fixsfsi>
    2c5a:	7f 93       	push	r23
    2c5c:	6f 93       	push	r22
    2c5e:	81 e3       	ldi	r24, 0x31	; 49
    2c60:	94 e0       	ldi	r25, 0x04	; 4
    2c62:	9f 93       	push	r25
    2c64:	8f 93       	push	r24
    2c66:	8a e4       	ldi	r24, 0x4A	; 74
    2c68:	94 e0       	ldi	r25, 0x04	; 4
    2c6a:	9f 93       	push	r25
    2c6c:	8f 93       	push	r24
    2c6e:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
    2c72:	60 91 fd 19 	lds	r22, 0x19FD	; 0x8019fd <humidity>
	
	return humidity;
    2c76:	70 91 fe 19 	lds	r23, 0x19FE	; 0x8019fe <humidity+0x1>
    2c7a:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <humidity+0x2>
    2c7e:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <humidity+0x3>
    2c82:	ca d0       	rcall	.+404    	; 0x2e18 <__fixunssfsi>
    2c84:	2d b7       	in	r18, 0x3d	; 61
    2c86:	3e b7       	in	r19, 0x3e	; 62
    2c88:	28 5f       	subi	r18, 0xF8	; 248
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	3e bf       	out	0x3e, r19	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	2d bf       	out	0x3d, r18	; 61
    2c96:	cb 01       	movw	r24, r22
}
    2c98:	08 95       	ret

00002c9a <get_temp_lvl>:
    2c9a:	8a d1       	rcall	.+788    	; 0x2fb0 <hih8120IsReady>

int16_t get_temp_lvl()
{ // old code was disgusting :<
	while(true) // wait till the sensor is ready
	{
		ret = hih8120IsReady();
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	30 93 02 1a 	sts	0x1A02, r19	; 0x801a02 <ret+0x1>
    2ca4:	20 93 01 1a 	sts	0x1A01, r18	; 0x801a01 <ret>
		if (ret) break;
    2ca8:	81 11       	cpse	r24, r1
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <get_temp_lvl+0x1e>
		vTaskDelay(100);
    2cac:	64 e6       	ldi	r22, 0x64	; 100
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	7c da       	rcall	.-2824   	; 0x21ae <vTaskDelay>
	}
    2cb6:	f1 cf       	rjmp	.-30     	; 0x2c9a <get_temp_lvl>
	
	temperature = hih8120GetTemperature();
    2cb8:	b9 d1       	rcall	.+882    	; 0x302c <hih8120GetTemperature>
    2cba:	60 93 f9 19 	sts	0x19F9, r22	; 0x8019f9 <temperature>
    2cbe:	70 93 fa 19 	sts	0x19FA, r23	; 0x8019fa <temperature+0x1>
    2cc2:	80 93 fb 19 	sts	0x19FB, r24	; 0x8019fb <temperature+0x2>
    2cc6:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <temperature+0x3>
    2cca:	22 e5       	ldi	r18, 0x52	; 82
	
	printf("%s%i%s\n","Arduino temperature : ", (int)temperature, "C");
    2ccc:	34 e0       	ldi	r19, 0x04	; 4
    2cce:	3f 93       	push	r19
    2cd0:	2f 93       	push	r18
    2cd2:	9d d0       	rcall	.+314    	; 0x2e0e <__fixsfsi>
    2cd4:	7f 93       	push	r23
    2cd6:	6f 93       	push	r22
    2cd8:	84 e5       	ldi	r24, 0x54	; 84
    2cda:	94 e0       	ldi	r25, 0x04	; 4
    2cdc:	9f 93       	push	r25
    2cde:	8f 93       	push	r24
    2ce0:	8a e4       	ldi	r24, 0x4A	; 74
    2ce2:	94 e0       	ldi	r25, 0x04	; 4
    2ce4:	9f 93       	push	r25
    2ce6:	8f 93       	push	r24
    2ce8:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
    2cec:	60 91 f9 19 	lds	r22, 0x19F9	; 0x8019f9 <temperature>
	
	return temperature;
    2cf0:	70 91 fa 19 	lds	r23, 0x19FA	; 0x8019fa <temperature+0x1>
    2cf4:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <temperature+0x2>
    2cf8:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <temperature+0x3>
    2cfc:	88 d0       	rcall	.+272    	; 0x2e0e <__fixsfsi>
    2cfe:	2d b7       	in	r18, 0x3d	; 61
    2d00:	3e b7       	in	r19, 0x3e	; 62
    2d02:	28 5f       	subi	r18, 0xF8	; 248
    2d04:	3f 4f       	sbci	r19, 0xFF	; 255
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	3e bf       	out	0x3e, r19	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	2d bf       	out	0x3d, r18	; 61
    2d10:	cb 01       	movw	r24, r22
}
    2d12:	08 95       	ret

00002d14 <hum_temp_task>:
    2d14:	0f 2e       	mov	r0, r31
	for (;;) 
	{
		
		ret = hih8120Wakeup();
		if (HIH8120_OK != ret)
			printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", ret);
    2d16:	fb e6       	ldi	r31, 0x6B	; 107
    2d18:	ef 2e       	mov	r14, r31
    2d1a:	f4 e0       	ldi	r31, 0x04	; 4
    2d1c:	ff 2e       	mov	r15, r31
    2d1e:	f0 2d       	mov	r31, r0
    2d20:	ca ee       	ldi	r28, 0xEA	; 234
    2d22:	d5 e0       	ldi	r29, 0x05	; 5

		vTaskDelay(60); // necessary wait delay after calling wakeup
		
		ret = hih8120Meassure();
		if (HIH8120_OK != ret)
			printf("%s", "Something went wrong with HIH8120 Measure call! Return value was: ", ret);
    2d24:	0d ea       	ldi	r16, 0xAD	; 173
    2d26:	14 e0       	ldi	r17, 0x04	; 4
void hum_temp_task( void *pvParameters )
{
	for (;;) 
	{
		
		ret = hih8120Wakeup();
    2d28:	46 d1       	rcall	.+652    	; 0x2fb6 <hih8120Wakeup>
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	30 93 02 1a 	sts	0x1A02, r19	; 0x801a02 <ret+0x1>
    2d32:	20 93 01 1a 	sts	0x1A01, r18	; 0x801a01 <ret>
		if (HIH8120_OK != ret)
    2d36:	23 2b       	or	r18, r19
    2d38:	71 f0       	breq	.+28     	; 0x2d56 <hum_temp_task+0x42>
			printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", ret);
    2d3a:	1f 92       	push	r1
    2d3c:	8f 93       	push	r24
    2d3e:	ff 92       	push	r15
    2d40:	ef 92       	push	r14
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0

		vTaskDelay(60); // necessary wait delay after calling wakeup
    2d56:	6c e3       	ldi	r22, 0x3C	; 60
    2d58:	70 e0       	ldi	r23, 0x00	; 0
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
		
		ret = hih8120Meassure();
    2d5e:	27 da       	rcall	.-2994   	; 0x21ae <vTaskDelay>
    2d60:	3f d1       	rcall	.+638    	; 0x2fe0 <hih8120Meassure>
    2d62:	28 2f       	mov	r18, r24
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	30 93 02 1a 	sts	0x1A02, r19	; 0x801a02 <ret+0x1>
    2d6a:	20 93 01 1a 	sts	0x1A01, r18	; 0x801a01 <ret>
		if (HIH8120_OK != ret)
    2d6e:	23 2b       	or	r18, r19
    2d70:	71 f0       	breq	.+28     	; 0x2d8e <hum_temp_task+0x7a>
			printf("%s", "Something went wrong with HIH8120 Measure call! Return value was: ", ret);
    2d72:	1f 92       	push	r1
    2d74:	8f 93       	push	r24
    2d76:	1f 93       	push	r17
    2d78:	0f 93       	push	r16
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	0e 94 42 28 	call	0x5084	; 0x5084 <printf>
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
			
		vTaskDelay(150);
    2d8e:	66 e9       	ldi	r22, 0x96	; 150
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	80 e0       	ldi	r24, 0x00	; 0
		
		get_temp_lvl();
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0b da       	rcall	.-3050   	; 0x21ae <vTaskDelay>
		get_hum_lvl();
    2d98:	80 df       	rcall	.-256    	; 0x2c9a <get_temp_lvl>
    2d9a:	42 df       	rcall	.-380    	; 0x2c20 <get_hum_lvl>
			
		
	}
    2d9c:	c5 cf       	rjmp	.-118    	; 0x2d28 <hum_temp_task+0x14>

00002d9e <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);
EventBits_t bits = (BIT_0| BIT_1|BIT_2|BIT_3|BIT_4|BIT_5);
/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2d9e:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2da0:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTestSemaphore>
    2da4:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTestSemaphore+0x1>
    2da8:	89 2b       	or	r24, r25
    2daa:	89 f4       	brne	.+34     	; 0x2dce <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	0e 94 32 09 	call	0x1264	; 0x1264 <xQueueCreateMutex>
    2db2:	90 93 04 1a 	sts	0x1A04, r25	; 0x801a04 <xTestSemaphore+0x1>
    2db6:	80 93 03 1a 	sts	0x1A03, r24	; 0x801a03 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	41 f0       	breq	.+16     	; 0x2dce <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2dbe:	00 e0       	ldi	r16, 0x00	; 0
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	a9 01       	movw	r20, r18
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	0e 94 92 08 	call	0x1124	; 0x1124 <xQueueGenericSend>
		}
	}
}
    2dce:	0f 91       	pop	r16
    2dd0:	08 95       	ret

00002dd2 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
		
		Hum_Temp_Handler_create();
    2dd2:	11 df       	rcall	.-478    	; 0x2bf6 <Hum_Temp_Handler_create>
		CO2Handler_create();
    2dd4:	0e 94 96 02 	call	0x52c	; 0x52c <CO2Handler_create>

	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2dd8:	81 b1       	in	r24, 0x01	; 1
    2dda:	81 68       	ori	r24, 0x81	; 129
    2ddc:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    2dde:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <stdioCreate>
	// Let's create some tasks
	create_tasks_and_semaphores();

	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    2de8:	da df       	rcall	.-76     	; 0x2d9e <create_tasks_and_semaphores>
    2dea:	85 e0       	ldi	r24, 0x05	; 5
    2dec:	6a d0       	rcall	.+212    	; 0x2ec2 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	07 d4       	rcall	.+2062   	; 0x3604 <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	0c 94 df 03 	jmp	0x7be	; 0x7be <lora_handler_create>
    2dfc:	08 95       	ret

00002dfe <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{	
	initialiseSystem(); 
    2dfe:	e9 df       	rcall	.-46     	; 0x2dd2 <initialiseSystem>
	printf("Program Started!!\n");
    2e00:	80 ef       	ldi	r24, 0xF0	; 240
    2e02:	94 e0       	ldi	r25, 0x04	; 4
    2e04:	0e 94 55 28 	call	0x50aa	; 0x50aa <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    2e08:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <vTaskStartScheduler>
    2e0c:	ff cf       	rjmp	.-2      	; 0x2e0c <main+0xe>

00002e0e <__fixsfsi>:
    2e0e:	04 d0       	rcall	.+8      	; 0x2e18 <__fixunssfsi>
    2e10:	68 94       	set
    2e12:	b1 11       	cpse	r27, r1
    2e14:	50 c0       	rjmp	.+160    	; 0x2eb6 <__fp_szero>
    2e16:	08 95       	ret

00002e18 <__fixunssfsi>:
    2e18:	33 d0       	rcall	.+102    	; 0x2e80 <__fp_splitA>
    2e1a:	88 f0       	brcs	.+34     	; 0x2e3e <__fixunssfsi+0x26>
    2e1c:	9f 57       	subi	r25, 0x7F	; 127
    2e1e:	90 f0       	brcs	.+36     	; 0x2e44 <__fixunssfsi+0x2c>
    2e20:	b9 2f       	mov	r27, r25
    2e22:	99 27       	eor	r25, r25
    2e24:	b7 51       	subi	r27, 0x17	; 23
    2e26:	a0 f0       	brcs	.+40     	; 0x2e50 <__fixunssfsi+0x38>
    2e28:	d1 f0       	breq	.+52     	; 0x2e5e <__fixunssfsi+0x46>
    2e2a:	66 0f       	add	r22, r22
    2e2c:	77 1f       	adc	r23, r23
    2e2e:	88 1f       	adc	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	1a f0       	brmi	.+6      	; 0x2e3a <__fixunssfsi+0x22>
    2e34:	ba 95       	dec	r27
    2e36:	c9 f7       	brne	.-14     	; 0x2e2a <__fixunssfsi+0x12>
    2e38:	12 c0       	rjmp	.+36     	; 0x2e5e <__fixunssfsi+0x46>
    2e3a:	b1 30       	cpi	r27, 0x01	; 1
    2e3c:	81 f0       	breq	.+32     	; 0x2e5e <__fixunssfsi+0x46>
    2e3e:	3a d0       	rcall	.+116    	; 0x2eb4 <__fp_zero>
    2e40:	b1 e0       	ldi	r27, 0x01	; 1
    2e42:	08 95       	ret
    2e44:	37 c0       	rjmp	.+110    	; 0x2eb4 <__fp_zero>
    2e46:	67 2f       	mov	r22, r23
    2e48:	78 2f       	mov	r23, r24
    2e4a:	88 27       	eor	r24, r24
    2e4c:	b8 5f       	subi	r27, 0xF8	; 248
    2e4e:	39 f0       	breq	.+14     	; 0x2e5e <__fixunssfsi+0x46>
    2e50:	b9 3f       	cpi	r27, 0xF9	; 249
    2e52:	cc f3       	brlt	.-14     	; 0x2e46 <__fixunssfsi+0x2e>
    2e54:	86 95       	lsr	r24
    2e56:	77 95       	ror	r23
    2e58:	67 95       	ror	r22
    2e5a:	b3 95       	inc	r27
    2e5c:	d9 f7       	brne	.-10     	; 0x2e54 <__fixunssfsi+0x3c>
    2e5e:	3e f4       	brtc	.+14     	; 0x2e6e <__fixunssfsi+0x56>
    2e60:	90 95       	com	r25
    2e62:	80 95       	com	r24
    2e64:	70 95       	com	r23
    2e66:	61 95       	neg	r22
    2e68:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	08 95       	ret

00002e70 <__fp_split3>:
    2e70:	57 fd       	sbrc	r21, 7
    2e72:	90 58       	subi	r25, 0x80	; 128
    2e74:	44 0f       	add	r20, r20
    2e76:	55 1f       	adc	r21, r21
    2e78:	59 f0       	breq	.+22     	; 0x2e90 <__fp_splitA+0x10>
    2e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e7c:	71 f0       	breq	.+28     	; 0x2e9a <__fp_splitA+0x1a>
    2e7e:	47 95       	ror	r20

00002e80 <__fp_splitA>:
    2e80:	88 0f       	add	r24, r24
    2e82:	97 fb       	bst	r25, 7
    2e84:	99 1f       	adc	r25, r25
    2e86:	61 f0       	breq	.+24     	; 0x2ea0 <__fp_splitA+0x20>
    2e88:	9f 3f       	cpi	r25, 0xFF	; 255
    2e8a:	79 f0       	breq	.+30     	; 0x2eaa <__fp_splitA+0x2a>
    2e8c:	87 95       	ror	r24
    2e8e:	08 95       	ret
    2e90:	12 16       	cp	r1, r18
    2e92:	13 06       	cpc	r1, r19
    2e94:	14 06       	cpc	r1, r20
    2e96:	55 1f       	adc	r21, r21
    2e98:	f2 cf       	rjmp	.-28     	; 0x2e7e <__fp_split3+0xe>
    2e9a:	46 95       	lsr	r20
    2e9c:	f1 df       	rcall	.-30     	; 0x2e80 <__fp_splitA>
    2e9e:	08 c0       	rjmp	.+16     	; 0x2eb0 <__fp_splitA+0x30>
    2ea0:	16 16       	cp	r1, r22
    2ea2:	17 06       	cpc	r1, r23
    2ea4:	18 06       	cpc	r1, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	f1 cf       	rjmp	.-30     	; 0x2e8c <__fp_splitA+0xc>
    2eaa:	86 95       	lsr	r24
    2eac:	71 05       	cpc	r23, r1
    2eae:	61 05       	cpc	r22, r1
    2eb0:	08 94       	sec
    2eb2:	08 95       	ret

00002eb4 <__fp_zero>:
    2eb4:	e8 94       	clt

00002eb6 <__fp_szero>:
    2eb6:	bb 27       	eor	r27, r27
    2eb8:	66 27       	eor	r22, r22
    2eba:	77 27       	eor	r23, r23
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	97 f9       	bld	r25, 7
    2ec0:	08 95       	ret

00002ec2 <hal_create>:
    2ec2:	e5 e0       	ldi	r30, 0x05	; 5
    2ec4:	fa e1       	ldi	r31, 0x1A	; 26
    2ec6:	27 e5       	ldi	r18, 0x57	; 87
    2ec8:	3e e1       	ldi	r19, 0x1E	; 30
    2eca:	31 83       	std	Z+1, r19	; 0x01
    2ecc:	20 83       	st	Z, r18
    2ece:	2a e5       	ldi	r18, 0x5A	; 90
    2ed0:	3e e1       	ldi	r19, 0x1E	; 30
    2ed2:	33 83       	std	Z+3, r19	; 0x03
    2ed4:	22 83       	std	Z+2, r18	; 0x02
    2ed6:	25 e6       	ldi	r18, 0x65	; 101
    2ed8:	3e e1       	ldi	r19, 0x1E	; 30
    2eda:	35 83       	std	Z+5, r19	; 0x05
    2edc:	24 83       	std	Z+4, r18	; 0x04
    2ede:	29 e6       	ldi	r18, 0x69	; 105
    2ee0:	3e e1       	ldi	r19, 0x1E	; 30
    2ee2:	37 83       	std	Z+7, r19	; 0x07
    2ee4:	26 83       	std	Z+6, r18	; 0x06
    2ee6:	2f e6       	ldi	r18, 0x6F	; 111
    2ee8:	3e e1       	ldi	r19, 0x1E	; 30
    2eea:	31 87       	std	Z+9, r19	; 0x09
    2eec:	20 87       	std	Z+8, r18	; 0x08
    2eee:	2b e7       	ldi	r18, 0x7B	; 123
    2ef0:	3e e1       	ldi	r19, 0x1E	; 30
    2ef2:	33 87       	std	Z+11, r19	; 0x0b
    2ef4:	22 87       	std	Z+10, r18	; 0x0a
    2ef6:	20 e8       	ldi	r18, 0x80	; 128
    2ef8:	3e e1       	ldi	r19, 0x1E	; 30
    2efa:	35 87       	std	Z+13, r19	; 0x0d
    2efc:	24 87       	std	Z+12, r18	; 0x0c
    2efe:	2c e8       	ldi	r18, 0x8C	; 140
    2f00:	3e e1       	ldi	r19, 0x1E	; 30
    2f02:	37 87       	std	Z+15, r19	; 0x0f
    2f04:	26 87       	std	Z+14, r18	; 0x0e
    2f06:	2c e6       	ldi	r18, 0x6C	; 108
    2f08:	3e e1       	ldi	r19, 0x1E	; 30
    2f0a:	31 8b       	std	Z+17, r19	; 0x11
    2f0c:	20 8b       	std	Z+16, r18	; 0x10
    2f0e:	21 e9       	ldi	r18, 0x91	; 145
    2f10:	3e e1       	ldi	r19, 0x1E	; 30
    2f12:	33 8b       	std	Z+19, r19	; 0x13
    2f14:	22 8b       	std	Z+18, r18	; 0x12
    2f16:	2e e9       	ldi	r18, 0x9E	; 158
    2f18:	3e e1       	ldi	r19, 0x1E	; 30
    2f1a:	35 8b       	std	Z+21, r19	; 0x15
    2f1c:	24 8b       	std	Z+20, r18	; 0x14
    2f1e:	68 2f       	mov	r22, r24
    2f20:	cf 01       	movw	r24, r30
    2f22:	3c c1       	rjmp	.+632    	; 0x319c <led_create>
    2f24:	08 95       	ret

00002f26 <_hihTwiCallback>:
    2f26:	65 30       	cpi	r22, 0x05	; 5
    2f28:	f1 f4       	brne	.+60     	; 0x2f66 <_hihTwiCallback+0x40>
    2f2a:	fa 01       	movw	r30, r20
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8f 73       	andi	r24, 0x3F	; 63
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	98 2f       	mov	r25, r24
    2f34:	88 27       	eor	r24, r24
    2f36:	21 81       	ldd	r18, Z+1	; 0x01
    2f38:	82 2b       	or	r24, r18
    2f3a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2f3e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	f0 e4       	ldi	r31, 0x40	; 64
    2f46:	8f 9f       	mul	r24, r31
    2f48:	c0 01       	movw	r24, r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	fa 01       	movw	r30, r20
    2f4e:	23 81       	ldd	r18, Z+3	; 0x03
    2f50:	26 95       	lsr	r18
    2f52:	26 95       	lsr	r18
    2f54:	82 2b       	or	r24, r18
    2f56:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2f5a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	80 93 9a 18 	sts	0x189A, r24	; 0x80189a <_measuringIsReady>
    2f64:	08 95       	ret
    2f66:	64 30       	cpi	r22, 0x04	; 4
    2f68:	51 f0       	breq	.+20     	; 0x2f7e <_hihTwiCallback+0x58>
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e4       	ldi	r25, 0x40	; 64
    2f6e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2f72:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2f76:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2f7a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2f7e:	08 95       	ret

00002f80 <hih8120Create>:
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	03 e9       	ldi	r16, 0x93	; 147
    2f86:	17 e1       	ldi	r17, 0x17	; 23
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	34 e2       	ldi	r19, 0x24	; 36
    2f8c:	44 ef       	ldi	r20, 0xF4	; 244
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	87 e2       	ldi	r24, 0x27	; 39
    2f94:	0e 94 34 23 	call	0x4668	; 0x4668 <twiCreate>
    2f98:	90 93 9c 18 	sts	0x189C, r25	; 0x80189c <_hih8120Handler+0x1>
    2f9c:	80 93 9b 18 	sts	0x189B, r24	; 0x80189b <_hih8120Handler>
    2fa0:	21 e0       	ldi	r18, 0x01	; 1
    2fa2:	89 2b       	or	r24, r25
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <hih8120Create+0x28>
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	82 2f       	mov	r24, r18
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <hih8120IsReady>:
    2fb0:	80 91 9a 18 	lds	r24, 0x189A	; 0x80189a <_measuringIsReady>
    2fb4:	08 95       	ret

00002fb6 <hih8120Wakeup>:
    2fb6:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <_hih8120Handler>
    2fba:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <_hih8120Handler+0x1>
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	59 f0       	breq	.+22     	; 0x2fd8 <hih8120Wakeup+0x22>
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	0e 94 85 23 	call	0x470a	; 0x470a <twiTransmit>
    2fcc:	84 30       	cpi	r24, 0x04	; 4
    2fce:	31 f4       	brne	.+12     	; 0x2fdc <hih8120Wakeup+0x26>
    2fd0:	10 92 9a 18 	sts	0x189A, r1	; 0x80189a <_measuringIsReady>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	08 95       	ret
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	08 95       	ret
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    2fde:	08 95       	ret

00002fe0 <hih8120Meassure>:
    2fe0:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <_hih8120Handler>
    2fe4:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <_hih8120Handler+0x1>
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	39 f0       	breq	.+14     	; 0x2ffa <hih8120Meassure+0x1a>
    2fec:	64 e0       	ldi	r22, 0x04	; 4
    2fee:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <twiReceive>
    2ff2:	85 30       	cpi	r24, 0x05	; 5
    2ff4:	21 f0       	breq	.+8      	; 0x2ffe <hih8120Meassure+0x1e>
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	08 95       	ret
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	08 95       	ret
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	08 95       	ret

00003002 <hih8120GetHumidity>:
    3002:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3006:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__floatunsisf>
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	48 ec       	ldi	r20, 0xC8	; 200
    3018:	52 e4       	ldi	r21, 0x42	; 66
    301a:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__mulsf3>
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	38 ef       	ldi	r19, 0xF8	; 248
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	56 e4       	ldi	r21, 0x46	; 70
    3026:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__divsf3>
    302a:	08 95       	ret

0000302c <hih8120GetTemperature>:
    302c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3030:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__floatunsisf>
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	45 e2       	ldi	r20, 0x25	; 37
    3042:	53 e4       	ldi	r21, 0x43	; 67
    3044:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__mulsf3>
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	38 ef       	ldi	r19, 0xF8	; 248
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	56 e4       	ldi	r21, 0x46	; 70
    3050:	0e 94 44 25 	call	0x4a88	; 0x4a88 <__divsf3>
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	52 e4       	ldi	r21, 0x42	; 66
    305c:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <__subsf3>
    3060:	08 95       	ret

00003062 <_turn_off>:
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	fc 01       	movw	r30, r24
    306a:	ee 0f       	add	r30, r30
    306c:	ff 1f       	adc	r31, r31
    306e:	e8 0f       	add	r30, r24
    3070:	f9 1f       	adc	r31, r25
    3072:	ee 0f       	add	r30, r30
    3074:	ff 1f       	adc	r31, r31
    3076:	e3 56       	subi	r30, 0x63	; 99
    3078:	f7 4e       	sbci	r31, 0xE7	; 231
    307a:	23 81       	ldd	r18, Z+3	; 0x03
    307c:	21 11       	cpse	r18, r1
    307e:	0a c0       	rjmp	.+20     	; 0x3094 <_turn_off+0x32>
    3080:	ef 01       	movw	r28, r30
    3082:	e0 91 0d 1a 	lds	r30, 0x1A0D	; 0x801a0d <register_access+0x8>
    3086:	f0 91 0e 1a 	lds	r31, 0x1A0E	; 0x801a0e <register_access+0x9>
    308a:	6a 81       	ldd	r22, Y+2	; 0x02
    308c:	88 81       	ld	r24, Y
    308e:	99 81       	ldd	r25, Y+1	; 0x01
    3090:	19 95       	eicall
    3092:	12 c0       	rjmp	.+36     	; 0x30b8 <_turn_off+0x56>
    3094:	dc 01       	movw	r26, r24
    3096:	aa 0f       	add	r26, r26
    3098:	bb 1f       	adc	r27, r27
    309a:	ed 01       	movw	r28, r26
    309c:	c8 0f       	add	r28, r24
    309e:	d9 1f       	adc	r29, r25
    30a0:	cc 0f       	add	r28, r28
    30a2:	dd 1f       	adc	r29, r29
    30a4:	c3 56       	subi	r28, 0x63	; 99
    30a6:	d7 4e       	sbci	r29, 0xE7	; 231
    30a8:	e0 91 17 1a 	lds	r30, 0x1A17	; 0x801a17 <register_access+0x12>
    30ac:	f0 91 18 1a 	lds	r31, 0x1A18	; 0x801a18 <register_access+0x13>
    30b0:	6a 81       	ldd	r22, Y+2	; 0x02
    30b2:	88 81       	ld	r24, Y
    30b4:	99 81       	ldd	r25, Y+1	; 0x01
    30b6:	19 95       	eicall
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	08 95       	ret

000030be <_turn_on>:
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	fc 01       	movw	r30, r24
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	e8 0f       	add	r30, r24
    30cc:	f9 1f       	adc	r31, r25
    30ce:	ee 0f       	add	r30, r30
    30d0:	ff 1f       	adc	r31, r31
    30d2:	e3 56       	subi	r30, 0x63	; 99
    30d4:	f7 4e       	sbci	r31, 0xE7	; 231
    30d6:	23 81       	ldd	r18, Z+3	; 0x03
    30d8:	21 11       	cpse	r18, r1
    30da:	0a c0       	rjmp	.+20     	; 0x30f0 <_turn_on+0x32>
    30dc:	ef 01       	movw	r28, r30
    30de:	e0 91 17 1a 	lds	r30, 0x1A17	; 0x801a17 <register_access+0x12>
    30e2:	f0 91 18 1a 	lds	r31, 0x1A18	; 0x801a18 <register_access+0x13>
    30e6:	6a 81       	ldd	r22, Y+2	; 0x02
    30e8:	88 81       	ld	r24, Y
    30ea:	99 81       	ldd	r25, Y+1	; 0x01
    30ec:	19 95       	eicall
    30ee:	12 c0       	rjmp	.+36     	; 0x3114 <_turn_on+0x56>
    30f0:	dc 01       	movw	r26, r24
    30f2:	aa 0f       	add	r26, r26
    30f4:	bb 1f       	adc	r27, r27
    30f6:	ed 01       	movw	r28, r26
    30f8:	c8 0f       	add	r28, r24
    30fa:	d9 1f       	adc	r29, r25
    30fc:	cc 0f       	add	r28, r28
    30fe:	dd 1f       	adc	r29, r29
    3100:	c3 56       	subi	r28, 0x63	; 99
    3102:	d7 4e       	sbci	r29, 0xE7	; 231
    3104:	e0 91 0d 1a 	lds	r30, 0x1A0D	; 0x801a0d <register_access+0x8>
    3108:	f0 91 0e 1a 	lds	r31, 0x1A0E	; 0x801a0e <register_access+0x9>
    310c:	6a 81       	ldd	r22, Y+2	; 0x02
    310e:	88 81       	ld	r24, Y
    3110:	99 81       	ldd	r25, Y+1	; 0x01
    3112:	19 95       	eicall
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	08 95       	ret

0000311a <_hal_led_task>:
    311a:	0f 2e       	mov	r0, r31
    311c:	f5 e0       	ldi	r31, 0x05	; 5
    311e:	cf 2e       	mov	r12, r31
    3120:	fa e1       	ldi	r31, 0x1A	; 26
    3122:	df 2e       	mov	r13, r31
    3124:	f0 2d       	mov	r31, r0
    3126:	04 e0       	ldi	r16, 0x04	; 4
    3128:	cd e9       	ldi	r28, 0x9D	; 157
    312a:	d8 e1       	ldi	r29, 0x18	; 24
    312c:	10 e0       	ldi	r17, 0x00	; 0
    312e:	8c 81       	ldd	r24, Y+4	; 0x04
    3130:	81 30       	cpi	r24, 0x01	; 1
    3132:	69 f0       	breq	.+26     	; 0x314e <_hal_led_task+0x34>
    3134:	e8 f0       	brcs	.+58     	; 0x3170 <_hal_led_task+0x56>
    3136:	82 30       	cpi	r24, 0x02	; 2
    3138:	39 f5       	brne	.+78     	; 0x3188 <_hal_led_task+0x6e>
    313a:	d6 01       	movw	r26, r12
    313c:	1c 96       	adiw	r26, 0x0c	; 12
    313e:	ed 91       	ld	r30, X+
    3140:	fc 91       	ld	r31, X
    3142:	1d 97       	sbiw	r26, 0x0d	; 13
    3144:	6a 81       	ldd	r22, Y+2	; 0x02
    3146:	88 81       	ld	r24, Y
    3148:	99 81       	ldd	r25, Y+1	; 0x01
    314a:	19 95       	eicall
    314c:	1d c0       	rjmp	.+58     	; 0x3188 <_hal_led_task+0x6e>
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	8a 30       	cpi	r24, 0x0A	; 10
    3154:	10 f4       	brcc	.+4      	; 0x315a <_hal_led_task+0x40>
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	17 c0       	rjmp	.+46     	; 0x3188 <_hal_led_task+0x6e>
    315a:	1d 82       	std	Y+5, r1	; 0x05
    315c:	d6 01       	movw	r26, r12
    315e:	1c 96       	adiw	r26, 0x0c	; 12
    3160:	ed 91       	ld	r30, X+
    3162:	fc 91       	ld	r31, X
    3164:	1d 97       	sbiw	r26, 0x0d	; 13
    3166:	6a 81       	ldd	r22, Y+2	; 0x02
    3168:	88 81       	ld	r24, Y
    316a:	99 81       	ldd	r25, Y+1	; 0x01
    316c:	19 95       	eicall
    316e:	0c c0       	rjmp	.+24     	; 0x3188 <_hal_led_task+0x6e>
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	88 23       	and	r24, r24
    3174:	31 f0       	breq	.+12     	; 0x3182 <_hal_led_task+0x68>
    3176:	81 2f       	mov	r24, r17
    3178:	a2 df       	rcall	.-188    	; 0x30be <_turn_on>
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	81 50       	subi	r24, 0x01	; 1
    317e:	8d 83       	std	Y+5, r24	; 0x05
    3180:	03 c0       	rjmp	.+6      	; 0x3188 <_hal_led_task+0x6e>
    3182:	0c 83       	std	Y+4, r16	; 0x04
    3184:	81 2f       	mov	r24, r17
    3186:	6d df       	rcall	.-294    	; 0x3062 <_turn_off>
    3188:	1f 5f       	subi	r17, 0xFF	; 255
    318a:	26 96       	adiw	r28, 0x06	; 6
    318c:	14 30       	cpi	r17, 0x04	; 4
    318e:	79 f6       	brne	.-98     	; 0x312e <_hal_led_task+0x14>
    3190:	65 e0       	ldi	r22, 0x05	; 5
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0a d8       	rcall	.-4076   	; 0x21ae <vTaskDelay>
    319a:	c6 cf       	rjmp	.-116    	; 0x3128 <_hal_led_task+0xe>

0000319c <led_create>:
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	0f 93       	push	r16
    31a6:	1f 93       	push	r17
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	06 2f       	mov	r16, r22
    31ae:	0f 2e       	mov	r0, r31
    31b0:	f5 e0       	ldi	r31, 0x05	; 5
    31b2:	ef 2e       	mov	r14, r31
    31b4:	fa e1       	ldi	r31, 0x1A	; 26
    31b6:	ff 2e       	mov	r15, r31
    31b8:	f0 2d       	mov	r31, r0
    31ba:	d7 01       	movw	r26, r14
    31bc:	18 96       	adiw	r26, 0x08	; 8
    31be:	ed 91       	ld	r30, X+
    31c0:	fc 91       	ld	r31, X
    31c2:	19 97       	sbiw	r26, 0x09	; 9
    31c4:	66 e0       	ldi	r22, 0x06	; 6
    31c6:	87 e2       	ldi	r24, 0x27	; 39
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	19 95       	eicall
    31cc:	cd e9       	ldi	r28, 0x9D	; 157
    31ce:	d8 e1       	ldi	r29, 0x18	; 24
    31d0:	0f 2e       	mov	r0, r31
    31d2:	f8 e2       	ldi	r31, 0x28	; 40
    31d4:	cf 2e       	mov	r12, r31
    31d6:	d1 2c       	mov	r13, r1
    31d8:	f0 2d       	mov	r31, r0
    31da:	d9 82       	std	Y+1, r13	; 0x01
    31dc:	c8 82       	st	Y, r12
    31de:	86 e0       	ldi	r24, 0x06	; 6
    31e0:	8a 83       	std	Y+2, r24	; 0x02
    31e2:	1b 82       	std	Y+3, r1	; 0x03
    31e4:	14 e0       	ldi	r17, 0x04	; 4
    31e6:	1c 83       	std	Y+4, r17	; 0x04
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	3b df       	rcall	.-394    	; 0x3062 <_turn_off>
    31ec:	d7 01       	movw	r26, r14
    31ee:	18 96       	adiw	r26, 0x08	; 8
    31f0:	ed 91       	ld	r30, X+
    31f2:	fc 91       	ld	r31, X
    31f4:	19 97       	sbiw	r26, 0x09	; 9
    31f6:	67 e0       	ldi	r22, 0x07	; 7
    31f8:	87 e2       	ldi	r24, 0x27	; 39
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	19 95       	eicall
    31fe:	df 82       	std	Y+7, r13	; 0x07
    3200:	ce 82       	std	Y+6, r12	; 0x06
    3202:	87 e0       	ldi	r24, 0x07	; 7
    3204:	88 87       	std	Y+8, r24	; 0x08
    3206:	19 86       	std	Y+9, r1	; 0x09
    3208:	1a 87       	std	Y+10, r17	; 0x0a
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	2a df       	rcall	.-428    	; 0x3062 <_turn_off>
    320e:	d7 01       	movw	r26, r14
    3210:	18 96       	adiw	r26, 0x08	; 8
    3212:	ed 91       	ld	r30, X+
    3214:	fc 91       	ld	r31, X
    3216:	19 97       	sbiw	r26, 0x09	; 9
    3218:	65 e0       	ldi	r22, 0x05	; 5
    321a:	83 e3       	ldi	r24, 0x33	; 51
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	19 95       	eicall
    3220:	d7 01       	movw	r26, r14
    3222:	18 96       	adiw	r26, 0x08	; 8
    3224:	ed 91       	ld	r30, X+
    3226:	fc 91       	ld	r31, X
    3228:	19 97       	sbiw	r26, 0x09	; 9
    322a:	61 e0       	ldi	r22, 0x01	; 1
    322c:	84 e3       	ldi	r24, 0x34	; 52
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	19 95       	eicall
    3232:	84 e3       	ldi	r24, 0x34	; 52
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9d 87       	std	Y+13, r25	; 0x0d
    3238:	8c 87       	std	Y+12, r24	; 0x0c
    323a:	85 e0       	ldi	r24, 0x05	; 5
    323c:	8e 87       	std	Y+14, r24	; 0x0e
    323e:	1f 86       	std	Y+15, r1	; 0x0f
    3240:	18 8b       	std	Y+16, r17	; 0x10
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	0e df       	rcall	.-484    	; 0x3062 <_turn_off>
    3246:	d7 01       	movw	r26, r14
    3248:	18 96       	adiw	r26, 0x08	; 8
    324a:	ed 91       	ld	r30, X+
    324c:	fc 91       	ld	r31, X
    324e:	19 97       	sbiw	r26, 0x09	; 9
    3250:	64 e0       	ldi	r22, 0x04	; 4
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	19 95       	eicall
    3258:	d7 01       	movw	r26, r14
    325a:	18 96       	adiw	r26, 0x08	; 8
    325c:	ed 91       	ld	r30, X+
    325e:	fc 91       	ld	r31, X
    3260:	19 97       	sbiw	r26, 0x09	; 9
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	82 e0       	ldi	r24, 0x02	; 2
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	19 95       	eicall
    326a:	82 e0       	ldi	r24, 0x02	; 2
    326c:	91 e0       	ldi	r25, 0x01	; 1
    326e:	9b 8b       	std	Y+19, r25	; 0x13
    3270:	8a 8b       	std	Y+18, r24	; 0x12
    3272:	1c 8b       	std	Y+20, r17	; 0x14
    3274:	1d 8a       	std	Y+21, r1	; 0x15
    3276:	1e 8b       	std	Y+22, r17	; 0x16
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	f3 de       	rcall	.-538    	; 0x3062 <_turn_off>
    327c:	e1 2c       	mov	r14, r1
    327e:	f1 2c       	mov	r15, r1
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 ec       	ldi	r20, 0xC0	; 192
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	62 e0       	ldi	r22, 0x02	; 2
    328a:	75 e0       	ldi	r23, 0x05	; 5
    328c:	8d e8       	ldi	r24, 0x8D	; 141
    328e:	98 e1       	ldi	r25, 0x18	; 24
    3290:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskCreate>
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	ff 90       	pop	r15
    329e:	ef 90       	pop	r14
    32a0:	df 90       	pop	r13
    32a2:	cf 90       	pop	r12
    32a4:	08 95       	ret

000032a6 <led_slow_blink>:
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	c8 2f       	mov	r28, r24
    32b0:	d0 e0       	ldi	r29, 0x00	; 0
    32b2:	8e 01       	movw	r16, r28
    32b4:	00 0f       	add	r16, r16
    32b6:	11 1f       	adc	r17, r17
    32b8:	d8 01       	movw	r26, r16
    32ba:	ac 0f       	add	r26, r28
    32bc:	bd 1f       	adc	r27, r29
    32be:	aa 0f       	add	r26, r26
    32c0:	bb 1f       	adc	r27, r27
    32c2:	a3 56       	subi	r26, 0x63	; 99
    32c4:	b7 4e       	sbci	r27, 0xE7	; 231
    32c6:	e0 91 11 1a 	lds	r30, 0x1A11	; 0x801a11 <register_access+0xc>
    32ca:	f0 91 12 1a 	lds	r31, 0x1A12	; 0x801a12 <register_access+0xd>
    32ce:	12 96       	adiw	r26, 0x02	; 2
    32d0:	6c 91       	ld	r22, X
    32d2:	12 97       	sbiw	r26, 0x02	; 2
    32d4:	8d 91       	ld	r24, X+
    32d6:	9c 91       	ld	r25, X
    32d8:	19 95       	eicall
    32da:	c0 0f       	add	r28, r16
    32dc:	d1 1f       	adc	r29, r17
    32de:	cc 0f       	add	r28, r28
    32e0:	dd 1f       	adc	r29, r29
    32e2:	c3 56       	subi	r28, 0x63	; 99
    32e4:	d7 4e       	sbci	r29, 0xE7	; 231
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	8c 83       	std	Y+4, r24	; 0x04
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	08 95       	ret

000032f4 <led_fast_blink>:
    32f4:	0f 93       	push	r16
    32f6:	1f 93       	push	r17
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	c8 2f       	mov	r28, r24
    32fe:	d0 e0       	ldi	r29, 0x00	; 0
    3300:	8e 01       	movw	r16, r28
    3302:	00 0f       	add	r16, r16
    3304:	11 1f       	adc	r17, r17
    3306:	d8 01       	movw	r26, r16
    3308:	ac 0f       	add	r26, r28
    330a:	bd 1f       	adc	r27, r29
    330c:	aa 0f       	add	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	a3 56       	subi	r26, 0x63	; 99
    3312:	b7 4e       	sbci	r27, 0xE7	; 231
    3314:	e0 91 11 1a 	lds	r30, 0x1A11	; 0x801a11 <register_access+0xc>
    3318:	f0 91 12 1a 	lds	r31, 0x1A12	; 0x801a12 <register_access+0xd>
    331c:	12 96       	adiw	r26, 0x02	; 2
    331e:	6c 91       	ld	r22, X
    3320:	12 97       	sbiw	r26, 0x02	; 2
    3322:	8d 91       	ld	r24, X+
    3324:	9c 91       	ld	r25, X
    3326:	19 95       	eicall
    3328:	c0 0f       	add	r28, r16
    332a:	d1 1f       	adc	r29, r17
    332c:	cc 0f       	add	r28, r28
    332e:	dd 1f       	adc	r29, r29
    3330:	c3 56       	subi	r28, 0x63	; 99
    3332:	d7 4e       	sbci	r29, 0xE7	; 231
    3334:	82 e0       	ldi	r24, 0x02	; 2
    3336:	8c 83       	std	Y+4, r24	; 0x04
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1f 91       	pop	r17
    333e:	0f 91       	pop	r16
    3340:	08 95       	ret

00003342 <led_led_on>:
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	f9 01       	movw	r30, r18
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	e2 0f       	add	r30, r18
    334e:	f3 1f       	adc	r31, r19
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e3 56       	subi	r30, 0x63	; 99
    3356:	f7 4e       	sbci	r31, 0xE7	; 231
    3358:	93 e0       	ldi	r25, 0x03	; 3
    335a:	94 83       	std	Z+4, r25	; 0x04
    335c:	b0 ce       	rjmp	.-672    	; 0x30be <_turn_on>
    335e:	08 95       	ret

00003360 <led_led_off>:
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	f9 01       	movw	r30, r18
    3366:	ee 0f       	add	r30, r30
    3368:	ff 1f       	adc	r31, r31
    336a:	e2 0f       	add	r30, r18
    336c:	f3 1f       	adc	r31, r19
    336e:	ee 0f       	add	r30, r30
    3370:	ff 1f       	adc	r31, r31
    3372:	e3 56       	subi	r30, 0x63	; 99
    3374:	f7 4e       	sbci	r31, 0xE7	; 231
    3376:	94 e0       	ldi	r25, 0x04	; 4
    3378:	94 83       	std	Z+4, r25	; 0x04
    337a:	73 ce       	rjmp	.-794    	; 0x3062 <_turn_off>
    337c:	08 95       	ret

0000337e <led_long_puls>:
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	fc 01       	movw	r30, r24
    3382:	ee 0f       	add	r30, r30
    3384:	ff 1f       	adc	r31, r31
    3386:	df 01       	movw	r26, r30
    3388:	a8 0f       	add	r26, r24
    338a:	b9 1f       	adc	r27, r25
    338c:	aa 0f       	add	r26, r26
    338e:	bb 1f       	adc	r27, r27
    3390:	a3 56       	subi	r26, 0x63	; 99
    3392:	b7 4e       	sbci	r27, 0xE7	; 231
    3394:	24 e0       	ldi	r18, 0x04	; 4
    3396:	15 96       	adiw	r26, 0x05	; 5
    3398:	2c 93       	st	X, r18
    339a:	15 97       	sbiw	r26, 0x05	; 5
    339c:	fd 01       	movw	r30, r26
    339e:	14 82       	std	Z+4, r1	; 0x04
    33a0:	08 95       	ret

000033a2 <led_short_puls>:
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	fc 01       	movw	r30, r24
    33a6:	ee 0f       	add	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	df 01       	movw	r26, r30
    33ac:	a8 0f       	add	r26, r24
    33ae:	b9 1f       	adc	r27, r25
    33b0:	aa 0f       	add	r26, r26
    33b2:	bb 1f       	adc	r27, r27
    33b4:	a3 56       	subi	r26, 0x63	; 99
    33b6:	b7 4e       	sbci	r27, 0xE7	; 231
    33b8:	21 e0       	ldi	r18, 0x01	; 1
    33ba:	15 96       	adiw	r26, 0x05	; 5
    33bc:	2c 93       	st	X, r18
    33be:	15 97       	sbiw	r26, 0x05	; 5
    33c0:	fd 01       	movw	r30, r26
    33c2:	14 82       	std	Z+4, r1	; 0x04
    33c4:	08 95       	ret

000033c6 <_serial_call_back>:
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	1f 92       	push	r1
    33d0:	1f 92       	push	r1
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	8c 01       	movw	r16, r24
    33d8:	19 82       	std	Y+1, r1	; 0x01
    33da:	2d c0       	rjmp	.+90     	; 0x3436 <_serial_call_back+0x70>
    33dc:	e0 91 19 19 	lds	r30, 0x1919	; 0x801919 <rec_buf_inp.2947>
    33e0:	ec 32       	cpi	r30, 0x2C	; 44
    33e2:	50 f4       	brcc	.+20     	; 0x33f8 <_serial_call_back+0x32>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	8e 0f       	add	r24, r30
    33e8:	80 93 19 19 	sts	0x1919, r24	; 0x801919 <rec_buf_inp.2947>
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	e5 5b       	subi	r30, 0xB5	; 181
    33f0:	f6 4e       	sbci	r31, 0xE6	; 230
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	80 83       	st	Z, r24
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <_serial_call_back+0x36>
    33f8:	10 92 19 19 	sts	0x1919, r1	; 0x801919 <rec_buf_inp.2947>
    33fc:	8a 81       	ldd	r24, Y+2	; 0x02
    33fe:	8a 30       	cpi	r24, 0x0A	; 10
    3400:	d1 f4       	brne	.+52     	; 0x3436 <_serial_call_back+0x70>
    3402:	40 91 19 19 	lds	r20, 0x1919	; 0x801919 <rec_buf_inp.2947>
    3406:	50 e0       	ldi	r21, 0x00	; 0
    3408:	fa 01       	movw	r30, r20
    340a:	e7 5b       	subi	r30, 0xB7	; 183
    340c:	f6 4e       	sbci	r31, 0xE6	; 230
    340e:	10 82       	st	Z, r1
    3410:	41 50       	subi	r20, 0x01	; 1
    3412:	51 09       	sbc	r21, r1
    3414:	9e 01       	movw	r18, r28
    3416:	2f 5f       	subi	r18, 0xFF	; 255
    3418:	3f 4f       	sbci	r19, 0xFF	; 255
    341a:	6b e4       	ldi	r22, 0x4B	; 75
    341c:	79 e1       	ldi	r23, 0x19	; 25
    341e:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serial_reply_buffer_handle>
    3422:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serial_reply_buffer_handle+0x1>
    3426:	0e 94 36 0c 	call	0x186c	; 0x186c <xStreamBufferSendFromISR>
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	81 11       	cpse	r24, r1
    342e:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    3432:	10 92 19 19 	sts	0x1919, r1	; 0x801919 <rec_buf_inp.2947>
    3436:	be 01       	movw	r22, r28
    3438:	6e 5f       	subi	r22, 0xFE	; 254
    343a:	7f 4f       	sbci	r23, 0xFF	; 255
    343c:	c8 01       	movw	r24, r16
    343e:	48 d6       	rcall	.+3216   	; 0x40d0 <serial_get_byte>
    3440:	88 23       	and	r24, r24
    3442:	61 f2       	breq	.-104    	; 0x33dc <_serial_call_back+0x16>
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	08 95       	ret

00003452 <_upload_message>:
    3452:	0f 93       	push	r16
    3454:	1f 93       	push	r17
    3456:	cf 93       	push	r28
    3458:	df 93       	push	r29
    345a:	8c 01       	movw	r16, r24
    345c:	eb 01       	movw	r28, r22
    345e:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serial_reply_buffer_handle>
    3462:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serial_reply_buffer_handle+0x1>
    3466:	0e 94 4e 0b 	call	0x169c	; 0x169c <xStreamBufferReset>
    346a:	b8 01       	movw	r22, r16
    346c:	85 eb       	ldi	r24, 0xB5	; 181
    346e:	98 e1       	ldi	r25, 0x18	; 24
    3470:	0e 94 23 28 	call	0x5046	; 0x5046 <strcpy>
    3474:	20 97       	sbiw	r28, 0x00	; 0
    3476:	79 f0       	breq	.+30     	; 0x3496 <_upload_message+0x44>
    3478:	e5 eb       	ldi	r30, 0xB5	; 181
    347a:	f8 e1       	ldi	r31, 0x18	; 24
    347c:	01 90       	ld	r0, Z+
    347e:	00 20       	and	r0, r0
    3480:	e9 f7       	brne	.-6      	; 0x347c <_upload_message+0x2a>
    3482:	31 97       	sbiw	r30, 0x01	; 1
    3484:	80 e2       	ldi	r24, 0x20	; 32
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	80 83       	st	Z, r24
    348c:	be 01       	movw	r22, r28
    348e:	85 eb       	ldi	r24, 0xB5	; 181
    3490:	98 e1       	ldi	r25, 0x18	; 24
    3492:	0e 94 18 28 	call	0x5030	; 0x5030 <strcat>
    3496:	e5 eb       	ldi	r30, 0xB5	; 181
    3498:	f8 e1       	ldi	r31, 0x18	; 24
    349a:	df 01       	movw	r26, r30
    349c:	0d 90       	ld	r0, X+
    349e:	00 20       	and	r0, r0
    34a0:	e9 f7       	brne	.-6      	; 0x349c <_upload_message+0x4a>
    34a2:	11 97       	sbiw	r26, 0x01	; 1
    34a4:	8d e0       	ldi	r24, 0x0D	; 13
    34a6:	9a e0       	ldi	r25, 0x0A	; 10
    34a8:	11 96       	adiw	r26, 0x01	; 1
    34aa:	9c 93       	st	X, r25
    34ac:	8e 93       	st	-X, r24
    34ae:	12 96       	adiw	r26, 0x02	; 2
    34b0:	1c 92       	st	X, r1
    34b2:	01 90       	ld	r0, Z+
    34b4:	00 20       	and	r0, r0
    34b6:	e9 f7       	brne	.-6      	; 0x34b2 <_upload_message+0x60>
    34b8:	31 97       	sbiw	r30, 0x01	; 1
    34ba:	e5 5b       	subi	r30, 0xB5	; 181
    34bc:	f8 41       	sbci	r31, 0x18	; 24
    34be:	ae 2f       	mov	r26, r30
    34c0:	85 eb       	ldi	r24, 0xB5	; 181
    34c2:	98 e1       	ldi	r25, 0x18	; 24
    34c4:	ac 01       	movw	r20, r24
    34c6:	6a 2f       	mov	r22, r26
    34c8:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_rn2483_serial>
    34cc:	90 91 1f 19 	lds	r25, 0x191F	; 0x80191f <_rn2483_serial+0x1>
    34d0:	af d5       	rcall	.+2910   	; 0x4030 <serial_send_bytes>
    34d2:	81 11       	cpse	r24, r1
    34d4:	11 c0       	rjmp	.+34     	; 0x34f8 <_upload_message+0xa6>
    34d6:	08 e2       	ldi	r16, 0x28	; 40
    34d8:	15 e0       	ldi	r17, 0x05	; 5
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4d e2       	ldi	r20, 0x2D	; 45
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	65 ea       	ldi	r22, 0xA5	; 165
    34e4:	79 e1       	ldi	r23, 0x19	; 25
    34e6:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serial_reply_buffer_handle>
    34ea:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serial_reply_buffer_handle+0x1>
    34ee:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xStreamBufferReceive>
    34f2:	85 ea       	ldi	r24, 0xA5	; 165
    34f4:	99 e1       	ldi	r25, 0x19	; 25
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <_upload_message+0xaa>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	1f 91       	pop	r17
    3502:	0f 91       	pop	r16
    3504:	08 95       	ret

00003506 <_reply2return_code>:
    3506:	2f 92       	push	r2
    3508:	3f 92       	push	r3
    350a:	4f 92       	push	r4
    350c:	5f 92       	push	r5
    350e:	6f 92       	push	r6
    3510:	7f 92       	push	r7
    3512:	8f 92       	push	r8
    3514:	9f 92       	push	r9
    3516:	af 92       	push	r10
    3518:	bf 92       	push	r11
    351a:	cf 92       	push	r12
    351c:	df 92       	push	r13
    351e:	ef 92       	push	r14
    3520:	ff 92       	push	r15
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	5c 01       	movw	r10, r24
    352c:	fc 01       	movw	r30, r24
    352e:	01 90       	ld	r0, Z+
    3530:	00 20       	and	r0, r0
    3532:	e9 f7       	brne	.-6      	; 0x352e <_reply2return_code+0x28>
    3534:	31 97       	sbiw	r30, 0x01	; 1
    3536:	6f 01       	movw	r12, r30
    3538:	c8 1a       	sub	r12, r24
    353a:	d9 0a       	sbc	r13, r25
    353c:	5c 2c       	mov	r5, r12
    353e:	0f 2e       	mov	r0, r31
    3540:	f3 ea       	ldi	r31, 0xA3	; 163
    3542:	8f 2e       	mov	r8, r31
    3544:	f7 e0       	ldi	r31, 0x07	; 7
    3546:	9f 2e       	mov	r9, r31
    3548:	f0 2d       	mov	r31, r0
    354a:	e1 2c       	mov	r14, r1
    354c:	f1 2c       	mov	r15, r1
    354e:	4c 2c       	mov	r4, r12
    3550:	37 01       	movw	r6, r14
    3552:	f4 01       	movw	r30, r8
    3554:	01 81       	ldd	r16, Z+1	; 0x01
    3556:	12 81       	ldd	r17, Z+2	; 0x02
    3558:	e8 01       	movw	r28, r16
    355a:	09 90       	ld	r0, Y+
    355c:	00 20       	and	r0, r0
    355e:	e9 f7       	brne	.-6      	; 0x355a <_reply2return_code+0x54>
    3560:	21 97       	sbiw	r28, 0x01	; 1
    3562:	c0 1b       	sub	r28, r16
    3564:	d1 0b       	sbc	r29, r17
    3566:	3c 2e       	mov	r3, r28
    3568:	f9 e0       	ldi	r31, 0x09	; 9
    356a:	cf 16       	cp	r12, r31
    356c:	d1 04       	cpc	r13, r1
    356e:	58 f0       	brcs	.+22     	; 0x3586 <_reply2return_code+0x80>
    3570:	f4 01       	movw	r30, r8
    3572:	20 80       	ld	r2, Z
    3574:	fe e0       	ldi	r31, 0x0E	; 14
    3576:	2f 12       	cpse	r2, r31
    3578:	06 c0       	rjmp	.+12     	; 0x3586 <_reply2return_code+0x80>
    357a:	b8 01       	movw	r22, r16
    357c:	c5 01       	movw	r24, r10
    357e:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <strcasestr>
    3582:	89 2b       	or	r24, r25
    3584:	09 f5       	brne	.+66     	; 0x35c8 <_reply2return_code+0xc2>
    3586:	44 2d       	mov	r20, r4
    3588:	35 14       	cp	r3, r5
    358a:	08 f4       	brcc	.+2      	; 0x358e <_reply2return_code+0x88>
    358c:	4c 2f       	mov	r20, r28
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	b8 01       	movw	r22, r16
    3592:	c5 01       	movw	r24, r10
    3594:	0e 94 2a 28 	call	0x5054	; 0x5054 <strncasecmp>
    3598:	89 2b       	or	r24, r25
    359a:	49 f4       	brne	.+18     	; 0x35ae <_reply2return_code+0xa8>
    359c:	f3 01       	movw	r30, r6
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	e6 0d       	add	r30, r6
    35a4:	f7 1d       	adc	r31, r7
    35a6:	ed 55       	subi	r30, 0x5D	; 93
    35a8:	f8 4f       	sbci	r31, 0xF8	; 248
    35aa:	20 80       	ld	r2, Z
    35ac:	0d c0       	rjmp	.+26     	; 0x35c8 <_reply2return_code+0xc2>
    35ae:	8f ef       	ldi	r24, 0xFF	; 255
    35b0:	e8 1a       	sub	r14, r24
    35b2:	f8 0a       	sbc	r15, r24
    35b4:	e3 e0       	ldi	r30, 0x03	; 3
    35b6:	8e 0e       	add	r8, r30
    35b8:	91 1c       	adc	r9, r1
    35ba:	f1 e1       	ldi	r31, 0x11	; 17
    35bc:	ef 16       	cp	r14, r31
    35be:	f1 04       	cpc	r15, r1
    35c0:	39 f6       	brne	.-114    	; 0x3550 <_reply2return_code+0x4a>
    35c2:	68 94       	set
    35c4:	22 24       	eor	r2, r2
    35c6:	24 f8       	bld	r2, 4
    35c8:	82 2d       	mov	r24, r2
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	ff 90       	pop	r15
    35d4:	ef 90       	pop	r14
    35d6:	df 90       	pop	r13
    35d8:	cf 90       	pop	r12
    35da:	bf 90       	pop	r11
    35dc:	af 90       	pop	r10
    35de:	9f 90       	pop	r9
    35e0:	8f 90       	pop	r8
    35e2:	7f 90       	pop	r7
    35e4:	6f 90       	pop	r6
    35e6:	5f 90       	pop	r5
    35e8:	4f 90       	pop	r4
    35ea:	3f 90       	pop	r3
    35ec:	2f 90       	pop	r2
    35ee:	08 95       	ret

000035f0 <_upload_message_rc>:
    35f0:	30 df       	rcall	.-416    	; 0x3452 <_upload_message>
    35f2:	89 cf       	rjmp	.-238    	; 0x3506 <_reply2return_code>
    35f4:	08 95       	ret

000035f6 <lora_driver_flush_buffers>:
    35f6:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serial_reply_buffer_handle>
    35fa:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serial_reply_buffer_handle+0x1>
    35fe:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <xStreamBufferReset>
    3602:	08 95       	ret

00003604 <lora_driver_create>:
    3604:	8f 92       	push	r8
    3606:	9f 92       	push	r9
    3608:	af 92       	push	r10
    360a:	cf 92       	push	r12
    360c:	ef 92       	push	r14
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	cf 93       	push	r28
    3614:	c8 2f       	mov	r28, r24
    3616:	8b 01       	movw	r16, r22
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	60 e0       	ldi	r22, 0x00	; 0
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	88 ec       	ldi	r24, 0xC8	; 200
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	0e 94 22 0b 	call	0x1644	; 0x1644 <xStreamBufferGenericCreate>
    3626:	90 93 1d 19 	sts	0x191D, r25	; 0x80191d <_serial_reply_buffer_handle+0x1>
    362a:	80 93 1c 19 	sts	0x191C, r24	; 0x80191c <_serial_reply_buffer_handle>
    362e:	10 93 1b 19 	sts	0x191B, r17	; 0x80191b <_downlinkMessageBuffer+0x1>
    3632:	00 93 1a 19 	sts	0x191A, r16	; 0x80191a <_downlinkMessageBuffer>
    3636:	0f 2e       	mov	r0, r31
    3638:	f3 ee       	ldi	r31, 0xE3	; 227
    363a:	8f 2e       	mov	r8, r31
    363c:	f9 e1       	ldi	r31, 0x19	; 25
    363e:	9f 2e       	mov	r9, r31
    3640:	f0 2d       	mov	r31, r0
    3642:	68 94       	set
    3644:	aa 24       	eor	r10, r10
    3646:	a6 f8       	bld	r10, 6
    3648:	68 94       	set
    364a:	cc 24       	eor	r12, r12
    364c:	c6 f8       	bld	r12, 6
    364e:	e1 2c       	mov	r14, r1
    3650:	00 e0       	ldi	r16, 0x00	; 0
    3652:	23 e0       	ldi	r18, 0x03	; 3
    3654:	40 e0       	ldi	r20, 0x00	; 0
    3656:	51 ee       	ldi	r21, 0xE1	; 225
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	8c 2f       	mov	r24, r28
    365e:	2c d4       	rcall	.+2136   	; 0x3eb8 <serial_new_instance>
    3660:	90 93 1f 19 	sts	0x191F, r25	; 0x80191f <_rn2483_serial+0x1>
    3664:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_rn2483_serial>
    3668:	e0 91 0d 1a 	lds	r30, 0x1A0D	; 0x801a0d <register_access+0x8>
    366c:	f0 91 0e 1a 	lds	r31, 0x1A0E	; 0x801a0e <register_access+0x9>
    3670:	64 e0       	ldi	r22, 0x04	; 4
    3672:	87 e0       	ldi	r24, 0x07	; 7
    3674:	91 e0       	ldi	r25, 0x01	; 1
    3676:	19 95       	eicall
    3678:	cf 91       	pop	r28
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    367e:	ef 90       	pop	r14
    3680:	cf 90       	pop	r12
    3682:	af 90       	pop	r10
    3684:	9f 90       	pop	r9
    3686:	8f 90       	pop	r8
    3688:	08 95       	ret

0000368a <lora_driver_reset_rn2483>:
    368a:	88 23       	and	r24, r24
    368c:	49 f0       	breq	.+18     	; 0x36a0 <lora_driver_reset_rn2483+0x16>
    368e:	e0 91 17 1a 	lds	r30, 0x1A17	; 0x801a17 <register_access+0x12>
    3692:	f0 91 18 1a 	lds	r31, 0x1A18	; 0x801a18 <register_access+0x13>
    3696:	64 e0       	ldi	r22, 0x04	; 4
    3698:	88 e0       	ldi	r24, 0x08	; 8
    369a:	91 e0       	ldi	r25, 0x01	; 1
    369c:	19 95       	eicall
    369e:	08 95       	ret
    36a0:	e0 91 0d 1a 	lds	r30, 0x1A0D	; 0x801a0d <register_access+0x8>
    36a4:	f0 91 0e 1a 	lds	r31, 0x1A0E	; 0x801a0e <register_access+0x9>
    36a8:	64 e0       	ldi	r22, 0x04	; 4
    36aa:	88 e0       	ldi	r24, 0x08	; 8
    36ac:	91 e0       	ldi	r25, 0x01	; 1
    36ae:	19 95       	eicall
    36b0:	08 95       	ret

000036b2 <lora_driver_rn2483_factory_reset>:
    36b2:	60 e0       	ldi	r22, 0x00	; 0
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	89 e2       	ldi	r24, 0x29	; 41
    36b8:	95 e0       	ldi	r25, 0x05	; 5
    36ba:	cb de       	rcall	.-618    	; 0x3452 <_upload_message>
    36bc:	e5 ea       	ldi	r30, 0xA5	; 165
    36be:	f9 e1       	ldi	r31, 0x19	; 25
    36c0:	01 90       	ld	r0, Z+
    36c2:	00 20       	and	r0, r0
    36c4:	e9 f7       	brne	.-6      	; 0x36c0 <lora_driver_rn2483_factory_reset+0xe>
    36c6:	31 97       	sbiw	r30, 0x01	; 1
    36c8:	e5 5a       	subi	r30, 0xA5	; 165
    36ca:	f9 41       	sbci	r31, 0x19	; 25
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	75 97       	sbiw	r30, 0x15	; 21
    36d0:	08 f0       	brcs	.+2      	; 0x36d4 <lora_driver_rn2483_factory_reset+0x22>
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	08 95       	ret

000036d6 <lora_driver_get_rn2483_hweui>:
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	ec 01       	movw	r28, r24
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	8a e3       	ldi	r24, 0x3A	; 58
    36e2:	95 e0       	ldi	r25, 0x05	; 5
    36e4:	b6 de       	rcall	.-660    	; 0x3452 <_upload_message>
    36e6:	e5 ea       	ldi	r30, 0xA5	; 165
    36e8:	f9 e1       	ldi	r31, 0x19	; 25
    36ea:	01 90       	ld	r0, Z+
    36ec:	00 20       	and	r0, r0
    36ee:	e9 f7       	brne	.-6      	; 0x36ea <lora_driver_get_rn2483_hweui+0x14>
    36f0:	e6 5b       	subi	r30, 0xB6	; 182
    36f2:	f9 41       	sbci	r31, 0x19	; 25
    36f4:	39 f4       	brne	.+14     	; 0x3704 <lora_driver_get_rn2483_hweui+0x2e>
    36f6:	65 ea       	ldi	r22, 0xA5	; 165
    36f8:	79 e1       	ldi	r23, 0x19	; 25
    36fa:	ce 01       	movw	r24, r28
    36fc:	0e 94 23 28 	call	0x5046	; 0x5046 <strcpy>
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	02 c0       	rjmp	.+4      	; 0x3708 <lora_driver_get_rn2483_hweui+0x32>
    3704:	18 82       	st	Y, r1
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	08 95       	ret

0000370e <lora_driver_set_device_identifier>:
    370e:	fc 01       	movw	r30, r24
    3710:	01 90       	ld	r0, Z+
    3712:	00 20       	and	r0, r0
    3714:	e9 f7       	brne	.-6      	; 0x3710 <lora_driver_set_device_identifier+0x2>
    3716:	9f 01       	movw	r18, r30
    3718:	21 51       	subi	r18, 0x11	; 17
    371a:	31 09       	sbc	r19, r1
    371c:	28 17       	cp	r18, r24
    371e:	39 07       	cpc	r19, r25
    3720:	29 f4       	brne	.+10     	; 0x372c <lora_driver_set_device_identifier+0x1e>
    3722:	bc 01       	movw	r22, r24
    3724:	88 e6       	ldi	r24, 0x68	; 104
    3726:	95 e0       	ldi	r25, 0x05	; 5
    3728:	63 cf       	rjmp	.-314    	; 0x35f0 <_upload_message_rc>
    372a:	08 95       	ret
    372c:	89 e0       	ldi	r24, 0x09	; 9
    372e:	08 95       	ret

00003730 <lora_driver_set_application_identifier>:
    3730:	fc 01       	movw	r30, r24
    3732:	01 90       	ld	r0, Z+
    3734:	00 20       	and	r0, r0
    3736:	e9 f7       	brne	.-6      	; 0x3732 <lora_driver_set_application_identifier+0x2>
    3738:	9f 01       	movw	r18, r30
    373a:	21 51       	subi	r18, 0x11	; 17
    373c:	31 09       	sbc	r19, r1
    373e:	28 17       	cp	r18, r24
    3740:	39 07       	cpc	r19, r25
    3742:	29 f4       	brne	.+10     	; 0x374e <lora_driver_set_application_identifier+0x1e>
    3744:	bc 01       	movw	r22, r24
    3746:	87 e7       	ldi	r24, 0x77	; 119
    3748:	95 e0       	ldi	r25, 0x05	; 5
    374a:	52 cf       	rjmp	.-348    	; 0x35f0 <_upload_message_rc>
    374c:	08 95       	ret
    374e:	89 e0       	ldi	r24, 0x09	; 9
    3750:	08 95       	ret

00003752 <lora_driver_set_application_key>:
    3752:	fc 01       	movw	r30, r24
    3754:	01 90       	ld	r0, Z+
    3756:	00 20       	and	r0, r0
    3758:	e9 f7       	brne	.-6      	; 0x3754 <lora_driver_set_application_key+0x2>
    375a:	9f 01       	movw	r18, r30
    375c:	21 52       	subi	r18, 0x21	; 33
    375e:	31 09       	sbc	r19, r1
    3760:	28 17       	cp	r18, r24
    3762:	39 07       	cpc	r19, r25
    3764:	29 f4       	brne	.+10     	; 0x3770 <lora_driver_set_application_key+0x1e>
    3766:	bc 01       	movw	r22, r24
    3768:	86 e8       	ldi	r24, 0x86	; 134
    376a:	95 e0       	ldi	r25, 0x05	; 5
    376c:	41 cf       	rjmp	.-382    	; 0x35f0 <_upload_message_rc>
    376e:	08 95       	ret
    3770:	89 e0       	ldi	r24, 0x09	; 9
    3772:	08 95       	ret

00003774 <lora_driver_save_mac>:
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	85 ec       	ldi	r24, 0xC5	; 197
    377a:	95 e0       	ldi	r25, 0x05	; 5
    377c:	39 cf       	rjmp	.-398    	; 0x35f0 <_upload_message_rc>
    377e:	08 95       	ret

00003780 <lora_driver_join>:
    3780:	0f 93       	push	r16
    3782:	1f 93       	push	r17
    3784:	e8 2f       	mov	r30, r24
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	ee 0f       	add	r30, r30
    378a:	ff 1f       	adc	r31, r31
    378c:	e1 56       	subi	r30, 0x61	; 97
    378e:	f8 4f       	sbci	r31, 0xF8	; 248
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	8e ec       	ldi	r24, 0xCE	; 206
    3796:	95 e0       	ldi	r25, 0x05	; 5
    3798:	2b df       	rcall	.-426    	; 0x35f0 <_upload_message_rc>
    379a:	81 11       	cpse	r24, r1
    379c:	14 c0       	rjmp	.+40     	; 0x37c6 <lora_driver_join+0x46>
    379e:	08 e2       	ldi	r16, 0x28	; 40
    37a0:	15 e0       	ldi	r17, 0x05	; 5
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	4d e2       	ldi	r20, 0x2D	; 45
    37a8:	50 e0       	ldi	r21, 0x00	; 0
    37aa:	65 ea       	ldi	r22, 0xA5	; 165
    37ac:	79 e1       	ldi	r23, 0x19	; 25
    37ae:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serial_reply_buffer_handle>
    37b2:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serial_reply_buffer_handle+0x1>
    37b6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xStreamBufferReceive>
    37ba:	88 23       	and	r24, r24
    37bc:	21 f0       	breq	.+8      	; 0x37c6 <lora_driver_join+0x46>
    37be:	85 ea       	ldi	r24, 0xA5	; 165
    37c0:	99 e1       	ldi	r25, 0x19	; 25
    37c2:	a1 de       	rcall	.-702    	; 0x3506 <_reply2return_code>
    37c4:	03 c0       	rjmp	.+6      	; 0x37cc <lora_driver_join+0x4c>
    37c6:	85 ea       	ldi	r24, 0xA5	; 165
    37c8:	99 e1       	ldi	r25, 0x19	; 25
    37ca:	9d de       	rcall	.-710    	; 0x3506 <_reply2return_code>
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	08 95       	ret

000037d2 <lora_driver_sent_upload_message>:
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	1f 92       	push	r1
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	db 01       	movw	r26, r22
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	9c 91       	ld	r25, X
    37e6:	11 97       	sbiw	r26, 0x01	; 1
    37e8:	95 31       	cpi	r25, 0x15	; 21
    37ea:	08 f0       	brcs	.+2      	; 0x37ee <lora_driver_sent_upload_message+0x1c>
    37ec:	b4 c0       	rjmp	.+360    	; 0x3956 <lora_driver_sent_upload_message+0x184>
    37ee:	99 23       	and	r25, r25
    37f0:	81 f1       	breq	.+96     	; 0x3852 <lora_driver_sent_upload_message+0x80>
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	27 2f       	mov	r18, r23
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	46 2f       	mov	r20, r22
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	fd 01       	movw	r30, r26
    3800:	e4 0f       	add	r30, r20
    3802:	f5 1f       	adc	r31, r21
    3804:	92 81       	ldd	r25, Z+2	; 0x02
    3806:	92 95       	swap	r25
    3808:	9f 70       	andi	r25, 0x0F	; 15
    380a:	9a 30       	cpi	r25, 0x0A	; 10
    380c:	10 f0       	brcs	.+4      	; 0x3812 <lora_driver_sent_upload_message+0x40>
    380e:	99 5c       	subi	r25, 0xC9	; 201
    3810:	01 c0       	rjmp	.+2      	; 0x3814 <lora_driver_sent_upload_message+0x42>
    3812:	90 5d       	subi	r25, 0xD0	; 208
    3814:	f9 01       	movw	r30, r18
    3816:	ea 5c       	subi	r30, 0xCA	; 202
    3818:	f6 4e       	sbci	r31, 0xE6	; 230
    381a:	90 83       	st	Z, r25
    381c:	2f 5f       	subi	r18, 0xFF	; 255
    381e:	3f 4f       	sbci	r19, 0xFF	; 255
    3820:	fd 01       	movw	r30, r26
    3822:	e4 0f       	add	r30, r20
    3824:	f5 1f       	adc	r31, r21
    3826:	92 81       	ldd	r25, Z+2	; 0x02
    3828:	9f 70       	andi	r25, 0x0F	; 15
    382a:	49 2f       	mov	r20, r25
    382c:	50 e0       	ldi	r21, 0x00	; 0
    382e:	4a 30       	cpi	r20, 0x0A	; 10
    3830:	51 05       	cpc	r21, r1
    3832:	14 f0       	brlt	.+4      	; 0x3838 <lora_driver_sent_upload_message+0x66>
    3834:	99 5c       	subi	r25, 0xC9	; 201
    3836:	01 c0       	rjmp	.+2      	; 0x383a <lora_driver_sent_upload_message+0x68>
    3838:	90 5d       	subi	r25, 0xD0	; 208
    383a:	f9 01       	movw	r30, r18
    383c:	ea 5c       	subi	r30, 0xCA	; 202
    383e:	f6 4e       	sbci	r31, 0xE6	; 230
    3840:	90 83       	st	Z, r25
    3842:	7e 5f       	subi	r23, 0xFE	; 254
    3844:	6f 5f       	subi	r22, 0xFF	; 255
    3846:	11 96       	adiw	r26, 0x01	; 1
    3848:	9c 91       	ld	r25, X
    384a:	11 97       	sbiw	r26, 0x01	; 1
    384c:	69 17       	cp	r22, r25
    384e:	98 f2       	brcs	.-90     	; 0x37f6 <lora_driver_sent_upload_message+0x24>
    3850:	01 c0       	rjmp	.+2      	; 0x3854 <lora_driver_sent_upload_message+0x82>
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	e7 2f       	mov	r30, r23
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	ea 5c       	subi	r30, 0xCA	; 202
    385a:	f6 4e       	sbci	r31, 0xE6	; 230
    385c:	10 82       	st	Z, r1
    385e:	4c 91       	ld	r20, X
    3860:	81 11       	cpse	r24, r1
    3862:	03 c0       	rjmp	.+6      	; 0x386a <lora_driver_sent_upload_message+0x98>
    3864:	87 ed       	ldi	r24, 0xD7	; 215
    3866:	95 e0       	ldi	r25, 0x05	; 5
    3868:	02 c0       	rjmp	.+4      	; 0x386e <lora_driver_sent_upload_message+0x9c>
    386a:	89 ed       	ldi	r24, 0xD9	; 217
    386c:	95 e0       	ldi	r25, 0x05	; 5
    386e:	26 e3       	ldi	r18, 0x36	; 54
    3870:	39 e1       	ldi	r19, 0x19	; 25
    3872:	3f 93       	push	r19
    3874:	2f 93       	push	r18
    3876:	1f 92       	push	r1
    3878:	4f 93       	push	r20
    387a:	9f 93       	push	r25
    387c:	8f 93       	push	r24
    387e:	8d ed       	ldi	r24, 0xDD	; 221
    3880:	95 e0       	ldi	r25, 0x05	; 5
    3882:	9f 93       	push	r25
    3884:	8f 93       	push	r24
    3886:	88 e7       	ldi	r24, 0x78	; 120
    3888:	99 e1       	ldi	r25, 0x19	; 25
    388a:	9f 93       	push	r25
    388c:	8f 93       	push	r24
    388e:	0e 94 85 28 	call	0x510a	; 0x510a <sprintf>
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	88 e7       	ldi	r24, 0x78	; 120
    3898:	99 e1       	ldi	r25, 0x19	; 25
    389a:	aa de       	rcall	.-684    	; 0x35f0 <_upload_message_rc>
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	81 11       	cpse	r24, r1
    38a8:	59 c0       	rjmp	.+178    	; 0x395c <lora_driver_sent_upload_message+0x18a>
    38aa:	08 e2       	ldi	r16, 0x28	; 40
    38ac:	15 e0       	ldi	r17, 0x05	; 5
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	4d e2       	ldi	r20, 0x2D	; 45
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	65 ea       	ldi	r22, 0xA5	; 165
    38b8:	79 e1       	ldi	r23, 0x19	; 25
    38ba:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serial_reply_buffer_handle>
    38be:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serial_reply_buffer_handle+0x1>
    38c2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xStreamBufferReceive>
    38c6:	88 23       	and	r24, r24
    38c8:	09 f4       	brne	.+2      	; 0x38cc <lora_driver_sent_upload_message+0xfa>
    38ca:	47 c0       	rjmp	.+142    	; 0x395a <lora_driver_sent_upload_message+0x188>
    38cc:	85 ea       	ldi	r24, 0xA5	; 165
    38ce:	99 e1       	ldi	r25, 0x19	; 25
    38d0:	1a de       	rcall	.-972    	; 0x3506 <_reply2return_code>
    38d2:	8e 30       	cpi	r24, 0x0E	; 14
    38d4:	09 f0       	breq	.+2      	; 0x38d8 <lora_driver_sent_upload_message+0x106>
    38d6:	42 c0       	rjmp	.+132    	; 0x395c <lora_driver_sent_upload_message+0x18a>
    38d8:	87 e0       	ldi	r24, 0x07	; 7
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_downlinkMessageBuffer>
    38e0:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_downlinkMessageBuffer+0x1>
    38e4:	89 2b       	or	r24, r25
    38e6:	a9 f1       	breq	.+106    	; 0x3952 <lora_driver_sent_upload_message+0x180>
    38e8:	be 01       	movw	r22, r28
    38ea:	6f 5f       	subi	r22, 0xFF	; 255
    38ec:	7f 4f       	sbci	r23, 0xFF	; 255
    38ee:	85 ea       	ldi	r24, 0xA5	; 165
    38f0:	99 e1       	ldi	r25, 0x19	; 25
    38f2:	68 d1       	rcall	.+720    	; 0x3bc4 <decode_port_no>
    38f4:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <_downlink_payload>
    38f8:	e9 81       	ldd	r30, Y+1	; 0x01
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	eb 55       	subi	r30, 0x5B	; 91
    38fe:	f6 4e       	sbci	r31, 0xE6	; 230
    3900:	df 01       	movw	r26, r30
    3902:	0d 90       	ld	r0, X+
    3904:	00 20       	and	r0, r0
    3906:	e9 f7       	brne	.-6      	; 0x3902 <lora_driver_sent_upload_message+0x130>
    3908:	11 97       	sbiw	r26, 0x01	; 1
    390a:	ae 1b       	sub	r26, r30
    390c:	bf 0b       	sbc	r27, r31
    390e:	aa 23       	and	r26, r26
    3910:	91 f0       	breq	.+36     	; 0x3936 <lora_driver_sent_upload_message+0x164>
    3912:	bb 27       	eor	r27, r27
    3914:	cd 01       	movw	r24, r26
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	9c 01       	movw	r18, r24
    391a:	12 f4       	brpl	.+4      	; 0x3920 <lora_driver_sent_upload_message+0x14e>
    391c:	2f 5f       	subi	r18, 0xFF	; 255
    391e:	3f 4f       	sbci	r19, 0xFF	; 255
    3920:	35 95       	asr	r19
    3922:	27 95       	ror	r18
    3924:	20 93 21 19 	sts	0x1921, r18	; 0x801921 <_downlink_payload+0x1>
    3928:	af 01       	movw	r20, r30
    392a:	4f 5f       	subi	r20, 0xFF	; 255
    392c:	5f 4f       	sbci	r21, 0xFF	; 255
    392e:	64 e1       	ldi	r22, 0x14	; 20
    3930:	82 e2       	ldi	r24, 0x22	; 34
    3932:	99 e1       	ldi	r25, 0x19	; 25
    3934:	73 d1       	rcall	.+742    	; 0x3c1c <decode_hexadecimal_string_bytes>
    3936:	01 e0       	ldi	r16, 0x01	; 1
    3938:	10 e0       	ldi	r17, 0x00	; 0
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	46 e1       	ldi	r20, 0x16	; 22
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	60 e2       	ldi	r22, 0x20	; 32
    3944:	79 e1       	ldi	r23, 0x19	; 25
    3946:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_downlinkMessageBuffer>
    394a:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_downlinkMessageBuffer+0x1>
    394e:	0e 94 8d 0b 	call	0x171a	; 0x171a <xStreamBufferSend>
    3952:	8e e0       	ldi	r24, 0x0E	; 14
    3954:	03 c0       	rjmp	.+6      	; 0x395c <lora_driver_sent_upload_message+0x18a>
    3956:	84 e1       	ldi	r24, 0x14	; 20
    3958:	01 c0       	rjmp	.+2      	; 0x395c <lora_driver_sent_upload_message+0x18a>
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	0f 90       	pop	r0
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	1f 91       	pop	r17
    3964:	0f 91       	pop	r16
    3966:	08 95       	ret

00003968 <lora_driver_set_adaptive_data_rate>:
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	19 f0       	breq	.+6      	; 0x3972 <lora_driver_set_adaptive_data_rate+0xa>
    396c:	6d ee       	ldi	r22, 0xED	; 237
    396e:	75 e0       	ldi	r23, 0x05	; 5
    3970:	02 c0       	rjmp	.+4      	; 0x3976 <lora_driver_set_adaptive_data_rate+0xe>
    3972:	66 ec       	ldi	r22, 0xC6	; 198
    3974:	76 e0       	ldi	r23, 0x06	; 6
    3976:	81 ef       	ldi	r24, 0xF1	; 241
    3978:	95 e0       	ldi	r25, 0x05	; 5
    397a:	3a ce       	rjmp	.-908    	; 0x35f0 <_upload_message_rc>
    397c:	08 95       	ret

0000397e <lora_driver_set_receive_delay>:
    397e:	9f 93       	push	r25
    3980:	8f 93       	push	r24
    3982:	82 e2       	ldi	r24, 0x22	; 34
    3984:	96 e0       	ldi	r25, 0x06	; 6
    3986:	9f 93       	push	r25
    3988:	8f 93       	push	r24
    398a:	88 e7       	ldi	r24, 0x78	; 120
    398c:	99 e1       	ldi	r25, 0x19	; 25
    398e:	9f 93       	push	r25
    3990:	8f 93       	push	r24
    3992:	0e 94 85 28 	call	0x510a	; 0x510a <sprintf>
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	88 e7       	ldi	r24, 0x78	; 120
    399c:	99 e1       	ldi	r25, 0x19	; 25
    399e:	28 de       	rcall	.-944    	; 0x35f0 <_upload_message_rc>
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	08 95       	ret

000039ae <lora_driver_configure_to_eu868>:
    39ae:	2f 92       	push	r2
    39b0:	3f 92       	push	r3
    39b2:	4f 92       	push	r4
    39b4:	5f 92       	push	r5
    39b6:	6f 92       	push	r6
    39b8:	7f 92       	push	r7
    39ba:	8f 92       	push	r8
    39bc:	9f 92       	push	r9
    39be:	af 92       	push	r10
    39c0:	bf 92       	push	r11
    39c2:	cf 92       	push	r12
    39c4:	df 92       	push	r13
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	a0 97       	sbiw	r28, 0x20	; 32
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	6f e4       	ldi	r22, 0x4F	; 79
    39e4:	76 e0       	ldi	r23, 0x06	; 6
    39e6:	8b e5       	ldi	r24, 0x5B	; 91
    39e8:	96 e0       	ldi	r25, 0x06	; 6
    39ea:	33 dd       	rcall	.-1434   	; 0x3452 <_upload_message>
    39ec:	8c dd       	rcall	.-1256   	; 0x3506 <_reply2return_code>
    39ee:	81 11       	cpse	r24, r1
    39f0:	a3 c0       	rjmp	.+326    	; 0x3b38 <lora_driver_configure_to_eu868+0x18a>
    39f2:	80 e2       	ldi	r24, 0x20	; 32
    39f4:	e1 e2       	ldi	r30, 0x21	; 33
    39f6:	f2 e0       	ldi	r31, 0x02	; 2
    39f8:	de 01       	movw	r26, r28
    39fa:	11 96       	adiw	r26, 0x01	; 1
    39fc:	01 90       	ld	r0, Z+
    39fe:	0d 92       	st	X+, r0
    3a00:	8a 95       	dec	r24
    3a02:	e1 f7       	brne	.-8      	; 0x39fc <lora_driver_configure_to_eu868+0x4e>
    3a04:	9e 01       	movw	r18, r28
    3a06:	2f 5f       	subi	r18, 0xFF	; 255
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0a:	69 01       	movw	r12, r18
    3a0c:	e1 2c       	mov	r14, r1
    3a0e:	f1 2c       	mov	r15, r1
    3a10:	0f 2e       	mov	r0, r31
    3a12:	f7 e6       	ldi	r31, 0x67	; 103
    3a14:	af 2e       	mov	r10, r31
    3a16:	f6 e0       	ldi	r31, 0x06	; 6
    3a18:	bf 2e       	mov	r11, r31
    3a1a:	f0 2d       	mov	r31, r0
    3a1c:	08 e7       	ldi	r16, 0x78	; 120
    3a1e:	19 e1       	ldi	r17, 0x19	; 25
    3a20:	0f 2e       	mov	r0, r31
    3a22:	f0 e8       	ldi	r31, 0x80	; 128
    3a24:	4f 2e       	mov	r4, r31
    3a26:	f6 e0       	ldi	r31, 0x06	; 6
    3a28:	5f 2e       	mov	r5, r31
    3a2a:	f0 2d       	mov	r31, r0
    3a2c:	0f 2e       	mov	r0, r31
    3a2e:	f7 e9       	ldi	r31, 0x97	; 151
    3a30:	8f 2e       	mov	r8, r31
    3a32:	f6 e0       	ldi	r31, 0x06	; 6
    3a34:	9f 2e       	mov	r9, r31
    3a36:	f0 2d       	mov	r31, r0
    3a38:	0f 2e       	mov	r0, r31
    3a3a:	f1 eb       	ldi	r31, 0xB1	; 177
    3a3c:	6f 2e       	mov	r6, r31
    3a3e:	f6 e0       	ldi	r31, 0x06	; 6
    3a40:	7f 2e       	mov	r7, r31
    3a42:	f0 2d       	mov	r31, r0
    3a44:	3e 2c       	mov	r3, r14
    3a46:	2f 2c       	mov	r2, r15
    3a48:	ff 92       	push	r15
    3a4a:	ef 92       	push	r14
    3a4c:	bf 92       	push	r11
    3a4e:	af 92       	push	r10
    3a50:	1f 93       	push	r17
    3a52:	0f 93       	push	r16
    3a54:	0e 94 85 28 	call	0x510a	; 0x510a <sprintf>
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	c8 01       	movw	r24, r16
    3a5e:	f9 dc       	rcall	.-1550   	; 0x3452 <_upload_message>
    3a60:	52 dd       	rcall	.-1372   	; 0x3506 <_reply2return_code>
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	81 11       	cpse	r24, r1
    3a70:	63 c0       	rjmp	.+198    	; 0x3b38 <lora_driver_configure_to_eu868+0x18a>
    3a72:	32 e0       	ldi	r19, 0x02	; 2
    3a74:	3e 15       	cp	r19, r14
    3a76:	e8 f4       	brcc	.+58     	; 0x3ab2 <lora_driver_configure_to_eu868+0x104>
    3a78:	f6 01       	movw	r30, r12
    3a7a:	83 81       	ldd	r24, Z+3	; 0x03
    3a7c:	8f 93       	push	r24
    3a7e:	82 81       	ldd	r24, Z+2	; 0x02
    3a80:	8f 93       	push	r24
    3a82:	81 81       	ldd	r24, Z+1	; 0x01
    3a84:	8f 93       	push	r24
    3a86:	80 81       	ld	r24, Z
    3a88:	8f 93       	push	r24
    3a8a:	ff 92       	push	r15
    3a8c:	ef 92       	push	r14
    3a8e:	5f 92       	push	r5
    3a90:	4f 92       	push	r4
    3a92:	1f 93       	push	r17
    3a94:	0f 93       	push	r16
    3a96:	0e 94 85 28 	call	0x510a	; 0x510a <sprintf>
    3a9a:	60 e0       	ldi	r22, 0x00	; 0
    3a9c:	70 e0       	ldi	r23, 0x00	; 0
    3a9e:	c8 01       	movw	r24, r16
    3aa0:	d8 dc       	rcall	.-1616   	; 0x3452 <_upload_message>
    3aa2:	31 dd       	rcall	.-1438   	; 0x3506 <_reply2return_code>
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	81 11       	cpse	r24, r1
    3ab0:	43 c0       	rjmp	.+134    	; 0x3b38 <lora_driver_configure_to_eu868+0x18a>
    3ab2:	2f 92       	push	r2
    3ab4:	3f 92       	push	r3
    3ab6:	9f 92       	push	r9
    3ab8:	8f 92       	push	r8
    3aba:	1f 93       	push	r17
    3abc:	0f 93       	push	r16
    3abe:	0e 94 85 28 	call	0x510a	; 0x510a <sprintf>
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	c8 01       	movw	r24, r16
    3ac8:	c4 dc       	rcall	.-1656   	; 0x3452 <_upload_message>
    3aca:	1d dd       	rcall	.-1478   	; 0x3506 <_reply2return_code>
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	81 11       	cpse	r24, r1
    3ada:	2e c0       	rjmp	.+92     	; 0x3b38 <lora_driver_configure_to_eu868+0x18a>
    3adc:	2f 92       	push	r2
    3ade:	3f 92       	push	r3
    3ae0:	7f 92       	push	r7
    3ae2:	6f 92       	push	r6
    3ae4:	1f 93       	push	r17
    3ae6:	0f 93       	push	r16
    3ae8:	0e 94 85 28 	call	0x510a	; 0x510a <sprintf>
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	c8 01       	movw	r24, r16
    3af2:	af dc       	rcall	.-1698   	; 0x3452 <_upload_message>
    3af4:	08 dd       	rcall	.-1520   	; 0x3506 <_reply2return_code>
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	81 11       	cpse	r24, r1
    3b04:	19 c0       	rjmp	.+50     	; 0x3b38 <lora_driver_configure_to_eu868+0x18a>
    3b06:	3f ef       	ldi	r19, 0xFF	; 255
    3b08:	e3 1a       	sub	r14, r19
    3b0a:	f3 0a       	sbc	r15, r19
    3b0c:	84 e0       	ldi	r24, 0x04	; 4
    3b0e:	c8 0e       	add	r12, r24
    3b10:	d1 1c       	adc	r13, r1
    3b12:	98 e0       	ldi	r25, 0x08	; 8
    3b14:	e9 16       	cp	r14, r25
    3b16:	f1 04       	cpc	r15, r1
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <lora_driver_configure_to_eu868+0x16e>
    3b1a:	94 cf       	rjmp	.-216    	; 0x3a44 <lora_driver_configure_to_eu868+0x96>
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	70 e0       	ldi	r23, 0x00	; 0
    3b20:	89 ec       	ldi	r24, 0xC9	; 201
    3b22:	96 e0       	ldi	r25, 0x06	; 6
    3b24:	96 dc       	rcall	.-1748   	; 0x3452 <_upload_message>
    3b26:	ef dc       	rcall	.-1570   	; 0x3506 <_reply2return_code>
    3b28:	81 11       	cpse	r24, r1
    3b2a:	06 c0       	rjmp	.+12     	; 0x3b38 <lora_driver_configure_to_eu868+0x18a>
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	8a ed       	ldi	r24, 0xDA	; 218
    3b32:	96 e0       	ldi	r25, 0x06	; 6
    3b34:	8e dc       	rcall	.-1764   	; 0x3452 <_upload_message>
    3b36:	e7 dc       	rcall	.-1586   	; 0x3506 <_reply2return_code>
    3b38:	a0 96       	adiw	r28, 0x20	; 32
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
    3b54:	bf 90       	pop	r11
    3b56:	af 90       	pop	r10
    3b58:	9f 90       	pop	r9
    3b5a:	8f 90       	pop	r8
    3b5c:	7f 90       	pop	r7
    3b5e:	6f 90       	pop	r6
    3b60:	5f 90       	pop	r5
    3b62:	4f 90       	pop	r4
    3b64:	3f 90       	pop	r3
    3b66:	2f 90       	pop	r2
    3b68:	08 95       	ret

00003b6a <lora_driver_set_otaa_identity>:
    3b6a:	ef 92       	push	r14
    3b6c:	ff 92       	push	r15
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	ec 01       	movw	r28, r24
    3b78:	8b 01       	movw	r16, r22
    3b7a:	7a 01       	movw	r14, r20
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	f4 de       	rcall	.-536    	; 0x3968 <lora_driver_set_adaptive_data_rate>
    3b80:	81 11       	cpse	r24, r1
    3b82:	0d c0       	rjmp	.+26     	; 0x3b9e <lora_driver_set_otaa_identity+0x34>
    3b84:	ce 01       	movw	r24, r28
    3b86:	d4 dd       	rcall	.-1112   	; 0x3730 <lora_driver_set_application_identifier>
    3b88:	81 11       	cpse	r24, r1
    3b8a:	09 c0       	rjmp	.+18     	; 0x3b9e <lora_driver_set_otaa_identity+0x34>
    3b8c:	c8 01       	movw	r24, r16
    3b8e:	e1 dd       	rcall	.-1086   	; 0x3752 <lora_driver_set_application_key>
    3b90:	81 11       	cpse	r24, r1
    3b92:	05 c0       	rjmp	.+10     	; 0x3b9e <lora_driver_set_otaa_identity+0x34>
    3b94:	c7 01       	movw	r24, r14
    3b96:	bb dd       	rcall	.-1162   	; 0x370e <lora_driver_set_device_identifier>
    3b98:	81 11       	cpse	r24, r1
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <lora_driver_set_otaa_identity+0x34>
    3b9c:	eb dd       	rcall	.-1066   	; 0x3774 <lora_driver_save_mac>
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	1f 91       	pop	r17
    3ba4:	0f 91       	pop	r16
    3ba6:	ff 90       	pop	r15
    3ba8:	ef 90       	pop	r14
    3baa:	08 95       	ret

00003bac <lora_driver_map_return_code_to_text>:
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	fc 01       	movw	r30, r24
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	8e 0f       	add	r24, r30
    3bb6:	9f 1f       	adc	r25, r31
    3bb8:	fc 01       	movw	r30, r24
    3bba:	ed 55       	subi	r30, 0x5D	; 93
    3bbc:	f8 4f       	sbci	r31, 0xF8	; 248
    3bbe:	81 81       	ldd	r24, Z+1	; 0x01
    3bc0:	92 81       	ldd	r25, Z+2	; 0x02
    3bc2:	08 95       	ret

00003bc4 <decode_port_no>:
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	00 97       	sbiw	r24, 0x00	; 0
    3bc8:	29 f1       	breq	.+74     	; 0x3c14 <decode_port_no+0x50>
    3bca:	fb 01       	movw	r30, r22
    3bcc:	20 81       	ld	r18, Z
    3bce:	fc 01       	movw	r30, r24
    3bd0:	01 90       	ld	r0, Z+
    3bd2:	00 20       	and	r0, r0
    3bd4:	e9 f7       	brne	.-6      	; 0x3bd0 <decode_port_no+0xc>
    3bd6:	31 97       	sbiw	r30, 0x01	; 1
    3bd8:	e8 1b       	sub	r30, r24
    3bda:	f9 0b       	sbc	r31, r25
    3bdc:	82 2f       	mov	r24, r18
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	e8 17       	cp	r30, r24
    3be2:	f9 07       	cpc	r31, r25
    3be4:	c8 f0       	brcs	.+50     	; 0x3c18 <decode_port_no+0x54>
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	08 c0       	rjmp	.+16     	; 0x3bfa <decode_port_no+0x36>
    3bea:	88 0f       	add	r24, r24
    3bec:	38 2f       	mov	r19, r24
    3bee:	33 0f       	add	r19, r19
    3bf0:	33 0f       	add	r19, r19
    3bf2:	83 0f       	add	r24, r19
    3bf4:	80 53       	subi	r24, 0x30	; 48
    3bf6:	89 0f       	add	r24, r25
    3bf8:	2f 5f       	subi	r18, 0xFF	; 255
    3bfa:	fd 01       	movw	r30, r26
    3bfc:	e2 0f       	add	r30, r18
    3bfe:	f1 1d       	adc	r31, r1
    3c00:	90 81       	ld	r25, Z
    3c02:	30 ed       	ldi	r19, 0xD0	; 208
    3c04:	39 0f       	add	r19, r25
    3c06:	3a 30       	cpi	r19, 0x0A	; 10
    3c08:	10 f4       	brcc	.+4      	; 0x3c0e <decode_port_no+0x4a>
    3c0a:	91 11       	cpse	r25, r1
    3c0c:	ee cf       	rjmp	.-36     	; 0x3bea <decode_port_no+0x26>
    3c0e:	fb 01       	movw	r30, r22
    3c10:	20 83       	st	Z, r18
    3c12:	08 95       	ret
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	08 95       	ret
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	08 95       	ret

00003c1c <decode_hexadecimal_string_bytes>:
    3c1c:	0f 93       	push	r16
    3c1e:	1f 93       	push	r17
    3c20:	cf 93       	push	r28
    3c22:	df 93       	push	r29
    3c24:	dc 01       	movw	r26, r24
    3c26:	ea 01       	movw	r28, r20
    3c28:	20 97       	sbiw	r28, 0x00	; 0
    3c2a:	e1 f1       	breq	.+120    	; 0x3ca4 <decode_hexadecimal_string_bytes+0x88>
    3c2c:	fa 01       	movw	r30, r20
    3c2e:	01 90       	ld	r0, Z+
    3c30:	00 20       	and	r0, r0
    3c32:	e9 f7       	brne	.-6      	; 0x3c2e <decode_hexadecimal_string_bytes+0x12>
    3c34:	31 97       	sbiw	r30, 0x01	; 1
    3c36:	e4 1b       	sub	r30, r20
    3c38:	f5 0b       	sbc	r31, r21
    3c3a:	32 97       	sbiw	r30, 0x02	; 2
    3c3c:	10 f5       	brcc	.+68     	; 0x3c82 <decode_hexadecimal_string_bytes+0x66>
    3c3e:	32 c0       	rjmp	.+100    	; 0x3ca4 <decode_hexadecimal_string_bytes+0x88>
    3c40:	8d 01       	movw	r16, r26
    3c42:	04 0f       	add	r16, r20
    3c44:	15 1f       	adc	r17, r21
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	ae 01       	movw	r20, r28
    3c4a:	42 0f       	add	r20, r18
    3c4c:	53 1f       	adc	r21, r19
    3c4e:	fa 01       	movw	r30, r20
    3c50:	90 81       	ld	r25, Z
    3c52:	91 34       	cpi	r25, 0x41	; 65
    3c54:	28 f0       	brcs	.+10     	; 0x3c60 <decode_hexadecimal_string_bytes+0x44>
    3c56:	97 53       	subi	r25, 0x37	; 55
    3c58:	59 2f       	mov	r21, r25
    3c5a:	52 95       	swap	r21
    3c5c:	50 7f       	andi	r21, 0xF0	; 240
    3c5e:	03 c0       	rjmp	.+6      	; 0x3c66 <decode_hexadecimal_string_bytes+0x4a>
    3c60:	59 2f       	mov	r21, r25
    3c62:	52 95       	swap	r21
    3c64:	50 7f       	andi	r21, 0xF0	; 240
    3c66:	2c 0f       	add	r18, r28
    3c68:	3d 1f       	adc	r19, r29
    3c6a:	f9 01       	movw	r30, r18
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	91 34       	cpi	r25, 0x41	; 65
    3c70:	10 f0       	brcs	.+4      	; 0x3c76 <decode_hexadecimal_string_bytes+0x5a>
    3c72:	97 53       	subi	r25, 0x37	; 55
    3c74:	01 c0       	rjmp	.+2      	; 0x3c78 <decode_hexadecimal_string_bytes+0x5c>
    3c76:	90 53       	subi	r25, 0x30	; 48
    3c78:	95 0f       	add	r25, r21
    3c7a:	f8 01       	movw	r30, r16
    3c7c:	90 83       	st	Z, r25
    3c7e:	8f 5f       	subi	r24, 0xFF	; 255
    3c80:	01 c0       	rjmp	.+2      	; 0x3c84 <decode_hexadecimal_string_bytes+0x68>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	28 2f       	mov	r18, r24
    3c86:	22 0f       	add	r18, r18
    3c88:	48 2f       	mov	r20, r24
    3c8a:	50 e0       	ldi	r21, 0x00	; 0
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	01 90       	ld	r0, Z+
    3c90:	00 20       	and	r0, r0
    3c92:	e9 f7       	brne	.-6      	; 0x3c8e <decode_hexadecimal_string_bytes+0x72>
    3c94:	31 97       	sbiw	r30, 0x01	; 1
    3c96:	ec 1b       	sub	r30, r28
    3c98:	fd 0b       	sbc	r31, r29
    3c9a:	4e 17       	cp	r20, r30
    3c9c:	5f 07       	cpc	r21, r31
    3c9e:	10 f4       	brcc	.+4      	; 0x3ca4 <decode_hexadecimal_string_bytes+0x88>
    3ca0:	86 13       	cpse	r24, r22
    3ca2:	ce cf       	rjmp	.-100    	; 0x3c40 <decode_hexadecimal_string_bytes+0x24>
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	1f 91       	pop	r17
    3caa:	0f 91       	pop	r16
    3cac:	08 95       	ret

00003cae <reg_read_register>:
    3cae:	fc 01       	movw	r30, r24
    3cb0:	80 81       	ld	r24, Z
    3cb2:	08 95       	ret

00003cb4 <reg_read_bit>:
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	20 81       	ld	r18, Z
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	02 c0       	rjmp	.+4      	; 0x3cc2 <reg_read_bit+0xe>
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	6a 95       	dec	r22
    3cc4:	e2 f7       	brpl	.-8      	; 0x3cbe <reg_read_bit+0xa>
    3cc6:	82 23       	and	r24, r18
    3cc8:	08 95       	ret

00003cca <reg_read_bits>:
    3cca:	fc 01       	movw	r30, r24
    3ccc:	80 81       	ld	r24, Z
    3cce:	86 23       	and	r24, r22
    3cd0:	08 95       	ret

00003cd2 <reg_set_register>:
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	60 83       	st	Z, r22
    3cd6:	08 95       	ret

00003cd8 <reg_clear_register>:
    3cd8:	fc 01       	movw	r30, r24
    3cda:	10 82       	st	Z, r1
    3cdc:	08 95       	ret

00003cde <reg_set_bit>:
    3cde:	fc 01       	movw	r30, r24
    3ce0:	40 81       	ld	r20, Z
    3ce2:	21 e0       	ldi	r18, 0x01	; 1
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <reg_set_bit+0xe>
    3ce8:	22 0f       	add	r18, r18
    3cea:	33 1f       	adc	r19, r19
    3cec:	6a 95       	dec	r22
    3cee:	e2 f7       	brpl	.-8      	; 0x3ce8 <reg_set_bit+0xa>
    3cf0:	24 2b       	or	r18, r20
    3cf2:	20 83       	st	Z, r18
    3cf4:	08 95       	ret

00003cf6 <reg_set_bits>:
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	20 81       	ld	r18, Z
    3cfa:	62 2b       	or	r22, r18
    3cfc:	60 83       	st	Z, r22
    3cfe:	08 95       	ret

00003d00 <reg_toggle_bit>:
    3d00:	fc 01       	movw	r30, r24
    3d02:	40 81       	ld	r20, Z
    3d04:	21 e0       	ldi	r18, 0x01	; 1
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <reg_toggle_bit+0xe>
    3d0a:	22 0f       	add	r18, r18
    3d0c:	33 1f       	adc	r19, r19
    3d0e:	6a 95       	dec	r22
    3d10:	e2 f7       	brpl	.-8      	; 0x3d0a <reg_toggle_bit+0xa>
    3d12:	24 27       	eor	r18, r20
    3d14:	20 83       	st	Z, r18
    3d16:	08 95       	ret

00003d18 <reg_toggle_bits>:
    3d18:	fc 01       	movw	r30, r24
    3d1a:	20 81       	ld	r18, Z
    3d1c:	62 27       	eor	r22, r18
    3d1e:	60 83       	st	Z, r22
    3d20:	08 95       	ret

00003d22 <reg_clear_bit>:
    3d22:	fc 01       	movw	r30, r24
    3d24:	90 81       	ld	r25, Z
    3d26:	21 e0       	ldi	r18, 0x01	; 1
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	02 c0       	rjmp	.+4      	; 0x3d30 <reg_clear_bit+0xe>
    3d2c:	22 0f       	add	r18, r18
    3d2e:	33 1f       	adc	r19, r19
    3d30:	6a 95       	dec	r22
    3d32:	e2 f7       	brpl	.-8      	; 0x3d2c <reg_clear_bit+0xa>
    3d34:	20 95       	com	r18
    3d36:	29 23       	and	r18, r25
    3d38:	20 83       	st	Z, r18
    3d3a:	08 95       	ret

00003d3c <reg_clear_bits>:
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	90 81       	ld	r25, Z
    3d40:	60 95       	com	r22
    3d42:	69 23       	and	r22, r25
    3d44:	60 83       	st	Z, r22
    3d46:	08 95       	ret

00003d48 <_serial_call_back>:
    3d48:	80 91 d5 19 	lds	r24, 0x19D5	; 0x8019d5 <crc_sum.1941>
    3d4c:	86 0f       	add	r24, r22
    3d4e:	80 93 d5 19 	sts	0x19D5, r24	; 0x8019d5 <crc_sum.1941>
    3d52:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_mh_state>
    3d56:	91 30       	cpi	r25, 0x01	; 1
    3d58:	79 f0       	breq	.+30     	; 0x3d78 <_serial_call_back+0x30>
    3d5a:	28 f0       	brcs	.+10     	; 0x3d66 <_serial_call_back+0x1e>
    3d5c:	92 30       	cpi	r25, 0x02	; 2
    3d5e:	a9 f0       	breq	.+42     	; 0x3d8a <_serial_call_back+0x42>
    3d60:	93 30       	cpi	r25, 0x03	; 3
    3d62:	19 f1       	breq	.+70     	; 0x3daa <_serial_call_back+0x62>
    3d64:	08 95       	ret
    3d66:	6f 3f       	cpi	r22, 0xFF	; 255
    3d68:	09 f0       	breq	.+2      	; 0x3d6c <_serial_call_back+0x24>
    3d6a:	48 c0       	rjmp	.+144    	; 0x3dfc <_serial_call_back+0xb4>
    3d6c:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <crc_sum.1941>
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <_mh_state>
    3d76:	08 95       	ret
    3d78:	66 38       	cpi	r22, 0x86	; 134
    3d7a:	09 f0       	breq	.+2      	; 0x3d7e <_serial_call_back+0x36>
    3d7c:	3f c0       	rjmp	.+126    	; 0x3dfc <_serial_call_back+0xb4>
    3d7e:	10 92 d4 19 	sts	0x19D4, r1	; 0x8019d4 <inDex.1939>
    3d82:	82 e0       	ldi	r24, 0x02	; 2
    3d84:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <_mh_state>
    3d88:	08 95       	ret
    3d8a:	e0 91 d4 19 	lds	r30, 0x19D4	; 0x8019d4 <inDex.1939>
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	8e 0f       	add	r24, r30
    3d92:	80 93 d4 19 	sts	0x19D4, r24	; 0x8019d4 <inDex.1939>
    3d96:	f0 e0       	ldi	r31, 0x00	; 0
    3d98:	ee 52       	subi	r30, 0x2E	; 46
    3d9a:	f6 4e       	sbci	r31, 0xE6	; 230
    3d9c:	60 83       	st	Z, r22
    3d9e:	82 30       	cpi	r24, 0x02	; 2
    3da0:	69 f5       	brne	.+90     	; 0x3dfc <_serial_call_back+0xb4>
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <_mh_state>
    3da8:	08 95       	ret
    3daa:	90 91 d4 19 	lds	r25, 0x19D4	; 0x8019d4 <inDex.1939>
    3dae:	21 e0       	ldi	r18, 0x01	; 1
    3db0:	29 0f       	add	r18, r25
    3db2:	20 93 d4 19 	sts	0x19D4, r18	; 0x8019d4 <inDex.1939>
    3db6:	96 30       	cpi	r25, 0x06	; 6
    3db8:	09 f5       	brne	.+66     	; 0x3dfc <_serial_call_back+0xb4>
    3dba:	81 11       	cpse	r24, r1
    3dbc:	0e c0       	rjmp	.+28     	; 0x3dda <_serial_call_back+0x92>
    3dbe:	e2 ed       	ldi	r30, 0xD2	; 210
    3dc0:	f9 e1       	ldi	r31, 0x19	; 25
    3dc2:	80 81       	ld	r24, Z
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	98 2f       	mov	r25, r24
    3dc8:	88 27       	eor	r24, r24
    3dca:	21 81       	ldd	r18, Z+1	; 0x01
    3dcc:	82 0f       	add	r24, r18
    3dce:	91 1d       	adc	r25, r1
    3dd0:	90 93 da 19 	sts	0x19DA, r25	; 0x8019da <_ppm+0x1>
    3dd4:	80 93 d9 19 	sts	0x19D9, r24	; 0x8019d9 <_ppm>
    3dd8:	04 c0       	rjmp	.+8      	; 0x3de2 <_serial_call_back+0x9a>
    3dda:	10 92 da 19 	sts	0x19DA, r1	; 0x8019da <_ppm+0x1>
    3dde:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <_ppm>
    3de2:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <_mh_state>
    3de6:	e0 91 d6 19 	lds	r30, 0x19D6	; 0x8019d6 <_app_call_back>
    3dea:	f0 91 d7 19 	lds	r31, 0x19D7	; 0x8019d7 <_app_call_back+0x1>
    3dee:	30 97       	sbiw	r30, 0x00	; 0
    3df0:	29 f0       	breq	.+10     	; 0x3dfc <_serial_call_back+0xb4>
    3df2:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <_ppm>
    3df6:	90 91 da 19 	lds	r25, 0x19DA	; 0x8019da <_ppm+0x1>
    3dfa:	19 95       	eicall
    3dfc:	08 95       	ret

00003dfe <mh_z19_create>:
    3dfe:	8f 92       	push	r8
    3e00:	9f 92       	push	r9
    3e02:	af 92       	push	r10
    3e04:	cf 92       	push	r12
    3e06:	ef 92       	push	r14
    3e08:	0f 93       	push	r16
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	eb 01       	movw	r28, r22
    3e10:	0f 2e       	mov	r0, r31
    3e12:	f4 ea       	ldi	r31, 0xA4	; 164
    3e14:	8f 2e       	mov	r8, r31
    3e16:	fe e1       	ldi	r31, 0x1E	; 30
    3e18:	9f 2e       	mov	r9, r31
    3e1a:	f0 2d       	mov	r31, r0
    3e1c:	68 94       	set
    3e1e:	aa 24       	eor	r10, r10
    3e20:	a4 f8       	bld	r10, 4
    3e22:	68 94       	set
    3e24:	cc 24       	eor	r12, r12
    3e26:	c4 f8       	bld	r12, 4
    3e28:	e1 2c       	mov	r14, r1
    3e2a:	00 e0       	ldi	r16, 0x00	; 0
    3e2c:	23 e0       	ldi	r18, 0x03	; 3
    3e2e:	40 e8       	ldi	r20, 0x80	; 128
    3e30:	55 e2       	ldi	r21, 0x25	; 37
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	40 d0       	rcall	.+128    	; 0x3eb8 <serial_new_instance>
    3e38:	90 93 dc 19 	sts	0x19DC, r25	; 0x8019dc <_serial+0x1>
    3e3c:	80 93 db 19 	sts	0x19DB, r24	; 0x8019db <_serial>
    3e40:	d0 93 d7 19 	sts	0x19D7, r29	; 0x8019d7 <_app_call_back+0x1>
    3e44:	c0 93 d6 19 	sts	0x19D6, r28	; 0x8019d6 <_app_call_back>
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	0f 91       	pop	r16
    3e4e:	ef 90       	pop	r14
    3e50:	cf 90       	pop	r12
    3e52:	af 90       	pop	r10
    3e54:	9f 90       	pop	r9
    3e56:	8f 90       	pop	r8
    3e58:	08 95       	ret

00003e5a <mh_z19_take_meassuring>:
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	29 97       	sbiw	r28, 0x09	; 9
    3e64:	0f b6       	in	r0, 0x3f	; 63
    3e66:	f8 94       	cli
    3e68:	de bf       	out	0x3e, r29	; 62
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	89 e0       	ldi	r24, 0x09	; 9
    3e70:	e1 e4       	ldi	r30, 0x41	; 65
    3e72:	f2 e0       	ldi	r31, 0x02	; 2
    3e74:	9e 01       	movw	r18, r28
    3e76:	2f 5f       	subi	r18, 0xFF	; 255
    3e78:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7a:	d9 01       	movw	r26, r18
    3e7c:	01 90       	ld	r0, Z+
    3e7e:	0d 92       	st	X+, r0
    3e80:	8a 95       	dec	r24
    3e82:	e1 f7       	brne	.-8      	; 0x3e7c <mh_z19_take_meassuring+0x22>
    3e84:	10 92 da 19 	sts	0x19DA, r1	; 0x8019da <_ppm+0x1>
    3e88:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <_ppm>
    3e8c:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <_serial>
    3e90:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <_serial+0x1>
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	31 f0       	breq	.+12     	; 0x3ea4 <mh_z19_take_meassuring+0x4a>
    3e98:	42 2f       	mov	r20, r18
    3e9a:	53 2f       	mov	r21, r19
    3e9c:	69 e0       	ldi	r22, 0x09	; 9
    3e9e:	c8 d0       	rcall	.+400    	; 0x4030 <serial_send_bytes>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	01 c0       	rjmp	.+2      	; 0x3ea6 <mh_z19_take_meassuring+0x4c>
    3ea4:	82 e0       	ldi	r24, 0x02	; 2
    3ea6:	29 96       	adiw	r28, 0x09	; 9
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	08 95       	ret

00003eb8 <serial_new_instance>:
    3eb8:	2f 92       	push	r2
    3eba:	3f 92       	push	r3
    3ebc:	4f 92       	push	r4
    3ebe:	5f 92       	push	r5
    3ec0:	6f 92       	push	r6
    3ec2:	7f 92       	push	r7
    3ec4:	8f 92       	push	r8
    3ec6:	9f 92       	push	r9
    3ec8:	af 92       	push	r10
    3eca:	cf 92       	push	r12
    3ecc:	ef 92       	push	r14
    3ece:	ff 92       	push	r15
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	f8 2e       	mov	r15, r24
    3ede:	2a 01       	movw	r4, r20
    3ee0:	3b 01       	movw	r6, r22
    3ee2:	88 e0       	ldi	r24, 0x08	; 8
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	4a d7       	rcall	.+3732   	; 0x4d7c <malloc>
    3ee8:	8c 01       	movw	r16, r24
    3eea:	8f 2d       	mov	r24, r15
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	88 0f       	add	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	e3 52       	subi	r30, 0x23	; 35
    3ef6:	f6 4e       	sbci	r31, 0xE6	; 230
    3ef8:	11 83       	std	Z+1, r17	; 0x01
    3efa:	00 83       	st	Z, r16
    3efc:	fc 01       	movw	r30, r24
    3efe:	e6 5f       	subi	r30, 0xF6	; 246
    3f00:	fd 4f       	sbci	r31, 0xFD	; 253
    3f02:	80 81       	ld	r24, Z
    3f04:	91 81       	ldd	r25, Z+1	; 0x01
    3f06:	d8 01       	movw	r26, r16
    3f08:	8d 93       	st	X+, r24
    3f0a:	9c 93       	st	X, r25
    3f0c:	6c 2d       	mov	r22, r12
    3f0e:	70 e0       	ldi	r23, 0x00	; 0
    3f10:	84 e0       	ldi	r24, 0x04	; 4
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	19 d7       	rcall	.+3634   	; 0x4d48 <calloc>
    3f16:	1c 01       	movw	r2, r24
    3f18:	61 e0       	ldi	r22, 0x01	; 1
    3f1a:	70 e0       	ldi	r23, 0x00	; 0
    3f1c:	86 e0       	ldi	r24, 0x06	; 6
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	13 d7       	rcall	.+3622   	; 0x4d48 <calloc>
    3f22:	7c 01       	movw	r14, r24
    3f24:	4c 2d       	mov	r20, r12
    3f26:	b1 01       	movw	r22, r2
    3f28:	2c d5       	rcall	.+2648   	; 0x4982 <fifo_init>
    3f2a:	f8 01       	movw	r30, r16
    3f2c:	f5 82       	std	Z+5, r15	; 0x05
    3f2e:	e4 82       	std	Z+4, r14	; 0x04
    3f30:	6a 2d       	mov	r22, r10
    3f32:	70 e0       	ldi	r23, 0x00	; 0
    3f34:	84 e0       	ldi	r24, 0x04	; 4
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	07 d7       	rcall	.+3598   	; 0x4d48 <calloc>
    3f3a:	1c 01       	movw	r2, r24
    3f3c:	61 e0       	ldi	r22, 0x01	; 1
    3f3e:	70 e0       	ldi	r23, 0x00	; 0
    3f40:	86 e0       	ldi	r24, 0x06	; 6
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	01 d7       	rcall	.+3586   	; 0x4d48 <calloc>
    3f46:	7c 01       	movw	r14, r24
    3f48:	4a 2d       	mov	r20, r10
    3f4a:	b1 01       	movw	r22, r2
    3f4c:	1a d5       	rcall	.+2612   	; 0x4982 <fifo_init>
    3f4e:	d8 01       	movw	r26, r16
    3f50:	13 96       	adiw	r26, 0x03	; 3
    3f52:	fc 92       	st	X, r15
    3f54:	ee 92       	st	-X, r14
    3f56:	12 97       	sbiw	r26, 0x02	; 2
    3f58:	17 96       	adiw	r26, 0x07	; 7
    3f5a:	9c 92       	st	X, r9
    3f5c:	8e 92       	st	-X, r8
    3f5e:	16 97       	sbiw	r26, 0x06	; 6
    3f60:	ff b6       	in	r15, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	ed 91       	ld	r30, X+
    3f66:	fc 91       	ld	r31, X
    3f68:	11 97       	sbiw	r26, 0x01	; 1
    3f6a:	36 97       	sbiw	r30, 0x06	; 6
    3f6c:	80 81       	ld	r24, Z
    3f6e:	82 60       	ori	r24, 0x02	; 2
    3f70:	80 83       	st	Z, r24
    3f72:	8d 90       	ld	r8, X+
    3f74:	9c 90       	ld	r9, X
    3f76:	c3 01       	movw	r24, r6
    3f78:	b2 01       	movw	r22, r4
    3f7a:	f1 d5       	rcall	.+3042   	; 0x4b5e <__floatunsisf>
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	51 e4       	ldi	r21, 0x41	; 65
    3f84:	51 d6       	rcall	.+3234   	; 0x4c28 <__mulsf3>
    3f86:	9b 01       	movw	r18, r22
    3f88:	ac 01       	movw	r20, r24
    3f8a:	60 e0       	ldi	r22, 0x00	; 0
    3f8c:	74 e2       	ldi	r23, 0x24	; 36
    3f8e:	84 e7       	ldi	r24, 0x74	; 116
    3f90:	9b e4       	ldi	r25, 0x4B	; 75
    3f92:	7a d5       	rcall	.+2804   	; 0x4a88 <__divsf3>
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	40 e8       	ldi	r20, 0x80	; 128
    3f9a:	5f e3       	ldi	r21, 0x3F	; 63
    3f9c:	0e d5       	rcall	.+2588   	; 0x49ba <__subsf3>
    3f9e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fixunssfsi>
    3fa2:	f4 01       	movw	r30, r8
    3fa4:	32 97       	sbiw	r30, 0x02	; 2
    3fa6:	60 83       	st	Z, r22
    3fa8:	d8 01       	movw	r26, r16
    3faa:	ed 91       	ld	r30, X+
    3fac:	fc 91       	ld	r31, X
    3fae:	11 97       	sbiw	r26, 0x01	; 1
    3fb0:	35 97       	sbiw	r30, 0x05	; 5
    3fb2:	88 e9       	ldi	r24, 0x98	; 152
    3fb4:	80 83       	st	Z, r24
    3fb6:	ed 91       	ld	r30, X+
    3fb8:	fc 91       	ld	r31, X
    3fba:	34 97       	sbiw	r30, 0x04	; 4
    3fbc:	86 e0       	ldi	r24, 0x06	; 6
    3fbe:	80 83       	st	Z, r24
    3fc0:	ff be       	out	0x3f, r15	; 63
    3fc2:	c8 01       	movw	r24, r16
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	cf 90       	pop	r12
    3fd2:	af 90       	pop	r10
    3fd4:	9f 90       	pop	r9
    3fd6:	8f 90       	pop	r8
    3fd8:	7f 90       	pop	r7
    3fda:	6f 90       	pop	r6
    3fdc:	5f 90       	pop	r5
    3fde:	4f 90       	pop	r4
    3fe0:	3f 90       	pop	r3
    3fe2:	2f 90       	pop	r2
    3fe4:	08 95       	ret

00003fe6 <serial_send_byte>:
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	ec 01       	movw	r28, r24
    3fec:	ea 81       	ldd	r30, Y+2	; 0x02
    3fee:	fb 81       	ldd	r31, Y+3	; 0x03
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	25 81       	ldd	r18, Z+5	; 0x05
    3ff6:	98 1b       	sub	r25, r24
    3ff8:	92 23       	and	r25, r18
    3ffa:	84 81       	ldd	r24, Z+4	; 0x04
    3ffc:	98 17       	cp	r25, r24
    3ffe:	a1 f0       	breq	.+40     	; 0x4028 <serial_send_byte+0x42>
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	26 95       	lsr	r18
    4004:	29 23       	and	r18, r25
    4006:	a0 81       	ld	r26, Z
    4008:	b1 81       	ldd	r27, Z+1	; 0x01
    400a:	a2 0f       	add	r26, r18
    400c:	b1 1d       	adc	r27, r1
    400e:	6c 93       	st	X, r22
    4010:	9f 5f       	subi	r25, 0xFF	; 255
    4012:	25 81       	ldd	r18, Z+5	; 0x05
    4014:	92 23       	and	r25, r18
    4016:	93 83       	std	Z+3, r25	; 0x03
    4018:	e8 81       	ld	r30, Y
    401a:	f9 81       	ldd	r31, Y+1	; 0x01
    401c:	35 97       	sbiw	r30, 0x05	; 5
    401e:	80 81       	ld	r24, Z
    4020:	80 62       	ori	r24, 0x20	; 32
    4022:	80 83       	st	Z, r24
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	01 c0       	rjmp	.+2      	; 0x402a <serial_send_byte+0x44>
    4028:	82 e0       	ldi	r24, 0x02	; 2
    402a:	df 91       	pop	r29
    402c:	cf 91       	pop	r28
    402e:	08 95       	ret

00004030 <serial_send_bytes>:
    4030:	ef 92       	push	r14
    4032:	ff 92       	push	r15
    4034:	0f 93       	push	r16
    4036:	1f 93       	push	r17
    4038:	cf 93       	push	r28
    403a:	df 93       	push	r29
    403c:	7c 01       	movw	r14, r24
    403e:	dc 01       	movw	r26, r24
    4040:	12 96       	adiw	r26, 0x02	; 2
    4042:	ed 91       	ld	r30, X+
    4044:	fc 91       	ld	r31, X
    4046:	13 97       	sbiw	r26, 0x03	; 3
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	98 1b       	sub	r25, r24
    404e:	85 81       	ldd	r24, Z+5	; 0x05
    4050:	98 23       	and	r25, r24
    4052:	84 81       	ldd	r24, Z+4	; 0x04
    4054:	89 1b       	sub	r24, r25
    4056:	86 17       	cp	r24, r22
    4058:	98 f1       	brcs	.+102    	; 0x40c0 <serial_send_bytes+0x90>
    405a:	66 23       	and	r22, r22
    405c:	41 f1       	breq	.+80     	; 0x40ae <serial_send_bytes+0x7e>
    405e:	84 2f       	mov	r24, r20
    4060:	95 2f       	mov	r25, r21
    4062:	dc 01       	movw	r26, r24
    4064:	61 50       	subi	r22, 0x01	; 1
    4066:	46 2f       	mov	r20, r22
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	4f 5f       	subi	r20, 0xFF	; 255
    406c:	5f 4f       	sbci	r21, 0xFF	; 255
    406e:	48 0f       	add	r20, r24
    4070:	59 1f       	adc	r21, r25
    4072:	e7 01       	movw	r28, r14
    4074:	ea 81       	ldd	r30, Y+2	; 0x02
    4076:	fb 81       	ldd	r31, Y+3	; 0x03
    4078:	93 81       	ldd	r25, Z+3	; 0x03
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	25 81       	ldd	r18, Z+5	; 0x05
    407e:	98 1b       	sub	r25, r24
    4080:	92 23       	and	r25, r18
    4082:	84 81       	ldd	r24, Z+4	; 0x04
    4084:	98 17       	cp	r25, r24
    4086:	79 f0       	breq	.+30     	; 0x40a6 <serial_send_bytes+0x76>
    4088:	8c 91       	ld	r24, X
    408a:	93 81       	ldd	r25, Z+3	; 0x03
    408c:	26 95       	lsr	r18
    408e:	29 23       	and	r18, r25
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	8b 01       	movw	r16, r22
    4096:	02 0f       	add	r16, r18
    4098:	11 1d       	adc	r17, r1
    409a:	e8 01       	movw	r28, r16
    409c:	88 83       	st	Y, r24
    409e:	9f 5f       	subi	r25, 0xFF	; 255
    40a0:	85 81       	ldd	r24, Z+5	; 0x05
    40a2:	98 23       	and	r25, r24
    40a4:	93 83       	std	Z+3, r25	; 0x03
    40a6:	11 96       	adiw	r26, 0x01	; 1
    40a8:	a4 17       	cp	r26, r20
    40aa:	b5 07       	cpc	r27, r21
    40ac:	11 f7       	brne	.-60     	; 0x4072 <serial_send_bytes+0x42>
    40ae:	d7 01       	movw	r26, r14
    40b0:	ed 91       	ld	r30, X+
    40b2:	fc 91       	ld	r31, X
    40b4:	35 97       	sbiw	r30, 0x05	; 5
    40b6:	80 81       	ld	r24, Z
    40b8:	80 62       	ori	r24, 0x20	; 32
    40ba:	80 83       	st	Z, r24
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	01 c0       	rjmp	.+2      	; 0x40c2 <serial_send_bytes+0x92>
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	0f 91       	pop	r16
    40ca:	ff 90       	pop	r15
    40cc:	ef 90       	pop	r14
    40ce:	08 95       	ret

000040d0 <serial_get_byte>:
    40d0:	dc 01       	movw	r26, r24
    40d2:	14 96       	adiw	r26, 0x04	; 4
    40d4:	ed 91       	ld	r30, X+
    40d6:	fc 91       	ld	r31, X
    40d8:	15 97       	sbiw	r26, 0x05	; 5
    40da:	93 81       	ldd	r25, Z+3	; 0x03
    40dc:	82 81       	ldd	r24, Z+2	; 0x02
    40de:	98 17       	cp	r25, r24
    40e0:	89 f0       	breq	.+34     	; 0x4104 <serial_get_byte+0x34>
    40e2:	92 81       	ldd	r25, Z+2	; 0x02
    40e4:	85 81       	ldd	r24, Z+5	; 0x05
    40e6:	86 95       	lsr	r24
    40e8:	89 23       	and	r24, r25
    40ea:	a0 81       	ld	r26, Z
    40ec:	b1 81       	ldd	r27, Z+1	; 0x01
    40ee:	a8 0f       	add	r26, r24
    40f0:	b1 1d       	adc	r27, r1
    40f2:	8c 91       	ld	r24, X
    40f4:	db 01       	movw	r26, r22
    40f6:	8c 93       	st	X, r24
    40f8:	9f 5f       	subi	r25, 0xFF	; 255
    40fa:	85 81       	ldd	r24, Z+5	; 0x05
    40fc:	98 23       	and	r25, r24
    40fe:	92 83       	std	Z+2, r25	; 0x02
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	08 95       	ret
    4104:	83 e0       	ldi	r24, 0x03	; 3
    4106:	08 95       	ret

00004108 <__vector_25>:
    4108:	1f 92       	push	r1
    410a:	0f 92       	push	r0
    410c:	0f b6       	in	r0, 0x3f	; 63
    410e:	0f 92       	push	r0
    4110:	11 24       	eor	r1, r1
    4112:	0b b6       	in	r0, 0x3b	; 59
    4114:	0f 92       	push	r0
    4116:	2f 93       	push	r18
    4118:	3f 93       	push	r19
    411a:	4f 93       	push	r20
    411c:	5f 93       	push	r21
    411e:	6f 93       	push	r22
    4120:	7f 93       	push	r23
    4122:	8f 93       	push	r24
    4124:	9f 93       	push	r25
    4126:	af 93       	push	r26
    4128:	bf 93       	push	r27
    412a:	cf 93       	push	r28
    412c:	df 93       	push	r29
    412e:	ef 93       	push	r30
    4130:	ff 93       	push	r31
    4132:	a0 91 dd 19 	lds	r26, 0x19DD	; 0x8019dd <_ser_handle>
    4136:	b0 91 de 19 	lds	r27, 0x19DE	; 0x8019de <_ser_handle+0x1>
    413a:	10 97       	sbiw	r26, 0x00	; 0
    413c:	11 f1       	breq	.+68     	; 0x4182 <__vector_25+0x7a>
    413e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4142:	14 96       	adiw	r26, 0x04	; 4
    4144:	ed 91       	ld	r30, X+
    4146:	fc 91       	ld	r31, X
    4148:	15 97       	sbiw	r26, 0x05	; 5
    414a:	93 81       	ldd	r25, Z+3	; 0x03
    414c:	82 81       	ldd	r24, Z+2	; 0x02
    414e:	25 81       	ldd	r18, Z+5	; 0x05
    4150:	98 1b       	sub	r25, r24
    4152:	92 23       	and	r25, r18
    4154:	84 81       	ldd	r24, Z+4	; 0x04
    4156:	98 17       	cp	r25, r24
    4158:	61 f0       	breq	.+24     	; 0x4172 <__vector_25+0x6a>
    415a:	83 81       	ldd	r24, Z+3	; 0x03
    415c:	26 95       	lsr	r18
    415e:	28 23       	and	r18, r24
    4160:	c0 81       	ld	r28, Z
    4162:	d1 81       	ldd	r29, Z+1	; 0x01
    4164:	c2 0f       	add	r28, r18
    4166:	d1 1d       	adc	r29, r1
    4168:	68 83       	st	Y, r22
    416a:	8f 5f       	subi	r24, 0xFF	; 255
    416c:	95 81       	ldd	r25, Z+5	; 0x05
    416e:	89 23       	and	r24, r25
    4170:	83 83       	std	Z+3, r24	; 0x03
    4172:	16 96       	adiw	r26, 0x06	; 6
    4174:	ed 91       	ld	r30, X+
    4176:	fc 91       	ld	r31, X
    4178:	17 97       	sbiw	r26, 0x07	; 7
    417a:	30 97       	sbiw	r30, 0x00	; 0
    417c:	11 f0       	breq	.+4      	; 0x4182 <__vector_25+0x7a>
    417e:	cd 01       	movw	r24, r26
    4180:	19 95       	eicall
    4182:	ff 91       	pop	r31
    4184:	ef 91       	pop	r30
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    418a:	bf 91       	pop	r27
    418c:	af 91       	pop	r26
    418e:	9f 91       	pop	r25
    4190:	8f 91       	pop	r24
    4192:	7f 91       	pop	r23
    4194:	6f 91       	pop	r22
    4196:	5f 91       	pop	r21
    4198:	4f 91       	pop	r20
    419a:	3f 91       	pop	r19
    419c:	2f 91       	pop	r18
    419e:	0f 90       	pop	r0
    41a0:	0b be       	out	0x3b, r0	; 59
    41a2:	0f 90       	pop	r0
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	0f 90       	pop	r0
    41a8:	1f 90       	pop	r1
    41aa:	18 95       	reti

000041ac <__vector_26>:
    41ac:	1f 92       	push	r1
    41ae:	0f 92       	push	r0
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	0f 92       	push	r0
    41b4:	11 24       	eor	r1, r1
    41b6:	0b b6       	in	r0, 0x3b	; 59
    41b8:	0f 92       	push	r0
    41ba:	2f 93       	push	r18
    41bc:	8f 93       	push	r24
    41be:	9f 93       	push	r25
    41c0:	af 93       	push	r26
    41c2:	bf 93       	push	r27
    41c4:	ef 93       	push	r30
    41c6:	ff 93       	push	r31
    41c8:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <_ser_handle>
    41cc:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <_ser_handle+0x1>
    41d0:	30 97       	sbiw	r30, 0x00	; 0
    41d2:	b9 f0       	breq	.+46     	; 0x4202 <__vector_26+0x56>
    41d4:	02 80       	ldd	r0, Z+2	; 0x02
    41d6:	f3 81       	ldd	r31, Z+3	; 0x03
    41d8:	e0 2d       	mov	r30, r0
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	82 81       	ldd	r24, Z+2	; 0x02
    41de:	98 17       	cp	r25, r24
    41e0:	b1 f0       	breq	.+44     	; 0x420e <__vector_26+0x62>
    41e2:	92 81       	ldd	r25, Z+2	; 0x02
    41e4:	85 81       	ldd	r24, Z+5	; 0x05
    41e6:	28 2f       	mov	r18, r24
    41e8:	26 95       	lsr	r18
    41ea:	29 23       	and	r18, r25
    41ec:	a0 81       	ld	r26, Z
    41ee:	b1 81       	ldd	r27, Z+1	; 0x01
    41f0:	a2 0f       	add	r26, r18
    41f2:	b1 1d       	adc	r27, r1
    41f4:	2c 91       	ld	r18, X
    41f6:	9f 5f       	subi	r25, 0xFF	; 255
    41f8:	89 23       	and	r24, r25
    41fa:	82 83       	std	Z+2, r24	; 0x02
    41fc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4200:	0b c0       	rjmp	.+22     	; 0x4218 <__vector_26+0x6c>
    4202:	e1 ec       	ldi	r30, 0xC1	; 193
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	80 81       	ld	r24, Z
    4208:	8f 7d       	andi	r24, 0xDF	; 223
    420a:	80 83       	st	Z, r24
    420c:	05 c0       	rjmp	.+10     	; 0x4218 <__vector_26+0x6c>
    420e:	e1 ec       	ldi	r30, 0xC1	; 193
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	8f 7d       	andi	r24, 0xDF	; 223
    4216:	80 83       	st	Z, r24
    4218:	ff 91       	pop	r31
    421a:	ef 91       	pop	r30
    421c:	bf 91       	pop	r27
    421e:	af 91       	pop	r26
    4220:	9f 91       	pop	r25
    4222:	8f 91       	pop	r24
    4224:	2f 91       	pop	r18
    4226:	0f 90       	pop	r0
    4228:	0b be       	out	0x3b, r0	; 59
    422a:	0f 90       	pop	r0
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	0f 90       	pop	r0
    4230:	1f 90       	pop	r1
    4232:	18 95       	reti

00004234 <__vector_36>:
    4234:	1f 92       	push	r1
    4236:	0f 92       	push	r0
    4238:	0f b6       	in	r0, 0x3f	; 63
    423a:	0f 92       	push	r0
    423c:	11 24       	eor	r1, r1
    423e:	0b b6       	in	r0, 0x3b	; 59
    4240:	0f 92       	push	r0
    4242:	2f 93       	push	r18
    4244:	3f 93       	push	r19
    4246:	4f 93       	push	r20
    4248:	5f 93       	push	r21
    424a:	6f 93       	push	r22
    424c:	7f 93       	push	r23
    424e:	8f 93       	push	r24
    4250:	9f 93       	push	r25
    4252:	af 93       	push	r26
    4254:	bf 93       	push	r27
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	ef 93       	push	r30
    425c:	ff 93       	push	r31
    425e:	a0 91 df 19 	lds	r26, 0x19DF	; 0x8019df <_ser_handle+0x2>
    4262:	b0 91 e0 19 	lds	r27, 0x19E0	; 0x8019e0 <_ser_handle+0x3>
    4266:	10 97       	sbiw	r26, 0x00	; 0
    4268:	11 f1       	breq	.+68     	; 0x42ae <__vector_36+0x7a>
    426a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    426e:	14 96       	adiw	r26, 0x04	; 4
    4270:	ed 91       	ld	r30, X+
    4272:	fc 91       	ld	r31, X
    4274:	15 97       	sbiw	r26, 0x05	; 5
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	82 81       	ldd	r24, Z+2	; 0x02
    427a:	25 81       	ldd	r18, Z+5	; 0x05
    427c:	98 1b       	sub	r25, r24
    427e:	92 23       	and	r25, r18
    4280:	84 81       	ldd	r24, Z+4	; 0x04
    4282:	98 17       	cp	r25, r24
    4284:	61 f0       	breq	.+24     	; 0x429e <__vector_36+0x6a>
    4286:	83 81       	ldd	r24, Z+3	; 0x03
    4288:	26 95       	lsr	r18
    428a:	28 23       	and	r18, r24
    428c:	c0 81       	ld	r28, Z
    428e:	d1 81       	ldd	r29, Z+1	; 0x01
    4290:	c2 0f       	add	r28, r18
    4292:	d1 1d       	adc	r29, r1
    4294:	68 83       	st	Y, r22
    4296:	8f 5f       	subi	r24, 0xFF	; 255
    4298:	95 81       	ldd	r25, Z+5	; 0x05
    429a:	89 23       	and	r24, r25
    429c:	83 83       	std	Z+3, r24	; 0x03
    429e:	16 96       	adiw	r26, 0x06	; 6
    42a0:	ed 91       	ld	r30, X+
    42a2:	fc 91       	ld	r31, X
    42a4:	17 97       	sbiw	r26, 0x07	; 7
    42a6:	30 97       	sbiw	r30, 0x00	; 0
    42a8:	11 f0       	breq	.+4      	; 0x42ae <__vector_36+0x7a>
    42aa:	cd 01       	movw	r24, r26
    42ac:	19 95       	eicall
    42ae:	ff 91       	pop	r31
    42b0:	ef 91       	pop	r30
    42b2:	df 91       	pop	r29
    42b4:	cf 91       	pop	r28
    42b6:	bf 91       	pop	r27
    42b8:	af 91       	pop	r26
    42ba:	9f 91       	pop	r25
    42bc:	8f 91       	pop	r24
    42be:	7f 91       	pop	r23
    42c0:	6f 91       	pop	r22
    42c2:	5f 91       	pop	r21
    42c4:	4f 91       	pop	r20
    42c6:	3f 91       	pop	r19
    42c8:	2f 91       	pop	r18
    42ca:	0f 90       	pop	r0
    42cc:	0b be       	out	0x3b, r0	; 59
    42ce:	0f 90       	pop	r0
    42d0:	0f be       	out	0x3f, r0	; 63
    42d2:	0f 90       	pop	r0
    42d4:	1f 90       	pop	r1
    42d6:	18 95       	reti

000042d8 <__vector_37>:
    42d8:	1f 92       	push	r1
    42da:	0f 92       	push	r0
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	0f 92       	push	r0
    42e0:	11 24       	eor	r1, r1
    42e2:	0b b6       	in	r0, 0x3b	; 59
    42e4:	0f 92       	push	r0
    42e6:	2f 93       	push	r18
    42e8:	8f 93       	push	r24
    42ea:	9f 93       	push	r25
    42ec:	af 93       	push	r26
    42ee:	bf 93       	push	r27
    42f0:	ef 93       	push	r30
    42f2:	ff 93       	push	r31
    42f4:	e0 91 df 19 	lds	r30, 0x19DF	; 0x8019df <_ser_handle+0x2>
    42f8:	f0 91 e0 19 	lds	r31, 0x19E0	; 0x8019e0 <_ser_handle+0x3>
    42fc:	30 97       	sbiw	r30, 0x00	; 0
    42fe:	b9 f0       	breq	.+46     	; 0x432e <__vector_37+0x56>
    4300:	02 80       	ldd	r0, Z+2	; 0x02
    4302:	f3 81       	ldd	r31, Z+3	; 0x03
    4304:	e0 2d       	mov	r30, r0
    4306:	93 81       	ldd	r25, Z+3	; 0x03
    4308:	82 81       	ldd	r24, Z+2	; 0x02
    430a:	98 17       	cp	r25, r24
    430c:	b1 f0       	breq	.+44     	; 0x433a <__vector_37+0x62>
    430e:	92 81       	ldd	r25, Z+2	; 0x02
    4310:	85 81       	ldd	r24, Z+5	; 0x05
    4312:	28 2f       	mov	r18, r24
    4314:	26 95       	lsr	r18
    4316:	29 23       	and	r18, r25
    4318:	a0 81       	ld	r26, Z
    431a:	b1 81       	ldd	r27, Z+1	; 0x01
    431c:	a2 0f       	add	r26, r18
    431e:	b1 1d       	adc	r27, r1
    4320:	2c 91       	ld	r18, X
    4322:	9f 5f       	subi	r25, 0xFF	; 255
    4324:	89 23       	and	r24, r25
    4326:	82 83       	std	Z+2, r24	; 0x02
    4328:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    432c:	0b c0       	rjmp	.+22     	; 0x4344 <__vector_37+0x6c>
    432e:	e9 ec       	ldi	r30, 0xC9	; 201
    4330:	f0 e0       	ldi	r31, 0x00	; 0
    4332:	80 81       	ld	r24, Z
    4334:	8f 7d       	andi	r24, 0xDF	; 223
    4336:	80 83       	st	Z, r24
    4338:	05 c0       	rjmp	.+10     	; 0x4344 <__vector_37+0x6c>
    433a:	e9 ec       	ldi	r30, 0xC9	; 201
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	8f 7d       	andi	r24, 0xDF	; 223
    4342:	80 83       	st	Z, r24
    4344:	ff 91       	pop	r31
    4346:	ef 91       	pop	r30
    4348:	bf 91       	pop	r27
    434a:	af 91       	pop	r26
    434c:	9f 91       	pop	r25
    434e:	8f 91       	pop	r24
    4350:	2f 91       	pop	r18
    4352:	0f 90       	pop	r0
    4354:	0b be       	out	0x3b, r0	; 59
    4356:	0f 90       	pop	r0
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	0f 90       	pop	r0
    435c:	1f 90       	pop	r1
    435e:	18 95       	reti

00004360 <__vector_51>:
    4360:	1f 92       	push	r1
    4362:	0f 92       	push	r0
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	0f 92       	push	r0
    4368:	11 24       	eor	r1, r1
    436a:	0b b6       	in	r0, 0x3b	; 59
    436c:	0f 92       	push	r0
    436e:	2f 93       	push	r18
    4370:	3f 93       	push	r19
    4372:	4f 93       	push	r20
    4374:	5f 93       	push	r21
    4376:	6f 93       	push	r22
    4378:	7f 93       	push	r23
    437a:	8f 93       	push	r24
    437c:	9f 93       	push	r25
    437e:	af 93       	push	r26
    4380:	bf 93       	push	r27
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	ef 93       	push	r30
    4388:	ff 93       	push	r31
    438a:	a0 91 e1 19 	lds	r26, 0x19E1	; 0x8019e1 <_ser_handle+0x4>
    438e:	b0 91 e2 19 	lds	r27, 0x19E2	; 0x8019e2 <_ser_handle+0x5>
    4392:	10 97       	sbiw	r26, 0x00	; 0
    4394:	11 f1       	breq	.+68     	; 0x43da <__vector_51+0x7a>
    4396:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    439a:	14 96       	adiw	r26, 0x04	; 4
    439c:	ed 91       	ld	r30, X+
    439e:	fc 91       	ld	r31, X
    43a0:	15 97       	sbiw	r26, 0x05	; 5
    43a2:	93 81       	ldd	r25, Z+3	; 0x03
    43a4:	82 81       	ldd	r24, Z+2	; 0x02
    43a6:	25 81       	ldd	r18, Z+5	; 0x05
    43a8:	98 1b       	sub	r25, r24
    43aa:	92 23       	and	r25, r18
    43ac:	84 81       	ldd	r24, Z+4	; 0x04
    43ae:	98 17       	cp	r25, r24
    43b0:	61 f0       	breq	.+24     	; 0x43ca <__vector_51+0x6a>
    43b2:	83 81       	ldd	r24, Z+3	; 0x03
    43b4:	26 95       	lsr	r18
    43b6:	28 23       	and	r18, r24
    43b8:	c0 81       	ld	r28, Z
    43ba:	d1 81       	ldd	r29, Z+1	; 0x01
    43bc:	c2 0f       	add	r28, r18
    43be:	d1 1d       	adc	r29, r1
    43c0:	68 83       	st	Y, r22
    43c2:	8f 5f       	subi	r24, 0xFF	; 255
    43c4:	95 81       	ldd	r25, Z+5	; 0x05
    43c6:	89 23       	and	r24, r25
    43c8:	83 83       	std	Z+3, r24	; 0x03
    43ca:	16 96       	adiw	r26, 0x06	; 6
    43cc:	ed 91       	ld	r30, X+
    43ce:	fc 91       	ld	r31, X
    43d0:	17 97       	sbiw	r26, 0x07	; 7
    43d2:	30 97       	sbiw	r30, 0x00	; 0
    43d4:	11 f0       	breq	.+4      	; 0x43da <__vector_51+0x7a>
    43d6:	cd 01       	movw	r24, r26
    43d8:	19 95       	eicall
    43da:	ff 91       	pop	r31
    43dc:	ef 91       	pop	r30
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	bf 91       	pop	r27
    43e4:	af 91       	pop	r26
    43e6:	9f 91       	pop	r25
    43e8:	8f 91       	pop	r24
    43ea:	7f 91       	pop	r23
    43ec:	6f 91       	pop	r22
    43ee:	5f 91       	pop	r21
    43f0:	4f 91       	pop	r20
    43f2:	3f 91       	pop	r19
    43f4:	2f 91       	pop	r18
    43f6:	0f 90       	pop	r0
    43f8:	0b be       	out	0x3b, r0	; 59
    43fa:	0f 90       	pop	r0
    43fc:	0f be       	out	0x3f, r0	; 63
    43fe:	0f 90       	pop	r0
    4400:	1f 90       	pop	r1
    4402:	18 95       	reti

00004404 <__vector_52>:
    4404:	1f 92       	push	r1
    4406:	0f 92       	push	r0
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	0f 92       	push	r0
    440c:	11 24       	eor	r1, r1
    440e:	0b b6       	in	r0, 0x3b	; 59
    4410:	0f 92       	push	r0
    4412:	2f 93       	push	r18
    4414:	8f 93       	push	r24
    4416:	9f 93       	push	r25
    4418:	af 93       	push	r26
    441a:	bf 93       	push	r27
    441c:	ef 93       	push	r30
    441e:	ff 93       	push	r31
    4420:	e0 91 e1 19 	lds	r30, 0x19E1	; 0x8019e1 <_ser_handle+0x4>
    4424:	f0 91 e2 19 	lds	r31, 0x19E2	; 0x8019e2 <_ser_handle+0x5>
    4428:	30 97       	sbiw	r30, 0x00	; 0
    442a:	b9 f0       	breq	.+46     	; 0x445a <__vector_52+0x56>
    442c:	02 80       	ldd	r0, Z+2	; 0x02
    442e:	f3 81       	ldd	r31, Z+3	; 0x03
    4430:	e0 2d       	mov	r30, r0
    4432:	93 81       	ldd	r25, Z+3	; 0x03
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	98 17       	cp	r25, r24
    4438:	b1 f0       	breq	.+44     	; 0x4466 <__vector_52+0x62>
    443a:	92 81       	ldd	r25, Z+2	; 0x02
    443c:	85 81       	ldd	r24, Z+5	; 0x05
    443e:	28 2f       	mov	r18, r24
    4440:	26 95       	lsr	r18
    4442:	29 23       	and	r18, r25
    4444:	a0 81       	ld	r26, Z
    4446:	b1 81       	ldd	r27, Z+1	; 0x01
    4448:	a2 0f       	add	r26, r18
    444a:	b1 1d       	adc	r27, r1
    444c:	2c 91       	ld	r18, X
    444e:	9f 5f       	subi	r25, 0xFF	; 255
    4450:	89 23       	and	r24, r25
    4452:	82 83       	std	Z+2, r24	; 0x02
    4454:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4458:	0b c0       	rjmp	.+22     	; 0x4470 <__vector_52+0x6c>
    445a:	e1 ed       	ldi	r30, 0xD1	; 209
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	80 81       	ld	r24, Z
    4460:	8f 7d       	andi	r24, 0xDF	; 223
    4462:	80 83       	st	Z, r24
    4464:	05 c0       	rjmp	.+10     	; 0x4470 <__vector_52+0x6c>
    4466:	e1 ed       	ldi	r30, 0xD1	; 209
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	8f 7d       	andi	r24, 0xDF	; 223
    446e:	80 83       	st	Z, r24
    4470:	ff 91       	pop	r31
    4472:	ef 91       	pop	r30
    4474:	bf 91       	pop	r27
    4476:	af 91       	pop	r26
    4478:	9f 91       	pop	r25
    447a:	8f 91       	pop	r24
    447c:	2f 91       	pop	r18
    447e:	0f 90       	pop	r0
    4480:	0b be       	out	0x3b, r0	; 59
    4482:	0f 90       	pop	r0
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	0f 90       	pop	r0
    4488:	1f 90       	pop	r1
    448a:	18 95       	reti

0000448c <__vector_54>:
    448c:	1f 92       	push	r1
    448e:	0f 92       	push	r0
    4490:	0f b6       	in	r0, 0x3f	; 63
    4492:	0f 92       	push	r0
    4494:	11 24       	eor	r1, r1
    4496:	0b b6       	in	r0, 0x3b	; 59
    4498:	0f 92       	push	r0
    449a:	2f 93       	push	r18
    449c:	3f 93       	push	r19
    449e:	4f 93       	push	r20
    44a0:	5f 93       	push	r21
    44a2:	6f 93       	push	r22
    44a4:	7f 93       	push	r23
    44a6:	8f 93       	push	r24
    44a8:	9f 93       	push	r25
    44aa:	af 93       	push	r26
    44ac:	bf 93       	push	r27
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	ef 93       	push	r30
    44b4:	ff 93       	push	r31
    44b6:	a0 91 e3 19 	lds	r26, 0x19E3	; 0x8019e3 <_ser_handle+0x6>
    44ba:	b0 91 e4 19 	lds	r27, 0x19E4	; 0x8019e4 <_ser_handle+0x7>
    44be:	10 97       	sbiw	r26, 0x00	; 0
    44c0:	11 f1       	breq	.+68     	; 0x4506 <__vector_54+0x7a>
    44c2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    44c6:	14 96       	adiw	r26, 0x04	; 4
    44c8:	ed 91       	ld	r30, X+
    44ca:	fc 91       	ld	r31, X
    44cc:	15 97       	sbiw	r26, 0x05	; 5
    44ce:	93 81       	ldd	r25, Z+3	; 0x03
    44d0:	82 81       	ldd	r24, Z+2	; 0x02
    44d2:	25 81       	ldd	r18, Z+5	; 0x05
    44d4:	98 1b       	sub	r25, r24
    44d6:	92 23       	and	r25, r18
    44d8:	84 81       	ldd	r24, Z+4	; 0x04
    44da:	98 17       	cp	r25, r24
    44dc:	61 f0       	breq	.+24     	; 0x44f6 <__vector_54+0x6a>
    44de:	83 81       	ldd	r24, Z+3	; 0x03
    44e0:	26 95       	lsr	r18
    44e2:	28 23       	and	r18, r24
    44e4:	c0 81       	ld	r28, Z
    44e6:	d1 81       	ldd	r29, Z+1	; 0x01
    44e8:	c2 0f       	add	r28, r18
    44ea:	d1 1d       	adc	r29, r1
    44ec:	68 83       	st	Y, r22
    44ee:	8f 5f       	subi	r24, 0xFF	; 255
    44f0:	95 81       	ldd	r25, Z+5	; 0x05
    44f2:	89 23       	and	r24, r25
    44f4:	83 83       	std	Z+3, r24	; 0x03
    44f6:	16 96       	adiw	r26, 0x06	; 6
    44f8:	ed 91       	ld	r30, X+
    44fa:	fc 91       	ld	r31, X
    44fc:	17 97       	sbiw	r26, 0x07	; 7
    44fe:	30 97       	sbiw	r30, 0x00	; 0
    4500:	11 f0       	breq	.+4      	; 0x4506 <__vector_54+0x7a>
    4502:	cd 01       	movw	r24, r26
    4504:	19 95       	eicall
    4506:	ff 91       	pop	r31
    4508:	ef 91       	pop	r30
    450a:	df 91       	pop	r29
    450c:	cf 91       	pop	r28
    450e:	bf 91       	pop	r27
    4510:	af 91       	pop	r26
    4512:	9f 91       	pop	r25
    4514:	8f 91       	pop	r24
    4516:	7f 91       	pop	r23
    4518:	6f 91       	pop	r22
    451a:	5f 91       	pop	r21
    451c:	4f 91       	pop	r20
    451e:	3f 91       	pop	r19
    4520:	2f 91       	pop	r18
    4522:	0f 90       	pop	r0
    4524:	0b be       	out	0x3b, r0	; 59
    4526:	0f 90       	pop	r0
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	0f 90       	pop	r0
    452c:	1f 90       	pop	r1
    452e:	18 95       	reti

00004530 <__vector_55>:
    4530:	1f 92       	push	r1
    4532:	0f 92       	push	r0
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	0f 92       	push	r0
    4538:	11 24       	eor	r1, r1
    453a:	0b b6       	in	r0, 0x3b	; 59
    453c:	0f 92       	push	r0
    453e:	2f 93       	push	r18
    4540:	8f 93       	push	r24
    4542:	9f 93       	push	r25
    4544:	af 93       	push	r26
    4546:	bf 93       	push	r27
    4548:	ef 93       	push	r30
    454a:	ff 93       	push	r31
    454c:	e0 91 e3 19 	lds	r30, 0x19E3	; 0x8019e3 <_ser_handle+0x6>
    4550:	f0 91 e4 19 	lds	r31, 0x19E4	; 0x8019e4 <_ser_handle+0x7>
    4554:	30 97       	sbiw	r30, 0x00	; 0
    4556:	b9 f0       	breq	.+46     	; 0x4586 <__vector_55+0x56>
    4558:	02 80       	ldd	r0, Z+2	; 0x02
    455a:	f3 81       	ldd	r31, Z+3	; 0x03
    455c:	e0 2d       	mov	r30, r0
    455e:	93 81       	ldd	r25, Z+3	; 0x03
    4560:	82 81       	ldd	r24, Z+2	; 0x02
    4562:	98 17       	cp	r25, r24
    4564:	b1 f0       	breq	.+44     	; 0x4592 <__vector_55+0x62>
    4566:	92 81       	ldd	r25, Z+2	; 0x02
    4568:	85 81       	ldd	r24, Z+5	; 0x05
    456a:	28 2f       	mov	r18, r24
    456c:	26 95       	lsr	r18
    456e:	29 23       	and	r18, r25
    4570:	a0 81       	ld	r26, Z
    4572:	b1 81       	ldd	r27, Z+1	; 0x01
    4574:	a2 0f       	add	r26, r18
    4576:	b1 1d       	adc	r27, r1
    4578:	2c 91       	ld	r18, X
    457a:	9f 5f       	subi	r25, 0xFF	; 255
    457c:	89 23       	and	r24, r25
    457e:	82 83       	std	Z+2, r24	; 0x02
    4580:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4584:	0b c0       	rjmp	.+22     	; 0x459c <__vector_55+0x6c>
    4586:	e1 e3       	ldi	r30, 0x31	; 49
    4588:	f1 e0       	ldi	r31, 0x01	; 1
    458a:	80 81       	ld	r24, Z
    458c:	8f 7d       	andi	r24, 0xDF	; 223
    458e:	80 83       	st	Z, r24
    4590:	05 c0       	rjmp	.+10     	; 0x459c <__vector_55+0x6c>
    4592:	e1 e3       	ldi	r30, 0x31	; 49
    4594:	f1 e0       	ldi	r31, 0x01	; 1
    4596:	80 81       	ld	r24, Z
    4598:	8f 7d       	andi	r24, 0xDF	; 223
    459a:	80 83       	st	Z, r24
    459c:	ff 91       	pop	r31
    459e:	ef 91       	pop	r30
    45a0:	bf 91       	pop	r27
    45a2:	af 91       	pop	r26
    45a4:	9f 91       	pop	r25
    45a6:	8f 91       	pop	r24
    45a8:	2f 91       	pop	r18
    45aa:	0f 90       	pop	r0
    45ac:	0b be       	out	0x3b, r0	; 59
    45ae:	0f 90       	pop	r0
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	0f 90       	pop	r0
    45b4:	1f 90       	pop	r1
    45b6:	18 95       	reti

000045b8 <usart_getchar>:
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	1f 92       	push	r1
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	be 01       	movw	r22, r28
    45c4:	6f 5f       	subi	r22, 0xFF	; 255
    45c6:	7f 4f       	sbci	r23, 0xFF	; 255
    45c8:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <_com_serial_instance>
    45cc:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <_com_serial_instance+0x1>
    45d0:	7f dd       	rcall	.-1282   	; 0x40d0 <serial_get_byte>
    45d2:	81 11       	cpse	r24, r1
    45d4:	f6 cf       	rjmp	.-20     	; 0x45c2 <usart_getchar+0xa>
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	0f 90       	pop	r0
    45dc:	df 91       	pop	r29
    45de:	cf 91       	pop	r28
    45e0:	08 95       	ret

000045e2 <usart_putchar>:
    45e2:	68 2f       	mov	r22, r24
    45e4:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <_com_serial_instance>
    45e8:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <_com_serial_instance+0x1>
    45ec:	fc dc       	rcall	.-1544   	; 0x3fe6 <serial_send_byte>
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	08 95       	ret

000045f4 <stdioCreate>:
    45f4:	8f 92       	push	r8
    45f6:	9f 92       	push	r9
    45f8:	af 92       	push	r10
    45fa:	cf 92       	push	r12
    45fc:	ef 92       	push	r14
    45fe:	0f 93       	push	r16
    4600:	81 2c       	mov	r8, r1
    4602:	91 2c       	mov	r9, r1
    4604:	68 94       	set
    4606:	aa 24       	eor	r10, r10
    4608:	a7 f8       	bld	r10, 7
    460a:	68 94       	set
    460c:	cc 24       	eor	r12, r12
    460e:	c7 f8       	bld	r12, 7
    4610:	e1 2c       	mov	r14, r1
    4612:	00 e0       	ldi	r16, 0x00	; 0
    4614:	23 e0       	ldi	r18, 0x03	; 3
    4616:	40 e0       	ldi	r20, 0x00	; 0
    4618:	51 ee       	ldi	r21, 0xE1	; 225
    461a:	60 e0       	ldi	r22, 0x00	; 0
    461c:	70 e0       	ldi	r23, 0x00	; 0
    461e:	4c dc       	rcall	.-1896   	; 0x3eb8 <serial_new_instance>
    4620:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <_com_serial_instance+0x1>
    4624:	80 93 e5 19 	sts	0x19E5, r24	; 0x8019e5 <_com_serial_instance>
    4628:	ef e1       	ldi	r30, 0x1F	; 31
    462a:	fa e1       	ldi	r31, 0x1A	; 26
    462c:	82 e1       	ldi	r24, 0x12	; 18
    462e:	92 e0       	ldi	r25, 0x02	; 2
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
    4634:	93 83       	std	Z+3, r25	; 0x03
    4636:	82 83       	std	Z+2, r24	; 0x02
    4638:	0f 91       	pop	r16
    463a:	ef 90       	pop	r14
    463c:	cf 90       	pop	r12
    463e:	af 90       	pop	r10
    4640:	9f 90       	pop	r9
    4642:	8f 90       	pop	r8
    4644:	08 95       	ret

00004646 <_initTwiInterface>:
    4646:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <_twiIsInitiated>
    464a:	81 11       	cpse	r24, r1
    464c:	0c c0       	rjmp	.+24     	; 0x4666 <_initTwiInterface+0x20>
    464e:	8c e0       	ldi	r24, 0x0C	; 12
    4650:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4654:	8f ef       	ldi	r24, 0xFF	; 255
    4656:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    465a:	84 e0       	ldi	r24, 0x04	; 4
    465c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <_twiIsInitiated>
    4666:	08 95       	ret

00004668 <twiCreate>:
    4668:	af 92       	push	r10
    466a:	bf 92       	push	r11
    466c:	cf 92       	push	r12
    466e:	df 92       	push	r13
    4670:	ef 92       	push	r14
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	a8 2e       	mov	r10, r24
    467e:	b6 2e       	mov	r11, r22
    4680:	69 01       	movw	r12, r18
    4682:	7a 01       	movw	r14, r20
    4684:	84 e0       	ldi	r24, 0x04	; 4
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	79 d3       	rcall	.+1778   	; 0x4d7c <malloc>
    468a:	ec 01       	movw	r28, r24
    468c:	89 2b       	or	r24, r25
    468e:	61 f1       	breq	.+88     	; 0x46e8 <twiCreate+0x80>
    4690:	a8 82       	st	Y, r10
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	b8 12       	cpse	r11, r24
    4696:	12 c0       	rjmp	.+36     	; 0x46bc <twiCreate+0x54>
    4698:	c7 01       	movw	r24, r14
    469a:	b6 01       	movw	r22, r12
    469c:	20 ea       	ldi	r18, 0xA0	; 160
    469e:	36 e8       	ldi	r19, 0x86	; 134
    46a0:	41 e0       	ldi	r20, 0x01	; 1
    46a2:	50 e0       	ldi	r21, 0x00	; 0
    46a4:	27 d3       	rcall	.+1614   	; 0x4cf4 <__udivmodsi4>
    46a6:	da 01       	movw	r26, r20
    46a8:	c9 01       	movw	r24, r18
    46aa:	40 97       	sbiw	r24, 0x10	; 16
    46ac:	a1 09       	sbc	r26, r1
    46ae:	b1 09       	sbc	r27, r1
    46b0:	b6 95       	lsr	r27
    46b2:	a7 95       	ror	r26
    46b4:	97 95       	ror	r25
    46b6:	87 95       	ror	r24
    46b8:	89 83       	std	Y+1, r24	; 0x01
    46ba:	11 c0       	rjmp	.+34     	; 0x46de <twiCreate+0x76>
    46bc:	c7 01       	movw	r24, r14
    46be:	b6 01       	movw	r22, r12
    46c0:	20 e8       	ldi	r18, 0x80	; 128
    46c2:	3a e1       	ldi	r19, 0x1A	; 26
    46c4:	46 e0       	ldi	r20, 0x06	; 6
    46c6:	50 e0       	ldi	r21, 0x00	; 0
    46c8:	15 d3       	rcall	.+1578   	; 0x4cf4 <__udivmodsi4>
    46ca:	da 01       	movw	r26, r20
    46cc:	c9 01       	movw	r24, r18
    46ce:	40 97       	sbiw	r24, 0x10	; 16
    46d0:	a1 09       	sbc	r26, r1
    46d2:	b1 09       	sbc	r27, r1
    46d4:	b6 95       	lsr	r27
    46d6:	a7 95       	ror	r26
    46d8:	97 95       	ror	r25
    46da:	87 95       	ror	r24
    46dc:	89 83       	std	Y+1, r24	; 0x01
    46de:	1b 83       	std	Y+3, r17	; 0x03
    46e0:	0a 83       	std	Y+2, r16	; 0x02
    46e2:	8c 2f       	mov	r24, r28
    46e4:	9d 2f       	mov	r25, r29
    46e6:	02 c0       	rjmp	.+4      	; 0x46ec <twiCreate+0x84>
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	df 91       	pop	r29
    46ee:	cf 91       	pop	r28
    46f0:	1f 91       	pop	r17
    46f2:	0f 91       	pop	r16
    46f4:	ff 90       	pop	r15
    46f6:	ef 90       	pop	r14
    46f8:	df 90       	pop	r13
    46fa:	cf 90       	pop	r12
    46fc:	bf 90       	pop	r11
    46fe:	af 90       	pop	r10
    4700:	08 95       	ret

00004702 <twiIsBusy>:
    4702:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4706:	81 70       	andi	r24, 0x01	; 1
    4708:	08 95       	ret

0000470a <twiTransmit>:
    470a:	ff 92       	push	r15
    470c:	0f 93       	push	r16
    470e:	1f 93       	push	r17
    4710:	cf 93       	push	r28
    4712:	df 93       	push	r29
    4714:	00 97       	sbiw	r24, 0x00	; 0
    4716:	d1 f1       	breq	.+116    	; 0x478c <twiTransmit+0x82>
    4718:	4a 30       	cpi	r20, 0x0A	; 10
    471a:	d0 f5       	brcc	.+116    	; 0x4790 <twiTransmit+0x86>
    471c:	f4 2e       	mov	r15, r20
    471e:	8b 01       	movw	r16, r22
    4720:	ec 01       	movw	r28, r24
    4722:	ef df       	rcall	.-34     	; 0x4702 <twiIsBusy>
    4724:	81 11       	cpse	r24, r1
    4726:	36 c0       	rjmp	.+108    	; 0x4794 <twiTransmit+0x8a>
    4728:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <_twiCurrentHandler>
    472c:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <_twiCurrentHandler+0x1>
    4730:	c8 17       	cp	r28, r24
    4732:	d9 07       	cpc	r29, r25
    4734:	41 f0       	breq	.+16     	; 0x4746 <twiTransmit+0x3c>
    4736:	87 df       	rcall	.-242    	; 0x4646 <_initTwiInterface>
    4738:	89 81       	ldd	r24, Y+1	; 0x01
    473a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    473e:	d0 93 e9 19 	sts	0x19E9, r29	; 0x8019e9 <_twiCurrentHandler+0x1>
    4742:	c0 93 e8 19 	sts	0x19E8, r28	; 0x8019e8 <_twiCurrentHandler>
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	8f 0d       	add	r24, r15
    474a:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <_twiMessageLen>
    474e:	88 81       	ld	r24, Y
    4750:	88 0f       	add	r24, r24
    4752:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <_twiMessageBuffer>
    4756:	ff 20       	and	r15, r15
    4758:	89 f0       	breq	.+34     	; 0x477c <twiTransmit+0x72>
    475a:	f8 01       	movw	r30, r16
    475c:	ac ee       	ldi	r26, 0xEC	; 236
    475e:	b9 e1       	ldi	r27, 0x19	; 25
    4760:	4f ef       	ldi	r20, 0xFF	; 255
    4762:	4f 0d       	add	r20, r15
    4764:	64 2f       	mov	r22, r20
    4766:	70 e0       	ldi	r23, 0x00	; 0
    4768:	cb 01       	movw	r24, r22
    476a:	01 96       	adiw	r24, 0x01	; 1
    476c:	b8 01       	movw	r22, r16
    476e:	68 0f       	add	r22, r24
    4770:	79 1f       	adc	r23, r25
    4772:	81 91       	ld	r24, Z+
    4774:	8d 93       	st	X+, r24
    4776:	e6 17       	cp	r30, r22
    4778:	f7 07       	cpc	r31, r23
    477a:	d9 f7       	brne	.-10     	; 0x4772 <twiTransmit+0x68>
    477c:	88 ef       	ldi	r24, 0xF8	; 248
    477e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4782:	85 ea       	ldi	r24, 0xA5	; 165
    4784:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4788:	84 e0       	ldi	r24, 0x04	; 4
    478a:	05 c0       	rjmp	.+10     	; 0x4796 <twiTransmit+0x8c>
    478c:	86 e0       	ldi	r24, 0x06	; 6
    478e:	03 c0       	rjmp	.+6      	; 0x4796 <twiTransmit+0x8c>
    4790:	87 e0       	ldi	r24, 0x07	; 7
    4792:	01 c0       	rjmp	.+2      	; 0x4796 <twiTransmit+0x8c>
    4794:	82 e0       	ldi	r24, 0x02	; 2
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	1f 91       	pop	r17
    479c:	0f 91       	pop	r16
    479e:	ff 90       	pop	r15
    47a0:	08 95       	ret

000047a2 <twiReceive>:
    47a2:	1f 93       	push	r17
    47a4:	cf 93       	push	r28
    47a6:	df 93       	push	r29
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	29 f1       	breq	.+74     	; 0x47f6 <twiReceive+0x54>
    47ac:	6b 30       	cpi	r22, 0x0B	; 11
    47ae:	28 f5       	brcc	.+74     	; 0x47fa <twiReceive+0x58>
    47b0:	16 2f       	mov	r17, r22
    47b2:	ec 01       	movw	r28, r24
    47b4:	a6 df       	rcall	.-180    	; 0x4702 <twiIsBusy>
    47b6:	81 11       	cpse	r24, r1
    47b8:	22 c0       	rjmp	.+68     	; 0x47fe <twiReceive+0x5c>
    47ba:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <_twiCurrentHandler>
    47be:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <_twiCurrentHandler+0x1>
    47c2:	c8 17       	cp	r28, r24
    47c4:	d9 07       	cpc	r29, r25
    47c6:	41 f0       	breq	.+16     	; 0x47d8 <twiReceive+0x36>
    47c8:	3e df       	rcall	.-388    	; 0x4646 <_initTwiInterface>
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    47d0:	d0 93 e9 19 	sts	0x19E9, r29	; 0x8019e9 <_twiCurrentHandler+0x1>
    47d4:	c0 93 e8 19 	sts	0x19E8, r28	; 0x8019e8 <_twiCurrentHandler>
    47d8:	10 93 ea 19 	sts	0x19EA, r17	; 0x8019ea <_twiMessageLen>
    47dc:	88 81       	ld	r24, Y
    47de:	88 0f       	add	r24, r24
    47e0:	81 60       	ori	r24, 0x01	; 1
    47e2:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <_twiMessageBuffer>
    47e6:	88 ef       	ldi	r24, 0xF8	; 248
    47e8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    47ec:	85 ea       	ldi	r24, 0xA5	; 165
    47ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47f2:	85 e0       	ldi	r24, 0x05	; 5
    47f4:	05 c0       	rjmp	.+10     	; 0x4800 <twiReceive+0x5e>
    47f6:	86 e0       	ldi	r24, 0x06	; 6
    47f8:	03 c0       	rjmp	.+6      	; 0x4800 <twiReceive+0x5e>
    47fa:	87 e0       	ldi	r24, 0x07	; 7
    47fc:	01 c0       	rjmp	.+2      	; 0x4800 <twiReceive+0x5e>
    47fe:	82 e0       	ldi	r24, 0x02	; 2
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	1f 91       	pop	r17
    4806:	08 95       	ret

00004808 <__vector_39>:
    4808:	1f 92       	push	r1
    480a:	0f 92       	push	r0
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	0f 92       	push	r0
    4810:	11 24       	eor	r1, r1
    4812:	0b b6       	in	r0, 0x3b	; 59
    4814:	0f 92       	push	r0
    4816:	2f 93       	push	r18
    4818:	3f 93       	push	r19
    481a:	4f 93       	push	r20
    481c:	5f 93       	push	r21
    481e:	6f 93       	push	r22
    4820:	7f 93       	push	r23
    4822:	8f 93       	push	r24
    4824:	9f 93       	push	r25
    4826:	af 93       	push	r26
    4828:	bf 93       	push	r27
    482a:	ef 93       	push	r30
    482c:	ff 93       	push	r31
    482e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4832:	8e 2f       	mov	r24, r30
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	fc 01       	movw	r30, r24
    4838:	38 97       	sbiw	r30, 0x08	; 8
    483a:	e1 35       	cpi	r30, 0x51	; 81
    483c:	f1 05       	cpc	r31, r1
    483e:	08 f0       	brcs	.+2      	; 0x4842 <__vector_39+0x3a>
    4840:	75 c0       	rjmp	.+234    	; 0x492c <__vector_39+0x124>
    4842:	88 27       	eor	r24, r24
    4844:	e4 58       	subi	r30, 0x84	; 132
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	8f 4f       	sbci	r24, 0xFF	; 255
    484a:	76 c2       	rjmp	.+1260   	; 0x4d38 <__tablejump2__>
    484c:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <_index.1885>
    4850:	e0 91 e7 19 	lds	r30, 0x19E7	; 0x8019e7 <_index.1885>
    4854:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <_twiMessageLen>
    4858:	e8 17       	cp	r30, r24
    485a:	70 f4       	brcc	.+28     	; 0x4878 <__vector_39+0x70>
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	8e 0f       	add	r24, r30
    4860:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <_index.1885>
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	e5 51       	subi	r30, 0x15	; 21
    4868:	f6 4e       	sbci	r31, 0xE6	; 230
    486a:	80 81       	ld	r24, Z
    486c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4870:	85 e8       	ldi	r24, 0x85	; 133
    4872:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4876:	72 c0       	rjmp	.+228    	; 0x495c <__vector_39+0x154>
    4878:	84 e9       	ldi	r24, 0x94	; 148
    487a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    487e:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <_twiCurrentHandler>
    4882:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <_twiCurrentHandler+0x1>
    4886:	dc 01       	movw	r26, r24
    4888:	12 96       	adiw	r26, 0x02	; 2
    488a:	ed 91       	ld	r30, X+
    488c:	fc 91       	ld	r31, X
    488e:	13 97       	sbiw	r26, 0x03	; 3
    4890:	30 97       	sbiw	r30, 0x00	; 0
    4892:	09 f4       	brne	.+2      	; 0x4896 <__vector_39+0x8e>
    4894:	63 c0       	rjmp	.+198    	; 0x495c <__vector_39+0x154>
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	40 e0       	ldi	r20, 0x00	; 0
    489a:	50 e0       	ldi	r21, 0x00	; 0
    489c:	64 e0       	ldi	r22, 0x04	; 4
    489e:	19 95       	eicall
    48a0:	5d c0       	rjmp	.+186    	; 0x495c <__vector_39+0x154>
    48a2:	e0 91 e7 19 	lds	r30, 0x19E7	; 0x8019e7 <_index.1885>
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	8e 0f       	add	r24, r30
    48aa:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <_index.1885>
    48ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	e5 51       	subi	r30, 0x15	; 21
    48b6:	f6 4e       	sbci	r31, 0xE6	; 230
    48b8:	80 83       	st	Z, r24
    48ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    48be:	80 34       	cpi	r24, 0x40	; 64
    48c0:	11 f4       	brne	.+4      	; 0x48c6 <__vector_39+0xbe>
    48c2:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <_index.1885>
    48c6:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <_index.1885>
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <_twiMessageLen>
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	01 97       	sbiw	r24, 0x01	; 1
    48d4:	28 17       	cp	r18, r24
    48d6:	39 07       	cpc	r19, r25
    48d8:	24 f4       	brge	.+8      	; 0x48e2 <__vector_39+0xda>
    48da:	85 ec       	ldi	r24, 0xC5	; 197
    48dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48e0:	3d c0       	rjmp	.+122    	; 0x495c <__vector_39+0x154>
    48e2:	85 e8       	ldi	r24, 0x85	; 133
    48e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48e8:	39 c0       	rjmp	.+114    	; 0x495c <__vector_39+0x154>
    48ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    48ee:	e0 91 e7 19 	lds	r30, 0x19E7	; 0x8019e7 <_index.1885>
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	e5 51       	subi	r30, 0x15	; 21
    48f6:	f6 4e       	sbci	r31, 0xE6	; 230
    48f8:	80 83       	st	Z, r24
    48fa:	84 e9       	ldi	r24, 0x94	; 148
    48fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4900:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <_twiCurrentHandler>
    4904:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <_twiCurrentHandler+0x1>
    4908:	dc 01       	movw	r26, r24
    490a:	12 96       	adiw	r26, 0x02	; 2
    490c:	ed 91       	ld	r30, X+
    490e:	fc 91       	ld	r31, X
    4910:	13 97       	sbiw	r26, 0x03	; 3
    4912:	30 97       	sbiw	r30, 0x00	; 0
    4914:	19 f1       	breq	.+70     	; 0x495c <__vector_39+0x154>
    4916:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <_twiMessageLen>
    491a:	4b ee       	ldi	r20, 0xEB	; 235
    491c:	59 e1       	ldi	r21, 0x19	; 25
    491e:	65 e0       	ldi	r22, 0x05	; 5
    4920:	19 95       	eicall
    4922:	1c c0       	rjmp	.+56     	; 0x495c <__vector_39+0x154>
    4924:	85 ea       	ldi	r24, 0xA5	; 165
    4926:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    492a:	18 c0       	rjmp	.+48     	; 0x495c <__vector_39+0x154>
    492c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4930:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4934:	84 e0       	ldi	r24, 0x04	; 4
    4936:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    493a:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <_twiCurrentHandler>
    493e:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <_twiCurrentHandler+0x1>
    4942:	dc 01       	movw	r26, r24
    4944:	12 96       	adiw	r26, 0x02	; 2
    4946:	ed 91       	ld	r30, X+
    4948:	fc 91       	ld	r31, X
    494a:	13 97       	sbiw	r26, 0x03	; 3
    494c:	30 97       	sbiw	r30, 0x00	; 0
    494e:	31 f0       	breq	.+12     	; 0x495c <__vector_39+0x154>
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	50 e0       	ldi	r21, 0x00	; 0
    4956:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    495a:	19 95       	eicall
    495c:	ff 91       	pop	r31
    495e:	ef 91       	pop	r30
    4960:	bf 91       	pop	r27
    4962:	af 91       	pop	r26
    4964:	9f 91       	pop	r25
    4966:	8f 91       	pop	r24
    4968:	7f 91       	pop	r23
    496a:	6f 91       	pop	r22
    496c:	5f 91       	pop	r21
    496e:	4f 91       	pop	r20
    4970:	3f 91       	pop	r19
    4972:	2f 91       	pop	r18
    4974:	0f 90       	pop	r0
    4976:	0b be       	out	0x3b, r0	; 59
    4978:	0f 90       	pop	r0
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	0f 90       	pop	r0
    497e:	1f 90       	pop	r1
    4980:	18 95       	reti

00004982 <fifo_init>:
    4982:	fc 01       	movw	r30, r24
    4984:	41 11       	cpse	r20, r1
    4986:	01 c0       	rjmp	.+2      	; 0x498a <fifo_init+0x8>
    4988:	1a d3       	rcall	.+1588   	; 0x4fbe <abort>
    498a:	84 2f       	mov	r24, r20
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	9c 01       	movw	r18, r24
    4990:	21 50       	subi	r18, 0x01	; 1
    4992:	31 09       	sbc	r19, r1
    4994:	82 23       	and	r24, r18
    4996:	93 23       	and	r25, r19
    4998:	89 2b       	or	r24, r25
    499a:	09 f0       	breq	.+2      	; 0x499e <fifo_init+0x1c>
    499c:	10 d3       	rcall	.+1568   	; 0x4fbe <abort>
    499e:	41 38       	cpi	r20, 0x81	; 129
    49a0:	08 f0       	brcs	.+2      	; 0x49a4 <fifo_init+0x22>
    49a2:	0d d3       	rcall	.+1562   	; 0x4fbe <abort>
    49a4:	12 82       	std	Z+2, r1	; 0x02
    49a6:	13 82       	std	Z+3, r1	; 0x03
    49a8:	44 83       	std	Z+4, r20	; 0x04
    49aa:	44 0f       	add	r20, r20
    49ac:	41 50       	subi	r20, 0x01	; 1
    49ae:	45 83       	std	Z+5, r20	; 0x05
    49b0:	71 83       	std	Z+1, r23	; 0x01
    49b2:	60 83       	st	Z, r22
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	08 95       	ret

000049ba <__subsf3>:
    49ba:	50 58       	subi	r21, 0x80	; 128

000049bc <__addsf3>:
    49bc:	bb 27       	eor	r27, r27
    49be:	aa 27       	eor	r26, r26
    49c0:	0e d0       	rcall	.+28     	; 0x49de <__addsf3x>
    49c2:	21 c1       	rjmp	.+578    	; 0x4c06 <__fp_round>
    49c4:	12 d1       	rcall	.+548    	; 0x4bea <__fp_pscA>
    49c6:	30 f0       	brcs	.+12     	; 0x49d4 <__addsf3+0x18>
    49c8:	17 d1       	rcall	.+558    	; 0x4bf8 <__fp_pscB>
    49ca:	20 f0       	brcs	.+8      	; 0x49d4 <__addsf3+0x18>
    49cc:	31 f4       	brne	.+12     	; 0x49da <__addsf3+0x1e>
    49ce:	9f 3f       	cpi	r25, 0xFF	; 255
    49d0:	11 f4       	brne	.+4      	; 0x49d6 <__addsf3+0x1a>
    49d2:	1e f4       	brtc	.+6      	; 0x49da <__addsf3+0x1e>
    49d4:	07 c1       	rjmp	.+526    	; 0x4be4 <__fp_nan>
    49d6:	0e f4       	brtc	.+2      	; 0x49da <__addsf3+0x1e>
    49d8:	e0 95       	com	r30
    49da:	e7 fb       	bst	r30, 7
    49dc:	fd c0       	rjmp	.+506    	; 0x4bd8 <__fp_inf>

000049de <__addsf3x>:
    49de:	e9 2f       	mov	r30, r25
    49e0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fp_split3>
    49e4:	78 f3       	brcs	.-34     	; 0x49c4 <__addsf3+0x8>
    49e6:	ba 17       	cp	r27, r26
    49e8:	62 07       	cpc	r22, r18
    49ea:	73 07       	cpc	r23, r19
    49ec:	84 07       	cpc	r24, r20
    49ee:	95 07       	cpc	r25, r21
    49f0:	20 f0       	brcs	.+8      	; 0x49fa <__addsf3x+0x1c>
    49f2:	79 f4       	brne	.+30     	; 0x4a12 <__addsf3x+0x34>
    49f4:	a6 f5       	brtc	.+104    	; 0x4a5e <__addsf3x+0x80>
    49f6:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_zero>
    49fa:	0e f4       	brtc	.+2      	; 0x49fe <__addsf3x+0x20>
    49fc:	e0 95       	com	r30
    49fe:	0b 2e       	mov	r0, r27
    4a00:	ba 2f       	mov	r27, r26
    4a02:	a0 2d       	mov	r26, r0
    4a04:	0b 01       	movw	r0, r22
    4a06:	b9 01       	movw	r22, r18
    4a08:	90 01       	movw	r18, r0
    4a0a:	0c 01       	movw	r0, r24
    4a0c:	ca 01       	movw	r24, r20
    4a0e:	a0 01       	movw	r20, r0
    4a10:	11 24       	eor	r1, r1
    4a12:	ff 27       	eor	r31, r31
    4a14:	59 1b       	sub	r21, r25
    4a16:	99 f0       	breq	.+38     	; 0x4a3e <__addsf3x+0x60>
    4a18:	59 3f       	cpi	r21, 0xF9	; 249
    4a1a:	50 f4       	brcc	.+20     	; 0x4a30 <__addsf3x+0x52>
    4a1c:	50 3e       	cpi	r21, 0xE0	; 224
    4a1e:	68 f1       	brcs	.+90     	; 0x4a7a <__addsf3x+0x9c>
    4a20:	1a 16       	cp	r1, r26
    4a22:	f0 40       	sbci	r31, 0x00	; 0
    4a24:	a2 2f       	mov	r26, r18
    4a26:	23 2f       	mov	r18, r19
    4a28:	34 2f       	mov	r19, r20
    4a2a:	44 27       	eor	r20, r20
    4a2c:	58 5f       	subi	r21, 0xF8	; 248
    4a2e:	f3 cf       	rjmp	.-26     	; 0x4a16 <__addsf3x+0x38>
    4a30:	46 95       	lsr	r20
    4a32:	37 95       	ror	r19
    4a34:	27 95       	ror	r18
    4a36:	a7 95       	ror	r26
    4a38:	f0 40       	sbci	r31, 0x00	; 0
    4a3a:	53 95       	inc	r21
    4a3c:	c9 f7       	brne	.-14     	; 0x4a30 <__addsf3x+0x52>
    4a3e:	7e f4       	brtc	.+30     	; 0x4a5e <__addsf3x+0x80>
    4a40:	1f 16       	cp	r1, r31
    4a42:	ba 0b       	sbc	r27, r26
    4a44:	62 0b       	sbc	r22, r18
    4a46:	73 0b       	sbc	r23, r19
    4a48:	84 0b       	sbc	r24, r20
    4a4a:	ba f0       	brmi	.+46     	; 0x4a7a <__addsf3x+0x9c>
    4a4c:	91 50       	subi	r25, 0x01	; 1
    4a4e:	a1 f0       	breq	.+40     	; 0x4a78 <__addsf3x+0x9a>
    4a50:	ff 0f       	add	r31, r31
    4a52:	bb 1f       	adc	r27, r27
    4a54:	66 1f       	adc	r22, r22
    4a56:	77 1f       	adc	r23, r23
    4a58:	88 1f       	adc	r24, r24
    4a5a:	c2 f7       	brpl	.-16     	; 0x4a4c <__addsf3x+0x6e>
    4a5c:	0e c0       	rjmp	.+28     	; 0x4a7a <__addsf3x+0x9c>
    4a5e:	ba 0f       	add	r27, r26
    4a60:	62 1f       	adc	r22, r18
    4a62:	73 1f       	adc	r23, r19
    4a64:	84 1f       	adc	r24, r20
    4a66:	48 f4       	brcc	.+18     	; 0x4a7a <__addsf3x+0x9c>
    4a68:	87 95       	ror	r24
    4a6a:	77 95       	ror	r23
    4a6c:	67 95       	ror	r22
    4a6e:	b7 95       	ror	r27
    4a70:	f7 95       	ror	r31
    4a72:	9e 3f       	cpi	r25, 0xFE	; 254
    4a74:	08 f0       	brcs	.+2      	; 0x4a78 <__addsf3x+0x9a>
    4a76:	b1 cf       	rjmp	.-158    	; 0x49da <__addsf3+0x1e>
    4a78:	93 95       	inc	r25
    4a7a:	88 0f       	add	r24, r24
    4a7c:	08 f0       	brcs	.+2      	; 0x4a80 <__addsf3x+0xa2>
    4a7e:	99 27       	eor	r25, r25
    4a80:	ee 0f       	add	r30, r30
    4a82:	97 95       	ror	r25
    4a84:	87 95       	ror	r24
    4a86:	08 95       	ret

00004a88 <__divsf3>:
    4a88:	0d d0       	rcall	.+26     	; 0x4aa4 <__divsf3x>
    4a8a:	bd c0       	rjmp	.+378    	; 0x4c06 <__fp_round>
    4a8c:	b5 d0       	rcall	.+362    	; 0x4bf8 <__fp_pscB>
    4a8e:	48 f0       	brcs	.+18     	; 0x4aa2 <__divsf3+0x1a>
    4a90:	ac d0       	rcall	.+344    	; 0x4bea <__fp_pscA>
    4a92:	38 f0       	brcs	.+14     	; 0x4aa2 <__divsf3+0x1a>
    4a94:	21 f4       	brne	.+8      	; 0x4a9e <__divsf3+0x16>
    4a96:	5f 3f       	cpi	r21, 0xFF	; 255
    4a98:	21 f0       	breq	.+8      	; 0x4aa2 <__divsf3+0x1a>
    4a9a:	9e c0       	rjmp	.+316    	; 0x4bd8 <__fp_inf>
    4a9c:	51 11       	cpse	r21, r1
    4a9e:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    4aa2:	a0 c0       	rjmp	.+320    	; 0x4be4 <__fp_nan>

00004aa4 <__divsf3x>:
    4aa4:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fp_split3>
    4aa8:	88 f3       	brcs	.-30     	; 0x4a8c <__divsf3+0x4>

00004aaa <__divsf3_pse>:
    4aaa:	99 23       	and	r25, r25
    4aac:	b9 f3       	breq	.-18     	; 0x4a9c <__divsf3+0x14>
    4aae:	55 23       	and	r21, r21
    4ab0:	a1 f3       	breq	.-24     	; 0x4a9a <__divsf3+0x12>
    4ab2:	95 1b       	sub	r25, r21
    4ab4:	55 0b       	sbc	r21, r21
    4ab6:	bb 27       	eor	r27, r27
    4ab8:	aa 27       	eor	r26, r26
    4aba:	62 17       	cp	r22, r18
    4abc:	73 07       	cpc	r23, r19
    4abe:	84 07       	cpc	r24, r20
    4ac0:	38 f0       	brcs	.+14     	; 0x4ad0 <__divsf3_pse+0x26>
    4ac2:	9f 5f       	subi	r25, 0xFF	; 255
    4ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac6:	22 0f       	add	r18, r18
    4ac8:	33 1f       	adc	r19, r19
    4aca:	44 1f       	adc	r20, r20
    4acc:	aa 1f       	adc	r26, r26
    4ace:	a9 f3       	breq	.-22     	; 0x4aba <__divsf3_pse+0x10>
    4ad0:	34 d0       	rcall	.+104    	; 0x4b3a <__divsf3_pse+0x90>
    4ad2:	0e 2e       	mov	r0, r30
    4ad4:	3a f0       	brmi	.+14     	; 0x4ae4 <__divsf3_pse+0x3a>
    4ad6:	e0 e8       	ldi	r30, 0x80	; 128
    4ad8:	31 d0       	rcall	.+98     	; 0x4b3c <__divsf3_pse+0x92>
    4ada:	91 50       	subi	r25, 0x01	; 1
    4adc:	50 40       	sbci	r21, 0x00	; 0
    4ade:	e6 95       	lsr	r30
    4ae0:	00 1c       	adc	r0, r0
    4ae2:	ca f7       	brpl	.-14     	; 0x4ad6 <__divsf3_pse+0x2c>
    4ae4:	2a d0       	rcall	.+84     	; 0x4b3a <__divsf3_pse+0x90>
    4ae6:	fe 2f       	mov	r31, r30
    4ae8:	28 d0       	rcall	.+80     	; 0x4b3a <__divsf3_pse+0x90>
    4aea:	66 0f       	add	r22, r22
    4aec:	77 1f       	adc	r23, r23
    4aee:	88 1f       	adc	r24, r24
    4af0:	bb 1f       	adc	r27, r27
    4af2:	26 17       	cp	r18, r22
    4af4:	37 07       	cpc	r19, r23
    4af6:	48 07       	cpc	r20, r24
    4af8:	ab 07       	cpc	r26, r27
    4afa:	b0 e8       	ldi	r27, 0x80	; 128
    4afc:	09 f0       	breq	.+2      	; 0x4b00 <__divsf3_pse+0x56>
    4afe:	bb 0b       	sbc	r27, r27
    4b00:	80 2d       	mov	r24, r0
    4b02:	bf 01       	movw	r22, r30
    4b04:	ff 27       	eor	r31, r31
    4b06:	93 58       	subi	r25, 0x83	; 131
    4b08:	5f 4f       	sbci	r21, 0xFF	; 255
    4b0a:	32 f0       	brmi	.+12     	; 0x4b18 <__divsf3_pse+0x6e>
    4b0c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b0e:	51 05       	cpc	r21, r1
    4b10:	70 f0       	brcs	.+28     	; 0x4b2e <__divsf3_pse+0x84>
    4b12:	62 c0       	rjmp	.+196    	; 0x4bd8 <__fp_inf>
    4b14:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    4b18:	5f 3f       	cpi	r21, 0xFF	; 255
    4b1a:	e4 f3       	brlt	.-8      	; 0x4b14 <__divsf3_pse+0x6a>
    4b1c:	98 3e       	cpi	r25, 0xE8	; 232
    4b1e:	d4 f3       	brlt	.-12     	; 0x4b14 <__divsf3_pse+0x6a>
    4b20:	86 95       	lsr	r24
    4b22:	77 95       	ror	r23
    4b24:	67 95       	ror	r22
    4b26:	b7 95       	ror	r27
    4b28:	f7 95       	ror	r31
    4b2a:	9f 5f       	subi	r25, 0xFF	; 255
    4b2c:	c9 f7       	brne	.-14     	; 0x4b20 <__divsf3_pse+0x76>
    4b2e:	88 0f       	add	r24, r24
    4b30:	91 1d       	adc	r25, r1
    4b32:	96 95       	lsr	r25
    4b34:	87 95       	ror	r24
    4b36:	97 f9       	bld	r25, 7
    4b38:	08 95       	ret
    4b3a:	e1 e0       	ldi	r30, 0x01	; 1
    4b3c:	66 0f       	add	r22, r22
    4b3e:	77 1f       	adc	r23, r23
    4b40:	88 1f       	adc	r24, r24
    4b42:	bb 1f       	adc	r27, r27
    4b44:	62 17       	cp	r22, r18
    4b46:	73 07       	cpc	r23, r19
    4b48:	84 07       	cpc	r24, r20
    4b4a:	ba 07       	cpc	r27, r26
    4b4c:	20 f0       	brcs	.+8      	; 0x4b56 <__divsf3_pse+0xac>
    4b4e:	62 1b       	sub	r22, r18
    4b50:	73 0b       	sbc	r23, r19
    4b52:	84 0b       	sbc	r24, r20
    4b54:	ba 0b       	sbc	r27, r26
    4b56:	ee 1f       	adc	r30, r30
    4b58:	88 f7       	brcc	.-30     	; 0x4b3c <__divsf3_pse+0x92>
    4b5a:	e0 95       	com	r30
    4b5c:	08 95       	ret

00004b5e <__floatunsisf>:
    4b5e:	e8 94       	clt
    4b60:	09 c0       	rjmp	.+18     	; 0x4b74 <__floatsisf+0x12>

00004b62 <__floatsisf>:
    4b62:	97 fb       	bst	r25, 7
    4b64:	3e f4       	brtc	.+14     	; 0x4b74 <__floatsisf+0x12>
    4b66:	90 95       	com	r25
    4b68:	80 95       	com	r24
    4b6a:	70 95       	com	r23
    4b6c:	61 95       	neg	r22
    4b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b70:	8f 4f       	sbci	r24, 0xFF	; 255
    4b72:	9f 4f       	sbci	r25, 0xFF	; 255
    4b74:	99 23       	and	r25, r25
    4b76:	a9 f0       	breq	.+42     	; 0x4ba2 <__floatsisf+0x40>
    4b78:	f9 2f       	mov	r31, r25
    4b7a:	96 e9       	ldi	r25, 0x96	; 150
    4b7c:	bb 27       	eor	r27, r27
    4b7e:	93 95       	inc	r25
    4b80:	f6 95       	lsr	r31
    4b82:	87 95       	ror	r24
    4b84:	77 95       	ror	r23
    4b86:	67 95       	ror	r22
    4b88:	b7 95       	ror	r27
    4b8a:	f1 11       	cpse	r31, r1
    4b8c:	f8 cf       	rjmp	.-16     	; 0x4b7e <__floatsisf+0x1c>
    4b8e:	fa f4       	brpl	.+62     	; 0x4bce <__floatsisf+0x6c>
    4b90:	bb 0f       	add	r27, r27
    4b92:	11 f4       	brne	.+4      	; 0x4b98 <__floatsisf+0x36>
    4b94:	60 ff       	sbrs	r22, 0
    4b96:	1b c0       	rjmp	.+54     	; 0x4bce <__floatsisf+0x6c>
    4b98:	6f 5f       	subi	r22, 0xFF	; 255
    4b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba0:	16 c0       	rjmp	.+44     	; 0x4bce <__floatsisf+0x6c>
    4ba2:	88 23       	and	r24, r24
    4ba4:	11 f0       	breq	.+4      	; 0x4baa <__floatsisf+0x48>
    4ba6:	96 e9       	ldi	r25, 0x96	; 150
    4ba8:	11 c0       	rjmp	.+34     	; 0x4bcc <__floatsisf+0x6a>
    4baa:	77 23       	and	r23, r23
    4bac:	21 f0       	breq	.+8      	; 0x4bb6 <__floatsisf+0x54>
    4bae:	9e e8       	ldi	r25, 0x8E	; 142
    4bb0:	87 2f       	mov	r24, r23
    4bb2:	76 2f       	mov	r23, r22
    4bb4:	05 c0       	rjmp	.+10     	; 0x4bc0 <__floatsisf+0x5e>
    4bb6:	66 23       	and	r22, r22
    4bb8:	71 f0       	breq	.+28     	; 0x4bd6 <__floatsisf+0x74>
    4bba:	96 e8       	ldi	r25, 0x86	; 134
    4bbc:	86 2f       	mov	r24, r22
    4bbe:	70 e0       	ldi	r23, 0x00	; 0
    4bc0:	60 e0       	ldi	r22, 0x00	; 0
    4bc2:	2a f0       	brmi	.+10     	; 0x4bce <__floatsisf+0x6c>
    4bc4:	9a 95       	dec	r25
    4bc6:	66 0f       	add	r22, r22
    4bc8:	77 1f       	adc	r23, r23
    4bca:	88 1f       	adc	r24, r24
    4bcc:	da f7       	brpl	.-10     	; 0x4bc4 <__floatsisf+0x62>
    4bce:	88 0f       	add	r24, r24
    4bd0:	96 95       	lsr	r25
    4bd2:	87 95       	ror	r24
    4bd4:	97 f9       	bld	r25, 7
    4bd6:	08 95       	ret

00004bd8 <__fp_inf>:
    4bd8:	97 f9       	bld	r25, 7
    4bda:	9f 67       	ori	r25, 0x7F	; 127
    4bdc:	80 e8       	ldi	r24, 0x80	; 128
    4bde:	70 e0       	ldi	r23, 0x00	; 0
    4be0:	60 e0       	ldi	r22, 0x00	; 0
    4be2:	08 95       	ret

00004be4 <__fp_nan>:
    4be4:	9f ef       	ldi	r25, 0xFF	; 255
    4be6:	80 ec       	ldi	r24, 0xC0	; 192
    4be8:	08 95       	ret

00004bea <__fp_pscA>:
    4bea:	00 24       	eor	r0, r0
    4bec:	0a 94       	dec	r0
    4bee:	16 16       	cp	r1, r22
    4bf0:	17 06       	cpc	r1, r23
    4bf2:	18 06       	cpc	r1, r24
    4bf4:	09 06       	cpc	r0, r25
    4bf6:	08 95       	ret

00004bf8 <__fp_pscB>:
    4bf8:	00 24       	eor	r0, r0
    4bfa:	0a 94       	dec	r0
    4bfc:	12 16       	cp	r1, r18
    4bfe:	13 06       	cpc	r1, r19
    4c00:	14 06       	cpc	r1, r20
    4c02:	05 06       	cpc	r0, r21
    4c04:	08 95       	ret

00004c06 <__fp_round>:
    4c06:	09 2e       	mov	r0, r25
    4c08:	03 94       	inc	r0
    4c0a:	00 0c       	add	r0, r0
    4c0c:	11 f4       	brne	.+4      	; 0x4c12 <__fp_round+0xc>
    4c0e:	88 23       	and	r24, r24
    4c10:	52 f0       	brmi	.+20     	; 0x4c26 <__fp_round+0x20>
    4c12:	bb 0f       	add	r27, r27
    4c14:	40 f4       	brcc	.+16     	; 0x4c26 <__fp_round+0x20>
    4c16:	bf 2b       	or	r27, r31
    4c18:	11 f4       	brne	.+4      	; 0x4c1e <__fp_round+0x18>
    4c1a:	60 ff       	sbrs	r22, 0
    4c1c:	04 c0       	rjmp	.+8      	; 0x4c26 <__fp_round+0x20>
    4c1e:	6f 5f       	subi	r22, 0xFF	; 255
    4c20:	7f 4f       	sbci	r23, 0xFF	; 255
    4c22:	8f 4f       	sbci	r24, 0xFF	; 255
    4c24:	9f 4f       	sbci	r25, 0xFF	; 255
    4c26:	08 95       	ret

00004c28 <__mulsf3>:
    4c28:	0c d0       	rcall	.+24     	; 0x4c42 <__mulsf3x>
    4c2a:	ed cf       	rjmp	.-38     	; 0x4c06 <__fp_round>
    4c2c:	de df       	rcall	.-68     	; 0x4bea <__fp_pscA>
    4c2e:	28 f0       	brcs	.+10     	; 0x4c3a <__mulsf3+0x12>
    4c30:	e3 df       	rcall	.-58     	; 0x4bf8 <__fp_pscB>
    4c32:	18 f0       	brcs	.+6      	; 0x4c3a <__mulsf3+0x12>
    4c34:	95 23       	and	r25, r21
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <__mulsf3+0x12>
    4c38:	cf cf       	rjmp	.-98     	; 0x4bd8 <__fp_inf>
    4c3a:	d4 cf       	rjmp	.-88     	; 0x4be4 <__fp_nan>
    4c3c:	11 24       	eor	r1, r1
    4c3e:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>

00004c42 <__mulsf3x>:
    4c42:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fp_split3>
    4c46:	90 f3       	brcs	.-28     	; 0x4c2c <__mulsf3+0x4>

00004c48 <__mulsf3_pse>:
    4c48:	95 9f       	mul	r25, r21
    4c4a:	c1 f3       	breq	.-16     	; 0x4c3c <__mulsf3+0x14>
    4c4c:	95 0f       	add	r25, r21
    4c4e:	50 e0       	ldi	r21, 0x00	; 0
    4c50:	55 1f       	adc	r21, r21
    4c52:	62 9f       	mul	r22, r18
    4c54:	f0 01       	movw	r30, r0
    4c56:	72 9f       	mul	r23, r18
    4c58:	bb 27       	eor	r27, r27
    4c5a:	f0 0d       	add	r31, r0
    4c5c:	b1 1d       	adc	r27, r1
    4c5e:	63 9f       	mul	r22, r19
    4c60:	aa 27       	eor	r26, r26
    4c62:	f0 0d       	add	r31, r0
    4c64:	b1 1d       	adc	r27, r1
    4c66:	aa 1f       	adc	r26, r26
    4c68:	64 9f       	mul	r22, r20
    4c6a:	66 27       	eor	r22, r22
    4c6c:	b0 0d       	add	r27, r0
    4c6e:	a1 1d       	adc	r26, r1
    4c70:	66 1f       	adc	r22, r22
    4c72:	82 9f       	mul	r24, r18
    4c74:	22 27       	eor	r18, r18
    4c76:	b0 0d       	add	r27, r0
    4c78:	a1 1d       	adc	r26, r1
    4c7a:	62 1f       	adc	r22, r18
    4c7c:	73 9f       	mul	r23, r19
    4c7e:	b0 0d       	add	r27, r0
    4c80:	a1 1d       	adc	r26, r1
    4c82:	62 1f       	adc	r22, r18
    4c84:	83 9f       	mul	r24, r19
    4c86:	a0 0d       	add	r26, r0
    4c88:	61 1d       	adc	r22, r1
    4c8a:	22 1f       	adc	r18, r18
    4c8c:	74 9f       	mul	r23, r20
    4c8e:	33 27       	eor	r19, r19
    4c90:	a0 0d       	add	r26, r0
    4c92:	61 1d       	adc	r22, r1
    4c94:	23 1f       	adc	r18, r19
    4c96:	84 9f       	mul	r24, r20
    4c98:	60 0d       	add	r22, r0
    4c9a:	21 1d       	adc	r18, r1
    4c9c:	82 2f       	mov	r24, r18
    4c9e:	76 2f       	mov	r23, r22
    4ca0:	6a 2f       	mov	r22, r26
    4ca2:	11 24       	eor	r1, r1
    4ca4:	9f 57       	subi	r25, 0x7F	; 127
    4ca6:	50 40       	sbci	r21, 0x00	; 0
    4ca8:	92 f0       	brmi	.+36     	; 0x4cce <__mulsf3_pse+0x86>
    4caa:	e9 f0       	breq	.+58     	; 0x4ce6 <__mulsf3_pse+0x9e>
    4cac:	88 23       	and	r24, r24
    4cae:	4a f0       	brmi	.+18     	; 0x4cc2 <__mulsf3_pse+0x7a>
    4cb0:	ee 0f       	add	r30, r30
    4cb2:	ff 1f       	adc	r31, r31
    4cb4:	bb 1f       	adc	r27, r27
    4cb6:	66 1f       	adc	r22, r22
    4cb8:	77 1f       	adc	r23, r23
    4cba:	88 1f       	adc	r24, r24
    4cbc:	91 50       	subi	r25, 0x01	; 1
    4cbe:	50 40       	sbci	r21, 0x00	; 0
    4cc0:	a9 f7       	brne	.-22     	; 0x4cac <__mulsf3_pse+0x64>
    4cc2:	9e 3f       	cpi	r25, 0xFE	; 254
    4cc4:	51 05       	cpc	r21, r1
    4cc6:	78 f0       	brcs	.+30     	; 0x4ce6 <__mulsf3_pse+0x9e>
    4cc8:	87 cf       	rjmp	.-242    	; 0x4bd8 <__fp_inf>
    4cca:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    4cce:	5f 3f       	cpi	r21, 0xFF	; 255
    4cd0:	e4 f3       	brlt	.-8      	; 0x4cca <__mulsf3_pse+0x82>
    4cd2:	98 3e       	cpi	r25, 0xE8	; 232
    4cd4:	d4 f3       	brlt	.-12     	; 0x4cca <__mulsf3_pse+0x82>
    4cd6:	86 95       	lsr	r24
    4cd8:	77 95       	ror	r23
    4cda:	67 95       	ror	r22
    4cdc:	b7 95       	ror	r27
    4cde:	f7 95       	ror	r31
    4ce0:	e7 95       	ror	r30
    4ce2:	9f 5f       	subi	r25, 0xFF	; 255
    4ce4:	c1 f7       	brne	.-16     	; 0x4cd6 <__mulsf3_pse+0x8e>
    4ce6:	fe 2b       	or	r31, r30
    4ce8:	88 0f       	add	r24, r24
    4cea:	91 1d       	adc	r25, r1
    4cec:	96 95       	lsr	r25
    4cee:	87 95       	ror	r24
    4cf0:	97 f9       	bld	r25, 7
    4cf2:	08 95       	ret

00004cf4 <__udivmodsi4>:
    4cf4:	a1 e2       	ldi	r26, 0x21	; 33
    4cf6:	1a 2e       	mov	r1, r26
    4cf8:	aa 1b       	sub	r26, r26
    4cfa:	bb 1b       	sub	r27, r27
    4cfc:	fd 01       	movw	r30, r26
    4cfe:	0d c0       	rjmp	.+26     	; 0x4d1a <__udivmodsi4_ep>

00004d00 <__udivmodsi4_loop>:
    4d00:	aa 1f       	adc	r26, r26
    4d02:	bb 1f       	adc	r27, r27
    4d04:	ee 1f       	adc	r30, r30
    4d06:	ff 1f       	adc	r31, r31
    4d08:	a2 17       	cp	r26, r18
    4d0a:	b3 07       	cpc	r27, r19
    4d0c:	e4 07       	cpc	r30, r20
    4d0e:	f5 07       	cpc	r31, r21
    4d10:	20 f0       	brcs	.+8      	; 0x4d1a <__udivmodsi4_ep>
    4d12:	a2 1b       	sub	r26, r18
    4d14:	b3 0b       	sbc	r27, r19
    4d16:	e4 0b       	sbc	r30, r20
    4d18:	f5 0b       	sbc	r31, r21

00004d1a <__udivmodsi4_ep>:
    4d1a:	66 1f       	adc	r22, r22
    4d1c:	77 1f       	adc	r23, r23
    4d1e:	88 1f       	adc	r24, r24
    4d20:	99 1f       	adc	r25, r25
    4d22:	1a 94       	dec	r1
    4d24:	69 f7       	brne	.-38     	; 0x4d00 <__udivmodsi4_loop>
    4d26:	60 95       	com	r22
    4d28:	70 95       	com	r23
    4d2a:	80 95       	com	r24
    4d2c:	90 95       	com	r25
    4d2e:	9b 01       	movw	r18, r22
    4d30:	ac 01       	movw	r20, r24
    4d32:	bd 01       	movw	r22, r26
    4d34:	cf 01       	movw	r24, r30
    4d36:	08 95       	ret

00004d38 <__tablejump2__>:
    4d38:	ee 0f       	add	r30, r30
    4d3a:	ff 1f       	adc	r31, r31
    4d3c:	88 1f       	adc	r24, r24
    4d3e:	8b bf       	out	0x3b, r24	; 59
    4d40:	07 90       	elpm	r0, Z+
    4d42:	f6 91       	elpm	r31, Z
    4d44:	e0 2d       	mov	r30, r0
    4d46:	19 94       	eijmp

00004d48 <calloc>:
    4d48:	0f 93       	push	r16
    4d4a:	1f 93       	push	r17
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	86 9f       	mul	r24, r22
    4d52:	80 01       	movw	r16, r0
    4d54:	87 9f       	mul	r24, r23
    4d56:	10 0d       	add	r17, r0
    4d58:	96 9f       	mul	r25, r22
    4d5a:	10 0d       	add	r17, r0
    4d5c:	11 24       	eor	r1, r1
    4d5e:	c8 01       	movw	r24, r16
    4d60:	0d d0       	rcall	.+26     	; 0x4d7c <malloc>
    4d62:	ec 01       	movw	r28, r24
    4d64:	00 97       	sbiw	r24, 0x00	; 0
    4d66:	21 f0       	breq	.+8      	; 0x4d70 <calloc+0x28>
    4d68:	a8 01       	movw	r20, r16
    4d6a:	60 e0       	ldi	r22, 0x00	; 0
    4d6c:	70 e0       	ldi	r23, 0x00	; 0
    4d6e:	34 d1       	rcall	.+616    	; 0x4fd8 <memset>
    4d70:	ce 01       	movw	r24, r28
    4d72:	df 91       	pop	r29
    4d74:	cf 91       	pop	r28
    4d76:	1f 91       	pop	r17
    4d78:	0f 91       	pop	r16
    4d7a:	08 95       	ret

00004d7c <malloc>:
    4d7c:	0f 93       	push	r16
    4d7e:	1f 93       	push	r17
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	82 30       	cpi	r24, 0x02	; 2
    4d86:	91 05       	cpc	r25, r1
    4d88:	10 f4       	brcc	.+4      	; 0x4d8e <malloc+0x12>
    4d8a:	82 e0       	ldi	r24, 0x02	; 2
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	e0 91 1d 1a 	lds	r30, 0x1A1D	; 0x801a1d <__flp>
    4d92:	f0 91 1e 1a 	lds	r31, 0x1A1E	; 0x801a1e <__flp+0x1>
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	a0 e0       	ldi	r26, 0x00	; 0
    4d9c:	b0 e0       	ldi	r27, 0x00	; 0
    4d9e:	30 97       	sbiw	r30, 0x00	; 0
    4da0:	19 f1       	breq	.+70     	; 0x4de8 <malloc+0x6c>
    4da2:	40 81       	ld	r20, Z
    4da4:	51 81       	ldd	r21, Z+1	; 0x01
    4da6:	02 81       	ldd	r16, Z+2	; 0x02
    4da8:	13 81       	ldd	r17, Z+3	; 0x03
    4daa:	48 17       	cp	r20, r24
    4dac:	59 07       	cpc	r21, r25
    4dae:	c8 f0       	brcs	.+50     	; 0x4de2 <malloc+0x66>
    4db0:	84 17       	cp	r24, r20
    4db2:	95 07       	cpc	r25, r21
    4db4:	69 f4       	brne	.+26     	; 0x4dd0 <malloc+0x54>
    4db6:	10 97       	sbiw	r26, 0x00	; 0
    4db8:	31 f0       	breq	.+12     	; 0x4dc6 <malloc+0x4a>
    4dba:	12 96       	adiw	r26, 0x02	; 2
    4dbc:	0c 93       	st	X, r16
    4dbe:	12 97       	sbiw	r26, 0x02	; 2
    4dc0:	13 96       	adiw	r26, 0x03	; 3
    4dc2:	1c 93       	st	X, r17
    4dc4:	27 c0       	rjmp	.+78     	; 0x4e14 <malloc+0x98>
    4dc6:	00 93 1d 1a 	sts	0x1A1D, r16	; 0x801a1d <__flp>
    4dca:	10 93 1e 1a 	sts	0x1A1E, r17	; 0x801a1e <__flp+0x1>
    4dce:	22 c0       	rjmp	.+68     	; 0x4e14 <malloc+0x98>
    4dd0:	21 15       	cp	r18, r1
    4dd2:	31 05       	cpc	r19, r1
    4dd4:	19 f0       	breq	.+6      	; 0x4ddc <malloc+0x60>
    4dd6:	42 17       	cp	r20, r18
    4dd8:	53 07       	cpc	r21, r19
    4dda:	18 f4       	brcc	.+6      	; 0x4de2 <malloc+0x66>
    4ddc:	9a 01       	movw	r18, r20
    4dde:	bd 01       	movw	r22, r26
    4de0:	ef 01       	movw	r28, r30
    4de2:	df 01       	movw	r26, r30
    4de4:	f8 01       	movw	r30, r16
    4de6:	db cf       	rjmp	.-74     	; 0x4d9e <malloc+0x22>
    4de8:	21 15       	cp	r18, r1
    4dea:	31 05       	cpc	r19, r1
    4dec:	f9 f0       	breq	.+62     	; 0x4e2c <malloc+0xb0>
    4dee:	28 1b       	sub	r18, r24
    4df0:	39 0b       	sbc	r19, r25
    4df2:	24 30       	cpi	r18, 0x04	; 4
    4df4:	31 05       	cpc	r19, r1
    4df6:	80 f4       	brcc	.+32     	; 0x4e18 <malloc+0x9c>
    4df8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfc:	61 15       	cp	r22, r1
    4dfe:	71 05       	cpc	r23, r1
    4e00:	21 f0       	breq	.+8      	; 0x4e0a <malloc+0x8e>
    4e02:	fb 01       	movw	r30, r22
    4e04:	93 83       	std	Z+3, r25	; 0x03
    4e06:	82 83       	std	Z+2, r24	; 0x02
    4e08:	04 c0       	rjmp	.+8      	; 0x4e12 <malloc+0x96>
    4e0a:	90 93 1e 1a 	sts	0x1A1E, r25	; 0x801a1e <__flp+0x1>
    4e0e:	80 93 1d 1a 	sts	0x1A1D, r24	; 0x801a1d <__flp>
    4e12:	fe 01       	movw	r30, r28
    4e14:	32 96       	adiw	r30, 0x02	; 2
    4e16:	44 c0       	rjmp	.+136    	; 0x4ea0 <malloc+0x124>
    4e18:	fe 01       	movw	r30, r28
    4e1a:	e2 0f       	add	r30, r18
    4e1c:	f3 1f       	adc	r31, r19
    4e1e:	81 93       	st	Z+, r24
    4e20:	91 93       	st	Z+, r25
    4e22:	22 50       	subi	r18, 0x02	; 2
    4e24:	31 09       	sbc	r19, r1
    4e26:	39 83       	std	Y+1, r19	; 0x01
    4e28:	28 83       	st	Y, r18
    4e2a:	3a c0       	rjmp	.+116    	; 0x4ea0 <malloc+0x124>
    4e2c:	20 91 1b 1a 	lds	r18, 0x1A1B	; 0x801a1b <__brkval>
    4e30:	30 91 1c 1a 	lds	r19, 0x1A1C	; 0x801a1c <__brkval+0x1>
    4e34:	23 2b       	or	r18, r19
    4e36:	41 f4       	brne	.+16     	; 0x4e48 <malloc+0xcc>
    4e38:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4e3c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4e40:	30 93 1c 1a 	sts	0x1A1C, r19	; 0x801a1c <__brkval+0x1>
    4e44:	20 93 1b 1a 	sts	0x1A1B, r18	; 0x801a1b <__brkval>
    4e48:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4e4c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4e50:	21 15       	cp	r18, r1
    4e52:	31 05       	cpc	r19, r1
    4e54:	41 f4       	brne	.+16     	; 0x4e66 <malloc+0xea>
    4e56:	2d b7       	in	r18, 0x3d	; 61
    4e58:	3e b7       	in	r19, 0x3e	; 62
    4e5a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4e5e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4e62:	24 1b       	sub	r18, r20
    4e64:	35 0b       	sbc	r19, r21
    4e66:	e0 91 1b 1a 	lds	r30, 0x1A1B	; 0x801a1b <__brkval>
    4e6a:	f0 91 1c 1a 	lds	r31, 0x1A1C	; 0x801a1c <__brkval+0x1>
    4e6e:	e2 17       	cp	r30, r18
    4e70:	f3 07       	cpc	r31, r19
    4e72:	a0 f4       	brcc	.+40     	; 0x4e9c <malloc+0x120>
    4e74:	2e 1b       	sub	r18, r30
    4e76:	3f 0b       	sbc	r19, r31
    4e78:	28 17       	cp	r18, r24
    4e7a:	39 07       	cpc	r19, r25
    4e7c:	78 f0       	brcs	.+30     	; 0x4e9c <malloc+0x120>
    4e7e:	ac 01       	movw	r20, r24
    4e80:	4e 5f       	subi	r20, 0xFE	; 254
    4e82:	5f 4f       	sbci	r21, 0xFF	; 255
    4e84:	24 17       	cp	r18, r20
    4e86:	35 07       	cpc	r19, r21
    4e88:	48 f0       	brcs	.+18     	; 0x4e9c <malloc+0x120>
    4e8a:	4e 0f       	add	r20, r30
    4e8c:	5f 1f       	adc	r21, r31
    4e8e:	50 93 1c 1a 	sts	0x1A1C, r21	; 0x801a1c <__brkval+0x1>
    4e92:	40 93 1b 1a 	sts	0x1A1B, r20	; 0x801a1b <__brkval>
    4e96:	81 93       	st	Z+, r24
    4e98:	91 93       	st	Z+, r25
    4e9a:	02 c0       	rjmp	.+4      	; 0x4ea0 <malloc+0x124>
    4e9c:	e0 e0       	ldi	r30, 0x00	; 0
    4e9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ea0:	cf 01       	movw	r24, r30
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	1f 91       	pop	r17
    4ea8:	0f 91       	pop	r16
    4eaa:	08 95       	ret

00004eac <free>:
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	00 97       	sbiw	r24, 0x00	; 0
    4eb2:	09 f4       	brne	.+2      	; 0x4eb6 <free+0xa>
    4eb4:	81 c0       	rjmp	.+258    	; 0x4fb8 <free+0x10c>
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	32 97       	sbiw	r30, 0x02	; 2
    4eba:	13 82       	std	Z+3, r1	; 0x03
    4ebc:	12 82       	std	Z+2, r1	; 0x02
    4ebe:	a0 91 1d 1a 	lds	r26, 0x1A1D	; 0x801a1d <__flp>
    4ec2:	b0 91 1e 1a 	lds	r27, 0x1A1E	; 0x801a1e <__flp+0x1>
    4ec6:	10 97       	sbiw	r26, 0x00	; 0
    4ec8:	81 f4       	brne	.+32     	; 0x4eea <free+0x3e>
    4eca:	20 81       	ld	r18, Z
    4ecc:	31 81       	ldd	r19, Z+1	; 0x01
    4ece:	82 0f       	add	r24, r18
    4ed0:	93 1f       	adc	r25, r19
    4ed2:	20 91 1b 1a 	lds	r18, 0x1A1B	; 0x801a1b <__brkval>
    4ed6:	30 91 1c 1a 	lds	r19, 0x1A1C	; 0x801a1c <__brkval+0x1>
    4eda:	28 17       	cp	r18, r24
    4edc:	39 07       	cpc	r19, r25
    4ede:	51 f5       	brne	.+84     	; 0x4f34 <free+0x88>
    4ee0:	f0 93 1c 1a 	sts	0x1A1C, r31	; 0x801a1c <__brkval+0x1>
    4ee4:	e0 93 1b 1a 	sts	0x1A1B, r30	; 0x801a1b <__brkval>
    4ee8:	67 c0       	rjmp	.+206    	; 0x4fb8 <free+0x10c>
    4eea:	ed 01       	movw	r28, r26
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	ce 17       	cp	r28, r30
    4ef2:	df 07       	cpc	r29, r31
    4ef4:	40 f4       	brcc	.+16     	; 0x4f06 <free+0x5a>
    4ef6:	4a 81       	ldd	r20, Y+2	; 0x02
    4ef8:	5b 81       	ldd	r21, Y+3	; 0x03
    4efa:	9e 01       	movw	r18, r28
    4efc:	41 15       	cp	r20, r1
    4efe:	51 05       	cpc	r21, r1
    4f00:	f1 f0       	breq	.+60     	; 0x4f3e <free+0x92>
    4f02:	ea 01       	movw	r28, r20
    4f04:	f5 cf       	rjmp	.-22     	; 0x4ef0 <free+0x44>
    4f06:	d3 83       	std	Z+3, r29	; 0x03
    4f08:	c2 83       	std	Z+2, r28	; 0x02
    4f0a:	40 81       	ld	r20, Z
    4f0c:	51 81       	ldd	r21, Z+1	; 0x01
    4f0e:	84 0f       	add	r24, r20
    4f10:	95 1f       	adc	r25, r21
    4f12:	c8 17       	cp	r28, r24
    4f14:	d9 07       	cpc	r29, r25
    4f16:	59 f4       	brne	.+22     	; 0x4f2e <free+0x82>
    4f18:	88 81       	ld	r24, Y
    4f1a:	99 81       	ldd	r25, Y+1	; 0x01
    4f1c:	84 0f       	add	r24, r20
    4f1e:	95 1f       	adc	r25, r21
    4f20:	02 96       	adiw	r24, 0x02	; 2
    4f22:	91 83       	std	Z+1, r25	; 0x01
    4f24:	80 83       	st	Z, r24
    4f26:	8a 81       	ldd	r24, Y+2	; 0x02
    4f28:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2a:	93 83       	std	Z+3, r25	; 0x03
    4f2c:	82 83       	std	Z+2, r24	; 0x02
    4f2e:	21 15       	cp	r18, r1
    4f30:	31 05       	cpc	r19, r1
    4f32:	29 f4       	brne	.+10     	; 0x4f3e <free+0x92>
    4f34:	f0 93 1e 1a 	sts	0x1A1E, r31	; 0x801a1e <__flp+0x1>
    4f38:	e0 93 1d 1a 	sts	0x1A1D, r30	; 0x801a1d <__flp>
    4f3c:	3d c0       	rjmp	.+122    	; 0x4fb8 <free+0x10c>
    4f3e:	e9 01       	movw	r28, r18
    4f40:	fb 83       	std	Y+3, r31	; 0x03
    4f42:	ea 83       	std	Y+2, r30	; 0x02
    4f44:	49 91       	ld	r20, Y+
    4f46:	59 91       	ld	r21, Y+
    4f48:	c4 0f       	add	r28, r20
    4f4a:	d5 1f       	adc	r29, r21
    4f4c:	ec 17       	cp	r30, r28
    4f4e:	fd 07       	cpc	r31, r29
    4f50:	61 f4       	brne	.+24     	; 0x4f6a <free+0xbe>
    4f52:	80 81       	ld	r24, Z
    4f54:	91 81       	ldd	r25, Z+1	; 0x01
    4f56:	84 0f       	add	r24, r20
    4f58:	95 1f       	adc	r25, r21
    4f5a:	02 96       	adiw	r24, 0x02	; 2
    4f5c:	e9 01       	movw	r28, r18
    4f5e:	99 83       	std	Y+1, r25	; 0x01
    4f60:	88 83       	st	Y, r24
    4f62:	82 81       	ldd	r24, Z+2	; 0x02
    4f64:	93 81       	ldd	r25, Z+3	; 0x03
    4f66:	9b 83       	std	Y+3, r25	; 0x03
    4f68:	8a 83       	std	Y+2, r24	; 0x02
    4f6a:	e0 e0       	ldi	r30, 0x00	; 0
    4f6c:	f0 e0       	ldi	r31, 0x00	; 0
    4f6e:	12 96       	adiw	r26, 0x02	; 2
    4f70:	8d 91       	ld	r24, X+
    4f72:	9c 91       	ld	r25, X
    4f74:	13 97       	sbiw	r26, 0x03	; 3
    4f76:	00 97       	sbiw	r24, 0x00	; 0
    4f78:	19 f0       	breq	.+6      	; 0x4f80 <free+0xd4>
    4f7a:	fd 01       	movw	r30, r26
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	f7 cf       	rjmp	.-18     	; 0x4f6e <free+0xc2>
    4f80:	8d 91       	ld	r24, X+
    4f82:	9c 91       	ld	r25, X
    4f84:	11 97       	sbiw	r26, 0x01	; 1
    4f86:	9d 01       	movw	r18, r26
    4f88:	2e 5f       	subi	r18, 0xFE	; 254
    4f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f8c:	82 0f       	add	r24, r18
    4f8e:	93 1f       	adc	r25, r19
    4f90:	20 91 1b 1a 	lds	r18, 0x1A1B	; 0x801a1b <__brkval>
    4f94:	30 91 1c 1a 	lds	r19, 0x1A1C	; 0x801a1c <__brkval+0x1>
    4f98:	28 17       	cp	r18, r24
    4f9a:	39 07       	cpc	r19, r25
    4f9c:	69 f4       	brne	.+26     	; 0x4fb8 <free+0x10c>
    4f9e:	30 97       	sbiw	r30, 0x00	; 0
    4fa0:	29 f4       	brne	.+10     	; 0x4fac <free+0x100>
    4fa2:	10 92 1e 1a 	sts	0x1A1E, r1	; 0x801a1e <__flp+0x1>
    4fa6:	10 92 1d 1a 	sts	0x1A1D, r1	; 0x801a1d <__flp>
    4faa:	02 c0       	rjmp	.+4      	; 0x4fb0 <free+0x104>
    4fac:	13 82       	std	Z+3, r1	; 0x03
    4fae:	12 82       	std	Z+2, r1	; 0x02
    4fb0:	b0 93 1c 1a 	sts	0x1A1C, r27	; 0x801a1c <__brkval+0x1>
    4fb4:	a0 93 1b 1a 	sts	0x1A1B, r26	; 0x801a1b <__brkval>
    4fb8:	df 91       	pop	r29
    4fba:	cf 91       	pop	r28
    4fbc:	08 95       	ret

00004fbe <abort>:
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	f8 94       	cli
    4fc4:	7d c3       	rjmp	.+1786   	; 0x56c0 <_exit>

00004fc6 <memcpy>:
    4fc6:	fb 01       	movw	r30, r22
    4fc8:	dc 01       	movw	r26, r24
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <memcpy+0xa>
    4fcc:	01 90       	ld	r0, Z+
    4fce:	0d 92       	st	X+, r0
    4fd0:	41 50       	subi	r20, 0x01	; 1
    4fd2:	50 40       	sbci	r21, 0x00	; 0
    4fd4:	d8 f7       	brcc	.-10     	; 0x4fcc <memcpy+0x6>
    4fd6:	08 95       	ret

00004fd8 <memset>:
    4fd8:	dc 01       	movw	r26, r24
    4fda:	01 c0       	rjmp	.+2      	; 0x4fde <memset+0x6>
    4fdc:	6d 93       	st	X+, r22
    4fde:	41 50       	subi	r20, 0x01	; 1
    4fe0:	50 40       	sbci	r21, 0x00	; 0
    4fe2:	e0 f7       	brcc	.-8      	; 0x4fdc <memset+0x4>
    4fe4:	08 95       	ret

00004fe6 <strcasestr>:
    4fe6:	fb 01       	movw	r30, r22
    4fe8:	51 91       	ld	r21, Z+
    4fea:	55 23       	and	r21, r21
    4fec:	b1 f0       	breq	.+44     	; 0x501a <strcasestr+0x34>
    4fee:	bf 01       	movw	r22, r30
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	05 2e       	mov	r0, r21
    4ff4:	4d 91       	ld	r20, X+
    4ff6:	44 23       	and	r20, r20
    4ff8:	69 f0       	breq	.+26     	; 0x5014 <strcasestr+0x2e>
    4ffa:	10 d0       	rcall	.+32     	; 0x501c <strcasestr+0x36>
    4ffc:	d9 f7       	brne	.-10     	; 0x4ff4 <strcasestr+0xe>
    4ffe:	cd 01       	movw	r24, r26
    5000:	01 90       	ld	r0, Z+
    5002:	00 20       	and	r0, r0
    5004:	49 f0       	breq	.+18     	; 0x5018 <strcasestr+0x32>
    5006:	4d 91       	ld	r20, X+
    5008:	41 11       	cpse	r20, r1
    500a:	08 d0       	rcall	.+16     	; 0x501c <strcasestr+0x36>
    500c:	c9 f3       	breq	.-14     	; 0x5000 <strcasestr+0x1a>
    500e:	fb 01       	movw	r30, r22
    5010:	41 11       	cpse	r20, r1
    5012:	ee cf       	rjmp	.-36     	; 0x4ff0 <strcasestr+0xa>
    5014:	81 e0       	ldi	r24, 0x01	; 1
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	08 95       	ret
    501c:	40 25       	eor	r20, r0
    501e:	39 f0       	breq	.+14     	; 0x502e <strcasestr+0x48>
    5020:	40 32       	cpi	r20, 0x20	; 32
    5022:	29 f4       	brne	.+10     	; 0x502e <strcasestr+0x48>
    5024:	40 29       	or	r20, r0
    5026:	4b 57       	subi	r20, 0x7B	; 123
    5028:	46 5e       	subi	r20, 0xE6	; 230
    502a:	08 f0       	brcs	.+2      	; 0x502e <strcasestr+0x48>
    502c:	18 94       	sez
    502e:	08 95       	ret

00005030 <strcat>:
    5030:	fb 01       	movw	r30, r22
    5032:	dc 01       	movw	r26, r24
    5034:	0d 90       	ld	r0, X+
    5036:	00 20       	and	r0, r0
    5038:	e9 f7       	brne	.-6      	; 0x5034 <strcat+0x4>
    503a:	11 97       	sbiw	r26, 0x01	; 1
    503c:	01 90       	ld	r0, Z+
    503e:	0d 92       	st	X+, r0
    5040:	00 20       	and	r0, r0
    5042:	e1 f7       	brne	.-8      	; 0x503c <strcat+0xc>
    5044:	08 95       	ret

00005046 <strcpy>:
    5046:	fb 01       	movw	r30, r22
    5048:	dc 01       	movw	r26, r24
    504a:	01 90       	ld	r0, Z+
    504c:	0d 92       	st	X+, r0
    504e:	00 20       	and	r0, r0
    5050:	e1 f7       	brne	.-8      	; 0x504a <strcpy+0x4>
    5052:	08 95       	ret

00005054 <strncasecmp>:
    5054:	fb 01       	movw	r30, r22
    5056:	dc 01       	movw	r26, r24
    5058:	41 50       	subi	r20, 0x01	; 1
    505a:	50 40       	sbci	r21, 0x00	; 0
    505c:	88 f0       	brcs	.+34     	; 0x5080 <strncasecmp+0x2c>
    505e:	8d 91       	ld	r24, X+
    5060:	81 34       	cpi	r24, 0x41	; 65
    5062:	1c f0       	brlt	.+6      	; 0x506a <strncasecmp+0x16>
    5064:	8b 35       	cpi	r24, 0x5B	; 91
    5066:	0c f4       	brge	.+2      	; 0x506a <strncasecmp+0x16>
    5068:	80 5e       	subi	r24, 0xE0	; 224
    506a:	61 91       	ld	r22, Z+
    506c:	61 34       	cpi	r22, 0x41	; 65
    506e:	1c f0       	brlt	.+6      	; 0x5076 <strncasecmp+0x22>
    5070:	6b 35       	cpi	r22, 0x5B	; 91
    5072:	0c f4       	brge	.+2      	; 0x5076 <strncasecmp+0x22>
    5074:	60 5e       	subi	r22, 0xE0	; 224
    5076:	86 1b       	sub	r24, r22
    5078:	61 11       	cpse	r22, r1
    507a:	71 f3       	breq	.-36     	; 0x5058 <strncasecmp+0x4>
    507c:	99 0b       	sbc	r25, r25
    507e:	08 95       	ret
    5080:	88 1b       	sub	r24, r24
    5082:	fc cf       	rjmp	.-8      	; 0x507c <strncasecmp+0x28>

00005084 <printf>:
    5084:	cf 93       	push	r28
    5086:	df 93       	push	r29
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62
    508c:	ae 01       	movw	r20, r28
    508e:	4a 5f       	subi	r20, 0xFA	; 250
    5090:	5f 4f       	sbci	r21, 0xFF	; 255
    5092:	fa 01       	movw	r30, r20
    5094:	61 91       	ld	r22, Z+
    5096:	71 91       	ld	r23, Z+
    5098:	af 01       	movw	r20, r30
    509a:	80 91 21 1a 	lds	r24, 0x1A21	; 0x801a21 <__iob+0x2>
    509e:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <__iob+0x3>
    50a2:	61 d0       	rcall	.+194    	; 0x5166 <vfprintf>
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	08 95       	ret

000050aa <puts>:
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	e0 91 21 1a 	lds	r30, 0x1A21	; 0x801a21 <__iob+0x2>
    50b6:	f0 91 22 1a 	lds	r31, 0x1A22	; 0x801a22 <__iob+0x3>
    50ba:	23 81       	ldd	r18, Z+3	; 0x03
    50bc:	21 ff       	sbrs	r18, 1
    50be:	1b c0       	rjmp	.+54     	; 0x50f6 <puts+0x4c>
    50c0:	8c 01       	movw	r16, r24
    50c2:	d0 e0       	ldi	r29, 0x00	; 0
    50c4:	c0 e0       	ldi	r28, 0x00	; 0
    50c6:	f8 01       	movw	r30, r16
    50c8:	81 91       	ld	r24, Z+
    50ca:	8f 01       	movw	r16, r30
    50cc:	60 91 21 1a 	lds	r22, 0x1A21	; 0x801a21 <__iob+0x2>
    50d0:	70 91 22 1a 	lds	r23, 0x1A22	; 0x801a22 <__iob+0x3>
    50d4:	db 01       	movw	r26, r22
    50d6:	18 96       	adiw	r26, 0x08	; 8
    50d8:	ed 91       	ld	r30, X+
    50da:	fc 91       	ld	r31, X
    50dc:	19 97       	sbiw	r26, 0x09	; 9
    50de:	88 23       	and	r24, r24
    50e0:	31 f0       	breq	.+12     	; 0x50ee <puts+0x44>
    50e2:	19 95       	eicall
    50e4:	89 2b       	or	r24, r25
    50e6:	79 f3       	breq	.-34     	; 0x50c6 <puts+0x1c>
    50e8:	df ef       	ldi	r29, 0xFF	; 255
    50ea:	cf ef       	ldi	r28, 0xFF	; 255
    50ec:	ec cf       	rjmp	.-40     	; 0x50c6 <puts+0x1c>
    50ee:	8a e0       	ldi	r24, 0x0A	; 10
    50f0:	19 95       	eicall
    50f2:	89 2b       	or	r24, r25
    50f4:	19 f0       	breq	.+6      	; 0x50fc <puts+0x52>
    50f6:	8f ef       	ldi	r24, 0xFF	; 255
    50f8:	9f ef       	ldi	r25, 0xFF	; 255
    50fa:	02 c0       	rjmp	.+4      	; 0x5100 <puts+0x56>
    50fc:	8d 2f       	mov	r24, r29
    50fe:	9c 2f       	mov	r25, r28
    5100:	df 91       	pop	r29
    5102:	cf 91       	pop	r28
    5104:	1f 91       	pop	r17
    5106:	0f 91       	pop	r16
    5108:	08 95       	ret

0000510a <sprintf>:
    510a:	0f 93       	push	r16
    510c:	1f 93       	push	r17
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	cd b7       	in	r28, 0x3d	; 61
    5114:	de b7       	in	r29, 0x3e	; 62
    5116:	2e 97       	sbiw	r28, 0x0e	; 14
    5118:	0f b6       	in	r0, 0x3f	; 63
    511a:	f8 94       	cli
    511c:	de bf       	out	0x3e, r29	; 62
    511e:	0f be       	out	0x3f, r0	; 63
    5120:	cd bf       	out	0x3d, r28	; 61
    5122:	0e 89       	ldd	r16, Y+22	; 0x16
    5124:	1f 89       	ldd	r17, Y+23	; 0x17
    5126:	86 e0       	ldi	r24, 0x06	; 6
    5128:	8c 83       	std	Y+4, r24	; 0x04
    512a:	1a 83       	std	Y+2, r17	; 0x02
    512c:	09 83       	std	Y+1, r16	; 0x01
    512e:	8f ef       	ldi	r24, 0xFF	; 255
    5130:	9f e7       	ldi	r25, 0x7F	; 127
    5132:	9e 83       	std	Y+6, r25	; 0x06
    5134:	8d 83       	std	Y+5, r24	; 0x05
    5136:	ae 01       	movw	r20, r28
    5138:	46 5e       	subi	r20, 0xE6	; 230
    513a:	5f 4f       	sbci	r21, 0xFF	; 255
    513c:	68 8d       	ldd	r22, Y+24	; 0x18
    513e:	79 8d       	ldd	r23, Y+25	; 0x19
    5140:	ce 01       	movw	r24, r28
    5142:	01 96       	adiw	r24, 0x01	; 1
    5144:	10 d0       	rcall	.+32     	; 0x5166 <vfprintf>
    5146:	ef 81       	ldd	r30, Y+7	; 0x07
    5148:	f8 85       	ldd	r31, Y+8	; 0x08
    514a:	e0 0f       	add	r30, r16
    514c:	f1 1f       	adc	r31, r17
    514e:	10 82       	st	Z, r1
    5150:	2e 96       	adiw	r28, 0x0e	; 14
    5152:	0f b6       	in	r0, 0x3f	; 63
    5154:	f8 94       	cli
    5156:	de bf       	out	0x3e, r29	; 62
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	cd bf       	out	0x3d, r28	; 61
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	1f 91       	pop	r17
    5162:	0f 91       	pop	r16
    5164:	08 95       	ret

00005166 <vfprintf>:
    5166:	2f 92       	push	r2
    5168:	3f 92       	push	r3
    516a:	4f 92       	push	r4
    516c:	5f 92       	push	r5
    516e:	6f 92       	push	r6
    5170:	7f 92       	push	r7
    5172:	8f 92       	push	r8
    5174:	9f 92       	push	r9
    5176:	af 92       	push	r10
    5178:	bf 92       	push	r11
    517a:	cf 92       	push	r12
    517c:	df 92       	push	r13
    517e:	ef 92       	push	r14
    5180:	ff 92       	push	r15
    5182:	0f 93       	push	r16
    5184:	1f 93       	push	r17
    5186:	cf 93       	push	r28
    5188:	df 93       	push	r29
    518a:	cd b7       	in	r28, 0x3d	; 61
    518c:	de b7       	in	r29, 0x3e	; 62
    518e:	2b 97       	sbiw	r28, 0x0b	; 11
    5190:	0f b6       	in	r0, 0x3f	; 63
    5192:	f8 94       	cli
    5194:	de bf       	out	0x3e, r29	; 62
    5196:	0f be       	out	0x3f, r0	; 63
    5198:	cd bf       	out	0x3d, r28	; 61
    519a:	6c 01       	movw	r12, r24
    519c:	7b 01       	movw	r14, r22
    519e:	8a 01       	movw	r16, r20
    51a0:	fc 01       	movw	r30, r24
    51a2:	17 82       	std	Z+7, r1	; 0x07
    51a4:	16 82       	std	Z+6, r1	; 0x06
    51a6:	83 81       	ldd	r24, Z+3	; 0x03
    51a8:	81 ff       	sbrs	r24, 1
    51aa:	bf c1       	rjmp	.+894    	; 0x552a <vfprintf+0x3c4>
    51ac:	ce 01       	movw	r24, r28
    51ae:	01 96       	adiw	r24, 0x01	; 1
    51b0:	3c 01       	movw	r6, r24
    51b2:	f6 01       	movw	r30, r12
    51b4:	93 81       	ldd	r25, Z+3	; 0x03
    51b6:	f7 01       	movw	r30, r14
    51b8:	93 fd       	sbrc	r25, 3
    51ba:	85 91       	lpm	r24, Z+
    51bc:	93 ff       	sbrs	r25, 3
    51be:	81 91       	ld	r24, Z+
    51c0:	7f 01       	movw	r14, r30
    51c2:	88 23       	and	r24, r24
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <vfprintf+0x62>
    51c6:	ad c1       	rjmp	.+858    	; 0x5522 <vfprintf+0x3bc>
    51c8:	85 32       	cpi	r24, 0x25	; 37
    51ca:	39 f4       	brne	.+14     	; 0x51da <vfprintf+0x74>
    51cc:	93 fd       	sbrc	r25, 3
    51ce:	85 91       	lpm	r24, Z+
    51d0:	93 ff       	sbrs	r25, 3
    51d2:	81 91       	ld	r24, Z+
    51d4:	7f 01       	movw	r14, r30
    51d6:	85 32       	cpi	r24, 0x25	; 37
    51d8:	21 f4       	brne	.+8      	; 0x51e2 <vfprintf+0x7c>
    51da:	b6 01       	movw	r22, r12
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	d6 d1       	rcall	.+940    	; 0x558c <fputc>
    51e0:	e8 cf       	rjmp	.-48     	; 0x51b2 <vfprintf+0x4c>
    51e2:	91 2c       	mov	r9, r1
    51e4:	21 2c       	mov	r2, r1
    51e6:	31 2c       	mov	r3, r1
    51e8:	ff e1       	ldi	r31, 0x1F	; 31
    51ea:	f3 15       	cp	r31, r3
    51ec:	d8 f0       	brcs	.+54     	; 0x5224 <vfprintf+0xbe>
    51ee:	8b 32       	cpi	r24, 0x2B	; 43
    51f0:	79 f0       	breq	.+30     	; 0x5210 <vfprintf+0xaa>
    51f2:	38 f4       	brcc	.+14     	; 0x5202 <vfprintf+0x9c>
    51f4:	80 32       	cpi	r24, 0x20	; 32
    51f6:	79 f0       	breq	.+30     	; 0x5216 <vfprintf+0xb0>
    51f8:	83 32       	cpi	r24, 0x23	; 35
    51fa:	a1 f4       	brne	.+40     	; 0x5224 <vfprintf+0xbe>
    51fc:	23 2d       	mov	r18, r3
    51fe:	20 61       	ori	r18, 0x10	; 16
    5200:	1d c0       	rjmp	.+58     	; 0x523c <vfprintf+0xd6>
    5202:	8d 32       	cpi	r24, 0x2D	; 45
    5204:	61 f0       	breq	.+24     	; 0x521e <vfprintf+0xb8>
    5206:	80 33       	cpi	r24, 0x30	; 48
    5208:	69 f4       	brne	.+26     	; 0x5224 <vfprintf+0xbe>
    520a:	23 2d       	mov	r18, r3
    520c:	21 60       	ori	r18, 0x01	; 1
    520e:	16 c0       	rjmp	.+44     	; 0x523c <vfprintf+0xd6>
    5210:	83 2d       	mov	r24, r3
    5212:	82 60       	ori	r24, 0x02	; 2
    5214:	38 2e       	mov	r3, r24
    5216:	e3 2d       	mov	r30, r3
    5218:	e4 60       	ori	r30, 0x04	; 4
    521a:	3e 2e       	mov	r3, r30
    521c:	2a c0       	rjmp	.+84     	; 0x5272 <vfprintf+0x10c>
    521e:	f3 2d       	mov	r31, r3
    5220:	f8 60       	ori	r31, 0x08	; 8
    5222:	1d c0       	rjmp	.+58     	; 0x525e <vfprintf+0xf8>
    5224:	37 fc       	sbrc	r3, 7
    5226:	2d c0       	rjmp	.+90     	; 0x5282 <vfprintf+0x11c>
    5228:	20 ed       	ldi	r18, 0xD0	; 208
    522a:	28 0f       	add	r18, r24
    522c:	2a 30       	cpi	r18, 0x0A	; 10
    522e:	40 f0       	brcs	.+16     	; 0x5240 <vfprintf+0xda>
    5230:	8e 32       	cpi	r24, 0x2E	; 46
    5232:	b9 f4       	brne	.+46     	; 0x5262 <vfprintf+0xfc>
    5234:	36 fc       	sbrc	r3, 6
    5236:	75 c1       	rjmp	.+746    	; 0x5522 <vfprintf+0x3bc>
    5238:	23 2d       	mov	r18, r3
    523a:	20 64       	ori	r18, 0x40	; 64
    523c:	32 2e       	mov	r3, r18
    523e:	19 c0       	rjmp	.+50     	; 0x5272 <vfprintf+0x10c>
    5240:	36 fe       	sbrs	r3, 6
    5242:	06 c0       	rjmp	.+12     	; 0x5250 <vfprintf+0xea>
    5244:	8a e0       	ldi	r24, 0x0A	; 10
    5246:	98 9e       	mul	r9, r24
    5248:	20 0d       	add	r18, r0
    524a:	11 24       	eor	r1, r1
    524c:	92 2e       	mov	r9, r18
    524e:	11 c0       	rjmp	.+34     	; 0x5272 <vfprintf+0x10c>
    5250:	ea e0       	ldi	r30, 0x0A	; 10
    5252:	2e 9e       	mul	r2, r30
    5254:	20 0d       	add	r18, r0
    5256:	11 24       	eor	r1, r1
    5258:	22 2e       	mov	r2, r18
    525a:	f3 2d       	mov	r31, r3
    525c:	f0 62       	ori	r31, 0x20	; 32
    525e:	3f 2e       	mov	r3, r31
    5260:	08 c0       	rjmp	.+16     	; 0x5272 <vfprintf+0x10c>
    5262:	8c 36       	cpi	r24, 0x6C	; 108
    5264:	21 f4       	brne	.+8      	; 0x526e <vfprintf+0x108>
    5266:	83 2d       	mov	r24, r3
    5268:	80 68       	ori	r24, 0x80	; 128
    526a:	38 2e       	mov	r3, r24
    526c:	02 c0       	rjmp	.+4      	; 0x5272 <vfprintf+0x10c>
    526e:	88 36       	cpi	r24, 0x68	; 104
    5270:	41 f4       	brne	.+16     	; 0x5282 <vfprintf+0x11c>
    5272:	f7 01       	movw	r30, r14
    5274:	93 fd       	sbrc	r25, 3
    5276:	85 91       	lpm	r24, Z+
    5278:	93 ff       	sbrs	r25, 3
    527a:	81 91       	ld	r24, Z+
    527c:	7f 01       	movw	r14, r30
    527e:	81 11       	cpse	r24, r1
    5280:	b3 cf       	rjmp	.-154    	; 0x51e8 <vfprintf+0x82>
    5282:	98 2f       	mov	r25, r24
    5284:	9f 7d       	andi	r25, 0xDF	; 223
    5286:	95 54       	subi	r25, 0x45	; 69
    5288:	93 30       	cpi	r25, 0x03	; 3
    528a:	28 f4       	brcc	.+10     	; 0x5296 <vfprintf+0x130>
    528c:	0c 5f       	subi	r16, 0xFC	; 252
    528e:	1f 4f       	sbci	r17, 0xFF	; 255
    5290:	9f e3       	ldi	r25, 0x3F	; 63
    5292:	99 83       	std	Y+1, r25	; 0x01
    5294:	0d c0       	rjmp	.+26     	; 0x52b0 <vfprintf+0x14a>
    5296:	83 36       	cpi	r24, 0x63	; 99
    5298:	31 f0       	breq	.+12     	; 0x52a6 <vfprintf+0x140>
    529a:	83 37       	cpi	r24, 0x73	; 115
    529c:	71 f0       	breq	.+28     	; 0x52ba <vfprintf+0x154>
    529e:	83 35       	cpi	r24, 0x53	; 83
    52a0:	09 f0       	breq	.+2      	; 0x52a4 <vfprintf+0x13e>
    52a2:	55 c0       	rjmp	.+170    	; 0x534e <vfprintf+0x1e8>
    52a4:	20 c0       	rjmp	.+64     	; 0x52e6 <vfprintf+0x180>
    52a6:	f8 01       	movw	r30, r16
    52a8:	80 81       	ld	r24, Z
    52aa:	89 83       	std	Y+1, r24	; 0x01
    52ac:	0e 5f       	subi	r16, 0xFE	; 254
    52ae:	1f 4f       	sbci	r17, 0xFF	; 255
    52b0:	88 24       	eor	r8, r8
    52b2:	83 94       	inc	r8
    52b4:	91 2c       	mov	r9, r1
    52b6:	53 01       	movw	r10, r6
    52b8:	12 c0       	rjmp	.+36     	; 0x52de <vfprintf+0x178>
    52ba:	28 01       	movw	r4, r16
    52bc:	f2 e0       	ldi	r31, 0x02	; 2
    52be:	4f 0e       	add	r4, r31
    52c0:	51 1c       	adc	r5, r1
    52c2:	f8 01       	movw	r30, r16
    52c4:	a0 80       	ld	r10, Z
    52c6:	b1 80       	ldd	r11, Z+1	; 0x01
    52c8:	36 fe       	sbrs	r3, 6
    52ca:	03 c0       	rjmp	.+6      	; 0x52d2 <vfprintf+0x16c>
    52cc:	69 2d       	mov	r22, r9
    52ce:	70 e0       	ldi	r23, 0x00	; 0
    52d0:	02 c0       	rjmp	.+4      	; 0x52d6 <vfprintf+0x170>
    52d2:	6f ef       	ldi	r22, 0xFF	; 255
    52d4:	7f ef       	ldi	r23, 0xFF	; 255
    52d6:	c5 01       	movw	r24, r10
    52d8:	4e d1       	rcall	.+668    	; 0x5576 <strnlen>
    52da:	4c 01       	movw	r8, r24
    52dc:	82 01       	movw	r16, r4
    52de:	f3 2d       	mov	r31, r3
    52e0:	ff 77       	andi	r31, 0x7F	; 127
    52e2:	3f 2e       	mov	r3, r31
    52e4:	15 c0       	rjmp	.+42     	; 0x5310 <vfprintf+0x1aa>
    52e6:	28 01       	movw	r4, r16
    52e8:	22 e0       	ldi	r18, 0x02	; 2
    52ea:	42 0e       	add	r4, r18
    52ec:	51 1c       	adc	r5, r1
    52ee:	f8 01       	movw	r30, r16
    52f0:	a0 80       	ld	r10, Z
    52f2:	b1 80       	ldd	r11, Z+1	; 0x01
    52f4:	36 fe       	sbrs	r3, 6
    52f6:	03 c0       	rjmp	.+6      	; 0x52fe <vfprintf+0x198>
    52f8:	69 2d       	mov	r22, r9
    52fa:	70 e0       	ldi	r23, 0x00	; 0
    52fc:	02 c0       	rjmp	.+4      	; 0x5302 <vfprintf+0x19c>
    52fe:	6f ef       	ldi	r22, 0xFF	; 255
    5300:	7f ef       	ldi	r23, 0xFF	; 255
    5302:	c5 01       	movw	r24, r10
    5304:	2d d1       	rcall	.+602    	; 0x5560 <strnlen_P>
    5306:	4c 01       	movw	r8, r24
    5308:	f3 2d       	mov	r31, r3
    530a:	f0 68       	ori	r31, 0x80	; 128
    530c:	3f 2e       	mov	r3, r31
    530e:	82 01       	movw	r16, r4
    5310:	33 fc       	sbrc	r3, 3
    5312:	19 c0       	rjmp	.+50     	; 0x5346 <vfprintf+0x1e0>
    5314:	82 2d       	mov	r24, r2
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	88 16       	cp	r8, r24
    531a:	99 06       	cpc	r9, r25
    531c:	a0 f4       	brcc	.+40     	; 0x5346 <vfprintf+0x1e0>
    531e:	b6 01       	movw	r22, r12
    5320:	80 e2       	ldi	r24, 0x20	; 32
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	33 d1       	rcall	.+614    	; 0x558c <fputc>
    5326:	2a 94       	dec	r2
    5328:	f5 cf       	rjmp	.-22     	; 0x5314 <vfprintf+0x1ae>
    532a:	f5 01       	movw	r30, r10
    532c:	37 fc       	sbrc	r3, 7
    532e:	85 91       	lpm	r24, Z+
    5330:	37 fe       	sbrs	r3, 7
    5332:	81 91       	ld	r24, Z+
    5334:	5f 01       	movw	r10, r30
    5336:	b6 01       	movw	r22, r12
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	28 d1       	rcall	.+592    	; 0x558c <fputc>
    533c:	21 10       	cpse	r2, r1
    533e:	2a 94       	dec	r2
    5340:	21 e0       	ldi	r18, 0x01	; 1
    5342:	82 1a       	sub	r8, r18
    5344:	91 08       	sbc	r9, r1
    5346:	81 14       	cp	r8, r1
    5348:	91 04       	cpc	r9, r1
    534a:	79 f7       	brne	.-34     	; 0x532a <vfprintf+0x1c4>
    534c:	e1 c0       	rjmp	.+450    	; 0x5510 <vfprintf+0x3aa>
    534e:	84 36       	cpi	r24, 0x64	; 100
    5350:	11 f0       	breq	.+4      	; 0x5356 <vfprintf+0x1f0>
    5352:	89 36       	cpi	r24, 0x69	; 105
    5354:	39 f5       	brne	.+78     	; 0x53a4 <vfprintf+0x23e>
    5356:	f8 01       	movw	r30, r16
    5358:	37 fe       	sbrs	r3, 7
    535a:	07 c0       	rjmp	.+14     	; 0x536a <vfprintf+0x204>
    535c:	60 81       	ld	r22, Z
    535e:	71 81       	ldd	r23, Z+1	; 0x01
    5360:	82 81       	ldd	r24, Z+2	; 0x02
    5362:	93 81       	ldd	r25, Z+3	; 0x03
    5364:	0c 5f       	subi	r16, 0xFC	; 252
    5366:	1f 4f       	sbci	r17, 0xFF	; 255
    5368:	08 c0       	rjmp	.+16     	; 0x537a <vfprintf+0x214>
    536a:	60 81       	ld	r22, Z
    536c:	71 81       	ldd	r23, Z+1	; 0x01
    536e:	07 2e       	mov	r0, r23
    5370:	00 0c       	add	r0, r0
    5372:	88 0b       	sbc	r24, r24
    5374:	99 0b       	sbc	r25, r25
    5376:	0e 5f       	subi	r16, 0xFE	; 254
    5378:	1f 4f       	sbci	r17, 0xFF	; 255
    537a:	f3 2d       	mov	r31, r3
    537c:	ff 76       	andi	r31, 0x6F	; 111
    537e:	3f 2e       	mov	r3, r31
    5380:	97 ff       	sbrs	r25, 7
    5382:	09 c0       	rjmp	.+18     	; 0x5396 <vfprintf+0x230>
    5384:	90 95       	com	r25
    5386:	80 95       	com	r24
    5388:	70 95       	com	r23
    538a:	61 95       	neg	r22
    538c:	7f 4f       	sbci	r23, 0xFF	; 255
    538e:	8f 4f       	sbci	r24, 0xFF	; 255
    5390:	9f 4f       	sbci	r25, 0xFF	; 255
    5392:	f0 68       	ori	r31, 0x80	; 128
    5394:	3f 2e       	mov	r3, r31
    5396:	2a e0       	ldi	r18, 0x0A	; 10
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	a3 01       	movw	r20, r6
    539c:	33 d1       	rcall	.+614    	; 0x5604 <__ultoa_invert>
    539e:	88 2e       	mov	r8, r24
    53a0:	86 18       	sub	r8, r6
    53a2:	44 c0       	rjmp	.+136    	; 0x542c <vfprintf+0x2c6>
    53a4:	85 37       	cpi	r24, 0x75	; 117
    53a6:	31 f4       	brne	.+12     	; 0x53b4 <vfprintf+0x24e>
    53a8:	23 2d       	mov	r18, r3
    53aa:	2f 7e       	andi	r18, 0xEF	; 239
    53ac:	b2 2e       	mov	r11, r18
    53ae:	2a e0       	ldi	r18, 0x0A	; 10
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	25 c0       	rjmp	.+74     	; 0x53fe <vfprintf+0x298>
    53b4:	93 2d       	mov	r25, r3
    53b6:	99 7f       	andi	r25, 0xF9	; 249
    53b8:	b9 2e       	mov	r11, r25
    53ba:	8f 36       	cpi	r24, 0x6F	; 111
    53bc:	c1 f0       	breq	.+48     	; 0x53ee <vfprintf+0x288>
    53be:	18 f4       	brcc	.+6      	; 0x53c6 <vfprintf+0x260>
    53c0:	88 35       	cpi	r24, 0x58	; 88
    53c2:	79 f0       	breq	.+30     	; 0x53e2 <vfprintf+0x27c>
    53c4:	ae c0       	rjmp	.+348    	; 0x5522 <vfprintf+0x3bc>
    53c6:	80 37       	cpi	r24, 0x70	; 112
    53c8:	19 f0       	breq	.+6      	; 0x53d0 <vfprintf+0x26a>
    53ca:	88 37       	cpi	r24, 0x78	; 120
    53cc:	21 f0       	breq	.+8      	; 0x53d6 <vfprintf+0x270>
    53ce:	a9 c0       	rjmp	.+338    	; 0x5522 <vfprintf+0x3bc>
    53d0:	e9 2f       	mov	r30, r25
    53d2:	e0 61       	ori	r30, 0x10	; 16
    53d4:	be 2e       	mov	r11, r30
    53d6:	b4 fe       	sbrs	r11, 4
    53d8:	0d c0       	rjmp	.+26     	; 0x53f4 <vfprintf+0x28e>
    53da:	fb 2d       	mov	r31, r11
    53dc:	f4 60       	ori	r31, 0x04	; 4
    53de:	bf 2e       	mov	r11, r31
    53e0:	09 c0       	rjmp	.+18     	; 0x53f4 <vfprintf+0x28e>
    53e2:	34 fe       	sbrs	r3, 4
    53e4:	0a c0       	rjmp	.+20     	; 0x53fa <vfprintf+0x294>
    53e6:	29 2f       	mov	r18, r25
    53e8:	26 60       	ori	r18, 0x06	; 6
    53ea:	b2 2e       	mov	r11, r18
    53ec:	06 c0       	rjmp	.+12     	; 0x53fa <vfprintf+0x294>
    53ee:	28 e0       	ldi	r18, 0x08	; 8
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	05 c0       	rjmp	.+10     	; 0x53fe <vfprintf+0x298>
    53f4:	20 e1       	ldi	r18, 0x10	; 16
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	02 c0       	rjmp	.+4      	; 0x53fe <vfprintf+0x298>
    53fa:	20 e1       	ldi	r18, 0x10	; 16
    53fc:	32 e0       	ldi	r19, 0x02	; 2
    53fe:	f8 01       	movw	r30, r16
    5400:	b7 fe       	sbrs	r11, 7
    5402:	07 c0       	rjmp	.+14     	; 0x5412 <vfprintf+0x2ac>
    5404:	60 81       	ld	r22, Z
    5406:	71 81       	ldd	r23, Z+1	; 0x01
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	93 81       	ldd	r25, Z+3	; 0x03
    540c:	0c 5f       	subi	r16, 0xFC	; 252
    540e:	1f 4f       	sbci	r17, 0xFF	; 255
    5410:	06 c0       	rjmp	.+12     	; 0x541e <vfprintf+0x2b8>
    5412:	60 81       	ld	r22, Z
    5414:	71 81       	ldd	r23, Z+1	; 0x01
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	0e 5f       	subi	r16, 0xFE	; 254
    541c:	1f 4f       	sbci	r17, 0xFF	; 255
    541e:	a3 01       	movw	r20, r6
    5420:	f1 d0       	rcall	.+482    	; 0x5604 <__ultoa_invert>
    5422:	88 2e       	mov	r8, r24
    5424:	86 18       	sub	r8, r6
    5426:	fb 2d       	mov	r31, r11
    5428:	ff 77       	andi	r31, 0x7F	; 127
    542a:	3f 2e       	mov	r3, r31
    542c:	36 fe       	sbrs	r3, 6
    542e:	0d c0       	rjmp	.+26     	; 0x544a <vfprintf+0x2e4>
    5430:	23 2d       	mov	r18, r3
    5432:	2e 7f       	andi	r18, 0xFE	; 254
    5434:	a2 2e       	mov	r10, r18
    5436:	89 14       	cp	r8, r9
    5438:	58 f4       	brcc	.+22     	; 0x5450 <vfprintf+0x2ea>
    543a:	34 fe       	sbrs	r3, 4
    543c:	0b c0       	rjmp	.+22     	; 0x5454 <vfprintf+0x2ee>
    543e:	32 fc       	sbrc	r3, 2
    5440:	09 c0       	rjmp	.+18     	; 0x5454 <vfprintf+0x2ee>
    5442:	83 2d       	mov	r24, r3
    5444:	8e 7e       	andi	r24, 0xEE	; 238
    5446:	a8 2e       	mov	r10, r24
    5448:	05 c0       	rjmp	.+10     	; 0x5454 <vfprintf+0x2ee>
    544a:	b8 2c       	mov	r11, r8
    544c:	a3 2c       	mov	r10, r3
    544e:	03 c0       	rjmp	.+6      	; 0x5456 <vfprintf+0x2f0>
    5450:	b8 2c       	mov	r11, r8
    5452:	01 c0       	rjmp	.+2      	; 0x5456 <vfprintf+0x2f0>
    5454:	b9 2c       	mov	r11, r9
    5456:	a4 fe       	sbrs	r10, 4
    5458:	0f c0       	rjmp	.+30     	; 0x5478 <vfprintf+0x312>
    545a:	fe 01       	movw	r30, r28
    545c:	e8 0d       	add	r30, r8
    545e:	f1 1d       	adc	r31, r1
    5460:	80 81       	ld	r24, Z
    5462:	80 33       	cpi	r24, 0x30	; 48
    5464:	21 f4       	brne	.+8      	; 0x546e <vfprintf+0x308>
    5466:	9a 2d       	mov	r25, r10
    5468:	99 7e       	andi	r25, 0xE9	; 233
    546a:	a9 2e       	mov	r10, r25
    546c:	09 c0       	rjmp	.+18     	; 0x5480 <vfprintf+0x31a>
    546e:	a2 fe       	sbrs	r10, 2
    5470:	06 c0       	rjmp	.+12     	; 0x547e <vfprintf+0x318>
    5472:	b3 94       	inc	r11
    5474:	b3 94       	inc	r11
    5476:	04 c0       	rjmp	.+8      	; 0x5480 <vfprintf+0x31a>
    5478:	8a 2d       	mov	r24, r10
    547a:	86 78       	andi	r24, 0x86	; 134
    547c:	09 f0       	breq	.+2      	; 0x5480 <vfprintf+0x31a>
    547e:	b3 94       	inc	r11
    5480:	a3 fc       	sbrc	r10, 3
    5482:	10 c0       	rjmp	.+32     	; 0x54a4 <vfprintf+0x33e>
    5484:	a0 fe       	sbrs	r10, 0
    5486:	06 c0       	rjmp	.+12     	; 0x5494 <vfprintf+0x32e>
    5488:	b2 14       	cp	r11, r2
    548a:	80 f4       	brcc	.+32     	; 0x54ac <vfprintf+0x346>
    548c:	28 0c       	add	r2, r8
    548e:	92 2c       	mov	r9, r2
    5490:	9b 18       	sub	r9, r11
    5492:	0d c0       	rjmp	.+26     	; 0x54ae <vfprintf+0x348>
    5494:	b2 14       	cp	r11, r2
    5496:	58 f4       	brcc	.+22     	; 0x54ae <vfprintf+0x348>
    5498:	b6 01       	movw	r22, r12
    549a:	80 e2       	ldi	r24, 0x20	; 32
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	76 d0       	rcall	.+236    	; 0x558c <fputc>
    54a0:	b3 94       	inc	r11
    54a2:	f8 cf       	rjmp	.-16     	; 0x5494 <vfprintf+0x32e>
    54a4:	b2 14       	cp	r11, r2
    54a6:	18 f4       	brcc	.+6      	; 0x54ae <vfprintf+0x348>
    54a8:	2b 18       	sub	r2, r11
    54aa:	02 c0       	rjmp	.+4      	; 0x54b0 <vfprintf+0x34a>
    54ac:	98 2c       	mov	r9, r8
    54ae:	21 2c       	mov	r2, r1
    54b0:	a4 fe       	sbrs	r10, 4
    54b2:	0f c0       	rjmp	.+30     	; 0x54d2 <vfprintf+0x36c>
    54b4:	b6 01       	movw	r22, r12
    54b6:	80 e3       	ldi	r24, 0x30	; 48
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	68 d0       	rcall	.+208    	; 0x558c <fputc>
    54bc:	a2 fe       	sbrs	r10, 2
    54be:	16 c0       	rjmp	.+44     	; 0x54ec <vfprintf+0x386>
    54c0:	a1 fc       	sbrc	r10, 1
    54c2:	03 c0       	rjmp	.+6      	; 0x54ca <vfprintf+0x364>
    54c4:	88 e7       	ldi	r24, 0x78	; 120
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	02 c0       	rjmp	.+4      	; 0x54ce <vfprintf+0x368>
    54ca:	88 e5       	ldi	r24, 0x58	; 88
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	b6 01       	movw	r22, r12
    54d0:	0c c0       	rjmp	.+24     	; 0x54ea <vfprintf+0x384>
    54d2:	8a 2d       	mov	r24, r10
    54d4:	86 78       	andi	r24, 0x86	; 134
    54d6:	51 f0       	breq	.+20     	; 0x54ec <vfprintf+0x386>
    54d8:	a1 fe       	sbrs	r10, 1
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <vfprintf+0x37a>
    54dc:	8b e2       	ldi	r24, 0x2B	; 43
    54de:	01 c0       	rjmp	.+2      	; 0x54e2 <vfprintf+0x37c>
    54e0:	80 e2       	ldi	r24, 0x20	; 32
    54e2:	a7 fc       	sbrc	r10, 7
    54e4:	8d e2       	ldi	r24, 0x2D	; 45
    54e6:	b6 01       	movw	r22, r12
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	50 d0       	rcall	.+160    	; 0x558c <fputc>
    54ec:	89 14       	cp	r8, r9
    54ee:	30 f4       	brcc	.+12     	; 0x54fc <vfprintf+0x396>
    54f0:	b6 01       	movw	r22, r12
    54f2:	80 e3       	ldi	r24, 0x30	; 48
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	4a d0       	rcall	.+148    	; 0x558c <fputc>
    54f8:	9a 94       	dec	r9
    54fa:	f8 cf       	rjmp	.-16     	; 0x54ec <vfprintf+0x386>
    54fc:	8a 94       	dec	r8
    54fe:	f3 01       	movw	r30, r6
    5500:	e8 0d       	add	r30, r8
    5502:	f1 1d       	adc	r31, r1
    5504:	80 81       	ld	r24, Z
    5506:	b6 01       	movw	r22, r12
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	40 d0       	rcall	.+128    	; 0x558c <fputc>
    550c:	81 10       	cpse	r8, r1
    550e:	f6 cf       	rjmp	.-20     	; 0x54fc <vfprintf+0x396>
    5510:	22 20       	and	r2, r2
    5512:	09 f4       	brne	.+2      	; 0x5516 <vfprintf+0x3b0>
    5514:	4e ce       	rjmp	.-868    	; 0x51b2 <vfprintf+0x4c>
    5516:	b6 01       	movw	r22, r12
    5518:	80 e2       	ldi	r24, 0x20	; 32
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	37 d0       	rcall	.+110    	; 0x558c <fputc>
    551e:	2a 94       	dec	r2
    5520:	f7 cf       	rjmp	.-18     	; 0x5510 <vfprintf+0x3aa>
    5522:	f6 01       	movw	r30, r12
    5524:	86 81       	ldd	r24, Z+6	; 0x06
    5526:	97 81       	ldd	r25, Z+7	; 0x07
    5528:	02 c0       	rjmp	.+4      	; 0x552e <vfprintf+0x3c8>
    552a:	8f ef       	ldi	r24, 0xFF	; 255
    552c:	9f ef       	ldi	r25, 0xFF	; 255
    552e:	2b 96       	adiw	r28, 0x0b	; 11
    5530:	0f b6       	in	r0, 0x3f	; 63
    5532:	f8 94       	cli
    5534:	de bf       	out	0x3e, r29	; 62
    5536:	0f be       	out	0x3f, r0	; 63
    5538:	cd bf       	out	0x3d, r28	; 61
    553a:	df 91       	pop	r29
    553c:	cf 91       	pop	r28
    553e:	1f 91       	pop	r17
    5540:	0f 91       	pop	r16
    5542:	ff 90       	pop	r15
    5544:	ef 90       	pop	r14
    5546:	df 90       	pop	r13
    5548:	cf 90       	pop	r12
    554a:	bf 90       	pop	r11
    554c:	af 90       	pop	r10
    554e:	9f 90       	pop	r9
    5550:	8f 90       	pop	r8
    5552:	7f 90       	pop	r7
    5554:	6f 90       	pop	r6
    5556:	5f 90       	pop	r5
    5558:	4f 90       	pop	r4
    555a:	3f 90       	pop	r3
    555c:	2f 90       	pop	r2
    555e:	08 95       	ret

00005560 <strnlen_P>:
    5560:	fc 01       	movw	r30, r24
    5562:	05 90       	lpm	r0, Z+
    5564:	61 50       	subi	r22, 0x01	; 1
    5566:	70 40       	sbci	r23, 0x00	; 0
    5568:	01 10       	cpse	r0, r1
    556a:	d8 f7       	brcc	.-10     	; 0x5562 <strnlen_P+0x2>
    556c:	80 95       	com	r24
    556e:	90 95       	com	r25
    5570:	8e 0f       	add	r24, r30
    5572:	9f 1f       	adc	r25, r31
    5574:	08 95       	ret

00005576 <strnlen>:
    5576:	fc 01       	movw	r30, r24
    5578:	61 50       	subi	r22, 0x01	; 1
    557a:	70 40       	sbci	r23, 0x00	; 0
    557c:	01 90       	ld	r0, Z+
    557e:	01 10       	cpse	r0, r1
    5580:	d8 f7       	brcc	.-10     	; 0x5578 <strnlen+0x2>
    5582:	80 95       	com	r24
    5584:	90 95       	com	r25
    5586:	8e 0f       	add	r24, r30
    5588:	9f 1f       	adc	r25, r31
    558a:	08 95       	ret

0000558c <fputc>:
    558c:	0f 93       	push	r16
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	fb 01       	movw	r30, r22
    5596:	23 81       	ldd	r18, Z+3	; 0x03
    5598:	21 fd       	sbrc	r18, 1
    559a:	03 c0       	rjmp	.+6      	; 0x55a2 <fputc+0x16>
    559c:	8f ef       	ldi	r24, 0xFF	; 255
    559e:	9f ef       	ldi	r25, 0xFF	; 255
    55a0:	2c c0       	rjmp	.+88     	; 0x55fa <fputc+0x6e>
    55a2:	22 ff       	sbrs	r18, 2
    55a4:	16 c0       	rjmp	.+44     	; 0x55d2 <fputc+0x46>
    55a6:	46 81       	ldd	r20, Z+6	; 0x06
    55a8:	57 81       	ldd	r21, Z+7	; 0x07
    55aa:	24 81       	ldd	r18, Z+4	; 0x04
    55ac:	35 81       	ldd	r19, Z+5	; 0x05
    55ae:	42 17       	cp	r20, r18
    55b0:	53 07       	cpc	r21, r19
    55b2:	44 f4       	brge	.+16     	; 0x55c4 <fputc+0x38>
    55b4:	a0 81       	ld	r26, Z
    55b6:	b1 81       	ldd	r27, Z+1	; 0x01
    55b8:	9d 01       	movw	r18, r26
    55ba:	2f 5f       	subi	r18, 0xFF	; 255
    55bc:	3f 4f       	sbci	r19, 0xFF	; 255
    55be:	31 83       	std	Z+1, r19	; 0x01
    55c0:	20 83       	st	Z, r18
    55c2:	8c 93       	st	X, r24
    55c4:	26 81       	ldd	r18, Z+6	; 0x06
    55c6:	37 81       	ldd	r19, Z+7	; 0x07
    55c8:	2f 5f       	subi	r18, 0xFF	; 255
    55ca:	3f 4f       	sbci	r19, 0xFF	; 255
    55cc:	37 83       	std	Z+7, r19	; 0x07
    55ce:	26 83       	std	Z+6, r18	; 0x06
    55d0:	14 c0       	rjmp	.+40     	; 0x55fa <fputc+0x6e>
    55d2:	8b 01       	movw	r16, r22
    55d4:	ec 01       	movw	r28, r24
    55d6:	fb 01       	movw	r30, r22
    55d8:	00 84       	ldd	r0, Z+8	; 0x08
    55da:	f1 85       	ldd	r31, Z+9	; 0x09
    55dc:	e0 2d       	mov	r30, r0
    55de:	19 95       	eicall
    55e0:	89 2b       	or	r24, r25
    55e2:	e1 f6       	brne	.-72     	; 0x559c <fputc+0x10>
    55e4:	d8 01       	movw	r26, r16
    55e6:	16 96       	adiw	r26, 0x06	; 6
    55e8:	8d 91       	ld	r24, X+
    55ea:	9c 91       	ld	r25, X
    55ec:	17 97       	sbiw	r26, 0x07	; 7
    55ee:	01 96       	adiw	r24, 0x01	; 1
    55f0:	17 96       	adiw	r26, 0x07	; 7
    55f2:	9c 93       	st	X, r25
    55f4:	8e 93       	st	-X, r24
    55f6:	16 97       	sbiw	r26, 0x06	; 6
    55f8:	ce 01       	movw	r24, r28
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	1f 91       	pop	r17
    5600:	0f 91       	pop	r16
    5602:	08 95       	ret

00005604 <__ultoa_invert>:
    5604:	fa 01       	movw	r30, r20
    5606:	aa 27       	eor	r26, r26
    5608:	28 30       	cpi	r18, 0x08	; 8
    560a:	51 f1       	breq	.+84     	; 0x5660 <__ultoa_invert+0x5c>
    560c:	20 31       	cpi	r18, 0x10	; 16
    560e:	81 f1       	breq	.+96     	; 0x5670 <__ultoa_invert+0x6c>
    5610:	e8 94       	clt
    5612:	6f 93       	push	r22
    5614:	6e 7f       	andi	r22, 0xFE	; 254
    5616:	6e 5f       	subi	r22, 0xFE	; 254
    5618:	7f 4f       	sbci	r23, 0xFF	; 255
    561a:	8f 4f       	sbci	r24, 0xFF	; 255
    561c:	9f 4f       	sbci	r25, 0xFF	; 255
    561e:	af 4f       	sbci	r26, 0xFF	; 255
    5620:	b1 e0       	ldi	r27, 0x01	; 1
    5622:	3e d0       	rcall	.+124    	; 0x56a0 <__ultoa_invert+0x9c>
    5624:	b4 e0       	ldi	r27, 0x04	; 4
    5626:	3c d0       	rcall	.+120    	; 0x56a0 <__ultoa_invert+0x9c>
    5628:	67 0f       	add	r22, r23
    562a:	78 1f       	adc	r23, r24
    562c:	89 1f       	adc	r24, r25
    562e:	9a 1f       	adc	r25, r26
    5630:	a1 1d       	adc	r26, r1
    5632:	68 0f       	add	r22, r24
    5634:	79 1f       	adc	r23, r25
    5636:	8a 1f       	adc	r24, r26
    5638:	91 1d       	adc	r25, r1
    563a:	a1 1d       	adc	r26, r1
    563c:	6a 0f       	add	r22, r26
    563e:	71 1d       	adc	r23, r1
    5640:	81 1d       	adc	r24, r1
    5642:	91 1d       	adc	r25, r1
    5644:	a1 1d       	adc	r26, r1
    5646:	20 d0       	rcall	.+64     	; 0x5688 <__ultoa_invert+0x84>
    5648:	09 f4       	brne	.+2      	; 0x564c <__ultoa_invert+0x48>
    564a:	68 94       	set
    564c:	3f 91       	pop	r19
    564e:	2a e0       	ldi	r18, 0x0A	; 10
    5650:	26 9f       	mul	r18, r22
    5652:	11 24       	eor	r1, r1
    5654:	30 19       	sub	r19, r0
    5656:	30 5d       	subi	r19, 0xD0	; 208
    5658:	31 93       	st	Z+, r19
    565a:	de f6       	brtc	.-74     	; 0x5612 <__ultoa_invert+0xe>
    565c:	cf 01       	movw	r24, r30
    565e:	08 95       	ret
    5660:	46 2f       	mov	r20, r22
    5662:	47 70       	andi	r20, 0x07	; 7
    5664:	40 5d       	subi	r20, 0xD0	; 208
    5666:	41 93       	st	Z+, r20
    5668:	b3 e0       	ldi	r27, 0x03	; 3
    566a:	0f d0       	rcall	.+30     	; 0x568a <__ultoa_invert+0x86>
    566c:	c9 f7       	brne	.-14     	; 0x5660 <__ultoa_invert+0x5c>
    566e:	f6 cf       	rjmp	.-20     	; 0x565c <__ultoa_invert+0x58>
    5670:	46 2f       	mov	r20, r22
    5672:	4f 70       	andi	r20, 0x0F	; 15
    5674:	40 5d       	subi	r20, 0xD0	; 208
    5676:	4a 33       	cpi	r20, 0x3A	; 58
    5678:	18 f0       	brcs	.+6      	; 0x5680 <__ultoa_invert+0x7c>
    567a:	49 5d       	subi	r20, 0xD9	; 217
    567c:	31 fd       	sbrc	r19, 1
    567e:	40 52       	subi	r20, 0x20	; 32
    5680:	41 93       	st	Z+, r20
    5682:	02 d0       	rcall	.+4      	; 0x5688 <__ultoa_invert+0x84>
    5684:	a9 f7       	brne	.-22     	; 0x5670 <__ultoa_invert+0x6c>
    5686:	ea cf       	rjmp	.-44     	; 0x565c <__ultoa_invert+0x58>
    5688:	b4 e0       	ldi	r27, 0x04	; 4
    568a:	a6 95       	lsr	r26
    568c:	97 95       	ror	r25
    568e:	87 95       	ror	r24
    5690:	77 95       	ror	r23
    5692:	67 95       	ror	r22
    5694:	ba 95       	dec	r27
    5696:	c9 f7       	brne	.-14     	; 0x568a <__ultoa_invert+0x86>
    5698:	00 97       	sbiw	r24, 0x00	; 0
    569a:	61 05       	cpc	r22, r1
    569c:	71 05       	cpc	r23, r1
    569e:	08 95       	ret
    56a0:	9b 01       	movw	r18, r22
    56a2:	ac 01       	movw	r20, r24
    56a4:	0a 2e       	mov	r0, r26
    56a6:	06 94       	lsr	r0
    56a8:	57 95       	ror	r21
    56aa:	47 95       	ror	r20
    56ac:	37 95       	ror	r19
    56ae:	27 95       	ror	r18
    56b0:	ba 95       	dec	r27
    56b2:	c9 f7       	brne	.-14     	; 0x56a6 <__ultoa_invert+0xa2>
    56b4:	62 0f       	add	r22, r18
    56b6:	73 1f       	adc	r23, r19
    56b8:	84 1f       	adc	r24, r20
    56ba:	95 1f       	adc	r25, r21
    56bc:	a0 1d       	adc	r26, r0
    56be:	08 95       	ret

000056c0 <_exit>:
    56c0:	f8 94       	cli

000056c2 <__stop_program>:
    56c2:	ff cf       	rjmp	.-2      	; 0x56c2 <__stop_program>
